using ConceptMatrix.Models;
using ConceptMatrix.Utility;
using ConceptMatrix.ViewModel;
using MaterialDesignThemes.Wpf;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Media.Media3D;
using Microsoft.Win32;
using System.IO;
using Newtonsoft.Json;
using System.Windows.Controls.Primitives;

namespace ConceptMatrix.Views
{
    /// <summary>
    /// Interaction logic for CharacterDetailsView5.xaml
    /// </summary>
    public partial class CharacterDetailsView5 : UserControl
    {
        #region Save Floats
        public float Root_X_Sav01;
        public float Root_Y_Sav01;
        public float Root_Z_Sav01;
        public float Root_W_Sav01;
        public float Abdomen_X_Sav01;
        public float Abdomen_Y_Sav01;
        public float Abdomen_Z_Sav01;
        public float Abdomen_W_Sav01;
        public float Throw_X_Sav01;
        public float Throw_Y_Sav01;
        public float Throw_Z_Sav01;
        public float Throw_W_Sav01;
        public float Waist_X_Sav01;
        public float Waist_Y_Sav01;
        public float Waist_Z_Sav01;
        public float Waist_W_Sav01;
        public float SpineA_X_Sav01;
        public float SpineA_Y_Sav01;
        public float SpineA_Z_Sav01;
        public float SpineA_W_Sav01;
        public float LegLeft_X_Sav01;
        public float LegLeft_Y_Sav01;
        public float LegLeft_Z_Sav01;
        public float LegLeft_W_Sav01;
        public float LegRight_X_Sav01;
        public float LegRight_Y_Sav01;
        public float LegRight_Z_Sav01;
        public float LegRight_W_Sav01;
        public float HolsterLeft_X_Sav01;
        public float HolsterLeft_Y_Sav01;
        public float HolsterLeft_Z_Sav01;
        public float HolsterLeft_W_Sav01;
        public float HolsterRight_X_Sav01;
        public float HolsterRight_Y_Sav01;
        public float HolsterRight_Z_Sav01;
        public float HolsterRight_W_Sav01;
        public float SheatheLeft_X_Sav01;
        public float SheatheLeft_Y_Sav01;
        public float SheatheLeft_Z_Sav01;
        public float SheatheLeft_W_Sav01;
        public float SheatheRight_X_Sav01;
        public float SheatheRight_Y_Sav01;
        public float SheatheRight_Z_Sav01;
        public float SheatheRight_W_Sav01;
        public float SpineB_X_Sav01;
        public float SpineB_Y_Sav01;
        public float SpineB_Z_Sav01;
        public float SpineB_W_Sav01;
        public float ClothBackALeft_X_Sav01;
        public float ClothBackALeft_Y_Sav01;
        public float ClothBackALeft_Z_Sav01;
        public float ClothBackALeft_W_Sav01;
        public float ClothBackARight_X_Sav01;
        public float ClothBackARight_Y_Sav01;
        public float ClothBackARight_Z_Sav01;
        public float ClothBackARight_W_Sav01;
        public float ClothFrontALeft_X_Sav01;
        public float ClothFrontALeft_Y_Sav01;
        public float ClothFrontALeft_Z_Sav01;
        public float ClothFrontALeft_W_Sav01;
        public float ClothFrontARight_X_Sav01;
        public float ClothFrontARight_Y_Sav01;
        public float ClothFrontARight_Z_Sav01;
        public float ClothFrontARight_W_Sav01;
        public float ClothSideALeft_X_Sav01;
        public float ClothSideALeft_Y_Sav01;
        public float ClothSideALeft_Z_Sav01;
        public float ClothSideALeft_W_Sav01;
        public float ClothSideARight_X_Sav01;
        public float ClothSideARight_Y_Sav01;
        public float ClothSideARight_Z_Sav01;
        public float ClothSideARight_W_Sav01;
        public float KneeLeft_X_Sav01;
        public float KneeLeft_Y_Sav01;
        public float KneeLeft_Z_Sav01;
        public float KneeLeft_W_Sav01;
        public float KneeRight_X_Sav01;
        public float KneeRight_Y_Sav01;
        public float KneeRight_Z_Sav01;
        public float KneeRight_W_Sav01;
        public float BreastLeft_X_Sav01;
        public float BreastLeft_Y_Sav01;
        public float BreastLeft_Z_Sav01;
        public float BreastLeft_W_Sav01;
        public float BreastRight_X_Sav01;
        public float BreastRight_Y_Sav01;
        public float BreastRight_Z_Sav01;
        public float BreastRight_W_Sav01;
        public float SpineC_X_Sav01;
        public float SpineC_Y_Sav01;
        public float SpineC_Z_Sav01;
        public float SpineC_W_Sav01;
        public float ClothBackBLeft_X_Sav01;
        public float ClothBackBLeft_Y_Sav01;
        public float ClothBackBLeft_Z_Sav01;
        public float ClothBackBLeft_W_Sav01;
        public float ClothBackBRight_X_Sav01;
        public float ClothBackBRight_Y_Sav01;
        public float ClothBackBRight_Z_Sav01;
        public float ClothBackBRight_W_Sav01;
        public float ClothFrontBLeft_X_Sav01;
        public float ClothFrontBLeft_Y_Sav01;
        public float ClothFrontBLeft_Z_Sav01;
        public float ClothFrontBLeft_W_Sav01;
        public float ClothFrontBRight_X_Sav01;
        public float ClothFrontBRight_Y_Sav01;
        public float ClothFrontBRight_Z_Sav01;
        public float ClothFrontBRight_W_Sav01;
        public float ClothSideBLeft_X_Sav01;
        public float ClothSideBLeft_Y_Sav01;
        public float ClothSideBLeft_Z_Sav01;
        public float ClothSideBLeft_W_Sav01;
        public float ClothSideBRight_X_Sav01;
        public float ClothSideBRight_Y_Sav01;
        public float ClothSideBRight_Z_Sav01;
        public float ClothSideBRight_W_Sav01;
        public float CalfLeft_X_Sav01;
        public float CalfLeft_Y_Sav01;
        public float CalfLeft_Z_Sav01;
        public float CalfLeft_W_Sav01;
        public float CalfRight_X_Sav01;
        public float CalfRight_Y_Sav01;
        public float CalfRight_Z_Sav01;
        public float CalfRight_W_Sav01;
        public float ScabbardLeft_X_Sav01;
        public float ScabbardLeft_Y_Sav01;
        public float ScabbardLeft_Z_Sav01;
        public float ScabbardLeft_W_Sav01;
        public float ScabbardRight_X_Sav01;
        public float ScabbardRight_Y_Sav01;
        public float ScabbardRight_Z_Sav01;
        public float ScabbardRight_W_Sav01;
        public float Neck_X_Sav01;
        public float Neck_Y_Sav01;
        public float Neck_Z_Sav01;
        public float Neck_W_Sav01;
        public float ClavicleLeft_X_Sav01;
        public float ClavicleLeft_Y_Sav01;
        public float ClavicleLeft_Z_Sav01;
        public float ClavicleLeft_W_Sav01;
        public float ClavicleRight_X_Sav01;
        public float ClavicleRight_Y_Sav01;
        public float ClavicleRight_Z_Sav01;
        public float ClavicleRight_W_Sav01;
        public float ClothBackCLeft_X_Sav01;
        public float ClothBackCLeft_Y_Sav01;
        public float ClothBackCLeft_Z_Sav01;
        public float ClothBackCLeft_W_Sav01;
        public float ClothBackCRight_X_Sav01;
        public float ClothBackCRight_Y_Sav01;
        public float ClothBackCRight_Z_Sav01;
        public float ClothBackCRight_W_Sav01;
        public float ClothFrontCLeft_X_Sav01;
        public float ClothFrontCLeft_Y_Sav01;
        public float ClothFrontCLeft_Z_Sav01;
        public float ClothFrontCLeft_W_Sav01;
        public float ClothFrontCRight_X_Sav01;
        public float ClothFrontCRight_Y_Sav01;
        public float ClothFrontCRight_Z_Sav01;
        public float ClothFrontCRight_W_Sav01;
        public float ClothSideCLeft_X_Sav01;
        public float ClothSideCLeft_Y_Sav01;
        public float ClothSideCLeft_Z_Sav01;
        public float ClothSideCLeft_W_Sav01;
        public float ClothSideCRight_X_Sav01;
        public float ClothSideCRight_Y_Sav01;
        public float ClothSideCRight_Z_Sav01;
        public float ClothSideCRight_W_Sav01;
        public float PoleynLeft_X_Sav01;
        public float PoleynLeft_Y_Sav01;
        public float PoleynLeft_Z_Sav01;
        public float PoleynLeft_W_Sav01;
        public float PoleynRight_X_Sav01;
        public float PoleynRight_Y_Sav01;
        public float PoleynRight_Z_Sav01;
        public float PoleynRight_W_Sav01;
        public float FootLeft_X_Sav01;
        public float FootLeft_Y_Sav01;
        public float FootLeft_Z_Sav01;
        public float FootLeft_W_Sav01;
        public float FootRight_X_Sav01;
        public float FootRight_Y_Sav01;
        public float FootRight_Z_Sav01;
        public float FootRight_W_Sav01;
        public float Head_X_Sav01;
        public float Head_Y_Sav01;
        public float Head_Z_Sav01;
        public float Head_W_Sav01;
        public float ArmLeft_X_Sav01;
        public float ArmLeft_Y_Sav01;
        public float ArmLeft_Z_Sav01;
        public float ArmLeft_W_Sav01;
        public float ArmRight_X_Sav01;
        public float ArmRight_Y_Sav01;
        public float ArmRight_Z_Sav01;
        public float ArmRight_W_Sav01;
        public float PauldronLeft_X_Sav01;
        public float PauldronLeft_Y_Sav01;
        public float PauldronLeft_Z_Sav01;
        public float PauldronLeft_W_Sav01;
        public float PauldronRight_X_Sav01;
        public float PauldronRight_Y_Sav01;
        public float PauldronRight_Z_Sav01;
        public float PauldronRight_W_Sav01;
        public float Unknown00_X_Sav01;
        public float Unknown00_Y_Sav01;
        public float Unknown00_Z_Sav01;
        public float Unknown00_W_Sav01;
        public float ToesLeft_X_Sav01;
        public float ToesLeft_Y_Sav01;
        public float ToesLeft_Z_Sav01;
        public float ToesLeft_W_Sav01;
        public float ToesRight_X_Sav01;
        public float ToesRight_Y_Sav01;
        public float ToesRight_Z_Sav01;
        public float ToesRight_W_Sav01;
        public float HairA_X_Sav01;
        public float HairA_Y_Sav01;
        public float HairA_Z_Sav01;
        public float HairA_W_Sav01;
        public float HairFrontLeft_X_Sav01;
        public float HairFrontLeft_Y_Sav01;
        public float HairFrontLeft_Z_Sav01;
        public float HairFrontLeft_W_Sav01;
        public float HairFrontRight_X_Sav01;
        public float HairFrontRight_Y_Sav01;
        public float HairFrontRight_Z_Sav01;
        public float HairFrontRight_W_Sav01;
        public float EarLeft_X_Sav01;
        public float EarLeft_Y_Sav01;
        public float EarLeft_Z_Sav01;
        public float EarLeft_W_Sav01;
        public float EarRight_X_Sav01;
        public float EarRight_Y_Sav01;
        public float EarRight_Z_Sav01;
        public float EarRight_W_Sav01;
        public float ForearmLeft_X_Sav01;
        public float ForearmLeft_Y_Sav01;
        public float ForearmLeft_Z_Sav01;
        public float ForearmLeft_W_Sav01;
        public float ForearmRight_X_Sav01;
        public float ForearmRight_Y_Sav01;
        public float ForearmRight_Z_Sav01;
        public float ForearmRight_W_Sav01;
        public float ShoulderLeft_X_Sav01;
        public float ShoulderLeft_Y_Sav01;
        public float ShoulderLeft_Z_Sav01;
        public float ShoulderLeft_W_Sav01;
        public float ShoulderRight_X_Sav01;
        public float ShoulderRight_Y_Sav01;
        public float ShoulderRight_Z_Sav01;
        public float ShoulderRight_W_Sav01;
        public float HairB_X_Sav01;
        public float HairB_Y_Sav01;
        public float HairB_Z_Sav01;
        public float HairB_W_Sav01;
        public float HandLeft_X_Sav01;
        public float HandLeft_Y_Sav01;
        public float HandLeft_Z_Sav01;
        public float HandLeft_W_Sav01;
        public float HandRight_X_Sav01;
        public float HandRight_Y_Sav01;
        public float HandRight_Z_Sav01;
        public float HandRight_W_Sav01;
        public float ShieldLeft_X_Sav01;
        public float ShieldLeft_Y_Sav01;
        public float ShieldLeft_Z_Sav01;
        public float ShieldLeft_W_Sav01;
        public float ShieldRight_X_Sav01;
        public float ShieldRight_Y_Sav01;
        public float ShieldRight_Z_Sav01;
        public float ShieldRight_W_Sav01;
        public float EarringALeft_X_Sav01;
        public float EarringALeft_Y_Sav01;
        public float EarringALeft_Z_Sav01;
        public float EarringALeft_W_Sav01;
        public float EarringARight_X_Sav01;
        public float EarringARight_Y_Sav01;
        public float EarringARight_Z_Sav01;
        public float EarringARight_W_Sav01;
        public float ElbowLeft_X_Sav01;
        public float ElbowLeft_Y_Sav01;
        public float ElbowLeft_Z_Sav01;
        public float ElbowLeft_W_Sav01;
        public float ElbowRight_X_Sav01;
        public float ElbowRight_Y_Sav01;
        public float ElbowRight_Z_Sav01;
        public float ElbowRight_W_Sav01;
        public float CouterLeft_X_Sav01;
        public float CouterLeft_Y_Sav01;
        public float CouterLeft_Z_Sav01;
        public float CouterLeft_W_Sav01;
        public float CouterRight_X_Sav01;
        public float CouterRight_Y_Sav01;
        public float CouterRight_Z_Sav01;
        public float CouterRight_W_Sav01;
        public float WristLeft_X_Sav01;
        public float WristLeft_Y_Sav01;
        public float WristLeft_Z_Sav01;
        public float WristLeft_W_Sav01;
        public float WristRight_X_Sav01;
        public float WristRight_Y_Sav01;
        public float WristRight_Z_Sav01;
        public float WristRight_W_Sav01;
        public float IndexALeft_X_Sav01;
        public float IndexALeft_Y_Sav01;
        public float IndexALeft_Z_Sav01;
        public float IndexALeft_W_Sav01;
        public float IndexARight_X_Sav01;
        public float IndexARight_Y_Sav01;
        public float IndexARight_Z_Sav01;
        public float IndexARight_W_Sav01;
        public float PinkyALeft_X_Sav01;
        public float PinkyALeft_Y_Sav01;
        public float PinkyALeft_Z_Sav01;
        public float PinkyALeft_W_Sav01;
        public float PinkyARight_X_Sav01;
        public float PinkyARight_Y_Sav01;
        public float PinkyARight_Z_Sav01;
        public float PinkyARight_W_Sav01;
        public float RingALeft_X_Sav01;
        public float RingALeft_Y_Sav01;
        public float RingALeft_Z_Sav01;
        public float RingALeft_W_Sav01;
        public float RingARight_X_Sav01;
        public float RingARight_Y_Sav01;
        public float RingARight_Z_Sav01;
        public float RingARight_W_Sav01;
        public float MiddleALeft_X_Sav01;
        public float MiddleALeft_Y_Sav01;
        public float MiddleALeft_Z_Sav01;
        public float MiddleALeft_W_Sav01;
        public float MiddleARight_X_Sav01;
        public float MiddleARight_Y_Sav01;
        public float MiddleARight_Z_Sav01;
        public float MiddleARight_W_Sav01;
        public float ThumbALeft_X_Sav01;
        public float ThumbALeft_Y_Sav01;
        public float ThumbALeft_Z_Sav01;
        public float ThumbALeft_W_Sav01;
        public float ThumbARight_X_Sav01;
        public float ThumbARight_Y_Sav01;
        public float ThumbARight_Z_Sav01;
        public float ThumbARight_W_Sav01;
        public float WeaponLeft_X_Sav01;
        public float WeaponLeft_Y_Sav01;
        public float WeaponLeft_Z_Sav01;
        public float WeaponLeft_W_Sav01;
        public float WeaponRight_X_Sav01;
        public float WeaponRight_Y_Sav01;
        public float WeaponRight_Z_Sav01;
        public float WeaponRight_W_Sav01;
        public float EarringBLeft_X_Sav01;
        public float EarringBLeft_Y_Sav01;
        public float EarringBLeft_Z_Sav01;
        public float EarringBLeft_W_Sav01;
        public float EarringBRight_X_Sav01;
        public float EarringBRight_Y_Sav01;
        public float EarringBRight_Z_Sav01;
        public float EarringBRight_W_Sav01;
        public float IndexBLeft_X_Sav01;
        public float IndexBLeft_Y_Sav01;
        public float IndexBLeft_Z_Sav01;
        public float IndexBLeft_W_Sav01;
        public float IndexBRight_X_Sav01;
        public float IndexBRight_Y_Sav01;
        public float IndexBRight_Z_Sav01;
        public float IndexBRight_W_Sav01;
        public float PinkyBLeft_X_Sav01;
        public float PinkyBLeft_Y_Sav01;
        public float PinkyBLeft_Z_Sav01;
        public float PinkyBLeft_W_Sav01;
        public float PinkyBRight_X_Sav01;
        public float PinkyBRight_Y_Sav01;
        public float PinkyBRight_Z_Sav01;
        public float PinkyBRight_W_Sav01;
        public float RingBLeft_X_Sav01;
        public float RingBLeft_Y_Sav01;
        public float RingBLeft_Z_Sav01;
        public float RingBLeft_W_Sav01;
        public float RingBRight_X_Sav01;
        public float RingBRight_Y_Sav01;
        public float RingBRight_Z_Sav01;
        public float RingBRight_W_Sav01;
        public float MiddleBLeft_X_Sav01;
        public float MiddleBLeft_Y_Sav01;
        public float MiddleBLeft_Z_Sav01;
        public float MiddleBLeft_W_Sav01;
        public float MiddleBRight_X_Sav01;
        public float MiddleBRight_Y_Sav01;
        public float MiddleBRight_Z_Sav01;
        public float MiddleBRight_W_Sav01;
        public float ThumbBLeft_X_Sav01;
        public float ThumbBLeft_Y_Sav01;
        public float ThumbBLeft_Z_Sav01;
        public float ThumbBLeft_W_Sav01;
        public float ThumbBRight_X_Sav01;
        public float ThumbBRight_Y_Sav01;
        public float ThumbBRight_Z_Sav01;
        public float ThumbBRight_W_Sav01;
        public float TailA_X_Sav01;
        public float TailA_Y_Sav01;
        public float TailA_Z_Sav01;
        public float TailA_W_Sav01;
        public float TailB_X_Sav01;
        public float TailB_Y_Sav01;
        public float TailB_Z_Sav01;
        public float TailB_W_Sav01;
        public float TailC_X_Sav01;
        public float TailC_Y_Sav01;
        public float TailC_Z_Sav01;
        public float TailC_W_Sav01;
        public float TailD_X_Sav01;
        public float TailD_Y_Sav01;
        public float TailD_Z_Sav01;
        public float TailD_W_Sav01;
        public float TailE_X_Sav01;
        public float TailE_Y_Sav01;
        public float TailE_Z_Sav01;
        public float TailE_W_Sav01;
        public float RootHead_X_Sav01;
        public float RootHead_Y_Sav01;
        public float RootHead_Z_Sav01;
        public float RootHead_W_Sav01;
        public float Jaw_X_Sav01;
        public float Jaw_Y_Sav01;
        public float Jaw_Z_Sav01;
        public float Jaw_W_Sav01;
        public float EyelidLowerLeft_X_Sav01;
        public float EyelidLowerLeft_Y_Sav01;
        public float EyelidLowerLeft_Z_Sav01;
        public float EyelidLowerLeft_W_Sav01;
        public float EyelidLowerRight_X_Sav01;
        public float EyelidLowerRight_Y_Sav01;
        public float EyelidLowerRight_Z_Sav01;
        public float EyelidLowerRight_W_Sav01;
        public float EyeLeft_X_Sav01;
        public float EyeLeft_Y_Sav01;
        public float EyeLeft_Z_Sav01;
        public float EyeLeft_W_Sav01;
        public float EyeRight_X_Sav01;
        public float EyeRight_Y_Sav01;
        public float EyeRight_Z_Sav01;
        public float EyeRight_W_Sav01;
        public float Nose_X_Sav01;
        public float Nose_Y_Sav01;
        public float Nose_Z_Sav01;
        public float Nose_W_Sav01;
        public float CheekLeft_X_Sav01;
        public float CheekLeft_Y_Sav01;
        public float CheekLeft_Z_Sav01;
        public float CheekLeft_W_Sav01;
        public float HrothWhiskersLeft_X_Sav01;
        public float HrothWhiskersLeft_Y_Sav01;
        public float HrothWhiskersLeft_Z_Sav01;
        public float HrothWhiskersLeft_W_Sav01;
        public float CheekRight_X_Sav01;
        public float CheekRight_Y_Sav01;
        public float CheekRight_Z_Sav01;
        public float CheekRight_W_Sav01;
        public float HrothWhiskersRight_X_Sav01;
        public float HrothWhiskersRight_Y_Sav01;
        public float HrothWhiskersRight_Z_Sav01;
        public float HrothWhiskersRight_W_Sav01;
        public float LipsLeft_X_Sav01;
        public float LipsLeft_Y_Sav01;
        public float LipsLeft_Z_Sav01;
        public float LipsLeft_W_Sav01;
        public float HrothEyebrowLeft_X_Sav01;
        public float HrothEyebrowLeft_Y_Sav01;
        public float HrothEyebrowLeft_Z_Sav01;
        public float HrothEyebrowLeft_W_Sav01;
        public float LipsRight_X_Sav01;
        public float LipsRight_Y_Sav01;
        public float LipsRight_Z_Sav01;
        public float LipsRight_W_Sav01;
        public float HrothEyebrowRight_X_Sav01;
        public float HrothEyebrowRight_Y_Sav01;
        public float HrothEyebrowRight_Z_Sav01;
        public float HrothEyebrowRight_W_Sav01;
        public float EyebrowLeft_X_Sav01;
        public float EyebrowLeft_Y_Sav01;
        public float EyebrowLeft_Z_Sav01;
        public float EyebrowLeft_W_Sav01;
        public float HrothBridge_X_Sav01;
        public float HrothBridge_Y_Sav01;
        public float HrothBridge_Z_Sav01;
        public float HrothBridge_W_Sav01;
        public float EyebrowRight_X_Sav01;
        public float EyebrowRight_Y_Sav01;
        public float EyebrowRight_Z_Sav01;
        public float EyebrowRight_W_Sav01;
        public float HrothBrowLeft_X_Sav01;
        public float HrothBrowLeft_Y_Sav01;
        public float HrothBrowLeft_Z_Sav01;
        public float HrothBrowLeft_W_Sav01;
        public float Bridge_X_Sav01;
        public float Bridge_Y_Sav01;
        public float Bridge_Z_Sav01;
        public float Bridge_W_Sav01;
        public float HrothBrowRight_X_Sav01;
        public float HrothBrowRight_Y_Sav01;
        public float HrothBrowRight_Z_Sav01;
        public float HrothBrowRight_W_Sav01;
        public float BrowLeft_X_Sav01;
        public float BrowLeft_Y_Sav01;
        public float BrowLeft_Z_Sav01;
        public float BrowLeft_W_Sav01;
        public float HrothJawUpper_X_Sav01;
        public float HrothJawUpper_Y_Sav01;
        public float HrothJawUpper_Z_Sav01;
        public float HrothJawUpper_W_Sav01;
        public float BrowRight_X_Sav01;
        public float BrowRight_Y_Sav01;
        public float BrowRight_Z_Sav01;
        public float BrowRight_W_Sav01;
        public float HrothLipUpper_X_Sav01;
        public float HrothLipUpper_Y_Sav01;
        public float HrothLipUpper_Z_Sav01;
        public float HrothLipUpper_W_Sav01;
        public float LipUpperA_X_Sav01;
        public float LipUpperA_Y_Sav01;
        public float LipUpperA_Z_Sav01;
        public float LipUpperA_W_Sav01;
        public float HrothEyelidUpperLeft_X_Sav01;
        public float HrothEyelidUpperLeft_Y_Sav01;
        public float HrothEyelidUpperLeft_Z_Sav01;
        public float HrothEyelidUpperLeft_W_Sav01;
        public float EyelidUpperLeft_X_Sav01;
        public float EyelidUpperLeft_Y_Sav01;
        public float EyelidUpperLeft_Z_Sav01;
        public float EyelidUpperLeft_W_Sav01;
        public float HrothEyelidUpperRight_X_Sav01;
        public float HrothEyelidUpperRight_Y_Sav01;
        public float HrothEyelidUpperRight_Z_Sav01;
        public float HrothEyelidUpperRight_W_Sav01;
        public float EyelidUpperRight_X_Sav01;
        public float EyelidUpperRight_Y_Sav01;
        public float EyelidUpperRight_Z_Sav01;
        public float EyelidUpperRight_W_Sav01;
        public float HrothLipsLeft_X_Sav01;
        public float HrothLipsLeft_Y_Sav01;
        public float HrothLipsLeft_Z_Sav01;
        public float HrothLipsLeft_W_Sav01;
        public float LipLowerA_X_Sav01;
        public float LipLowerA_Y_Sav01;
        public float LipLowerA_Z_Sav01;
        public float LipLowerA_W_Sav01;
        public float HrothLipsRight_X_Sav01;
        public float HrothLipsRight_Y_Sav01;
        public float HrothLipsRight_Z_Sav01;
        public float HrothLipsRight_W_Sav01;
        public float VieraEar01ALeft_X_Sav01;
        public float VieraEar01ALeft_Y_Sav01;
        public float VieraEar01ALeft_Z_Sav01;
        public float VieraEar01ALeft_W_Sav01;
        public float LipUpperB_X_Sav01;
        public float LipUpperB_Y_Sav01;
        public float LipUpperB_Z_Sav01;
        public float LipUpperB_W_Sav01;
        public float HrothLipUpperLeft_X_Sav01;
        public float HrothLipUpperLeft_Y_Sav01;
        public float HrothLipUpperLeft_Z_Sav01;
        public float HrothLipUpperLeft_W_Sav01;
        public float VieraEar01ARight_X_Sav01;
        public float VieraEar01ARight_Y_Sav01;
        public float VieraEar01ARight_Z_Sav01;
        public float VieraEar01ARight_W_Sav01;
        public float LipLowerB_X_Sav01;
        public float LipLowerB_Y_Sav01;
        public float LipLowerB_Z_Sav01;
        public float LipLowerB_W_Sav01;
        public float HrothLipUpperRight_X_Sav01;
        public float HrothLipUpperRight_Y_Sav01;
        public float HrothLipUpperRight_Z_Sav01;
        public float HrothLipUpperRight_W_Sav01;
        public float VieraEar02ALeft_X_Sav01;
        public float VieraEar02ALeft_Y_Sav01;
        public float VieraEar02ALeft_Z_Sav01;
        public float VieraEar02ALeft_W_Sav01;
        public float HrothLipLower_X_Sav01;
        public float HrothLipLower_Y_Sav01;
        public float HrothLipLower_Z_Sav01;
        public float HrothLipLower_W_Sav01;
        public float VieraEar02ARight_X_Sav01;
        public float VieraEar02ARight_Y_Sav01;
        public float VieraEar02ARight_Z_Sav01;
        public float VieraEar02ARight_W_Sav01;
        public float VieraEar03ALeft_X_Sav01;
        public float VieraEar03ALeft_Y_Sav01;
        public float VieraEar03ALeft_Z_Sav01;
        public float VieraEar03ALeft_W_Sav01;
        public float VieraEar03ARight_X_Sav01;
        public float VieraEar03ARight_Y_Sav01;
        public float VieraEar03ARight_Z_Sav01;
        public float VieraEar03ARight_W_Sav01;
        public float VieraEar04ALeft_X_Sav01;
        public float VieraEar04ALeft_Y_Sav01;
        public float VieraEar04ALeft_Z_Sav01;
        public float VieraEar04ALeft_W_Sav01;
        public float VieraEar04ARight_X_Sav01;
        public float VieraEar04ARight_Y_Sav01;
        public float VieraEar04ARight_Z_Sav01;
        public float VieraEar04ARight_W_Sav01;
        public float VieraLipLowerA_X_Sav01;
        public float VieraLipLowerA_Y_Sav01;
        public float VieraLipLowerA_Z_Sav01;
        public float VieraLipLowerA_W_Sav01;
        public float VieraLipUpperB_X_Sav01;
        public float VieraLipUpperB_Y_Sav01;
        public float VieraLipUpperB_Z_Sav01;
        public float VieraLipUpperB_W_Sav01;
        public float VieraEar01BLeft_X_Sav01;
        public float VieraEar01BLeft_Y_Sav01;
        public float VieraEar01BLeft_Z_Sav01;
        public float VieraEar01BLeft_W_Sav01;
        public float VieraEar01BRight_X_Sav01;
        public float VieraEar01BRight_Y_Sav01;
        public float VieraEar01BRight_Z_Sav01;
        public float VieraEar01BRight_W_Sav01;
        public float VieraEar02BLeft_X_Sav01;
        public float VieraEar02BLeft_Y_Sav01;
        public float VieraEar02BLeft_Z_Sav01;
        public float VieraEar02BLeft_W_Sav01;
        public float VieraEar02BRight_X_Sav01;
        public float VieraEar02BRight_Y_Sav01;
        public float VieraEar02BRight_Z_Sav01;
        public float VieraEar02BRight_W_Sav01;
        public float VieraEar03BLeft_X_Sav01;
        public float VieraEar03BLeft_Y_Sav01;
        public float VieraEar03BLeft_Z_Sav01;
        public float VieraEar03BLeft_W_Sav01;
        public float VieraEar03BRight_X_Sav01;
        public float VieraEar03BRight_Y_Sav01;
        public float VieraEar03BRight_Z_Sav01;
        public float VieraEar03BRight_W_Sav01;
        public float VieraEar04BLeft_X_Sav01;
        public float VieraEar04BLeft_Y_Sav01;
        public float VieraEar04BLeft_Z_Sav01;
        public float VieraEar04BLeft_W_Sav01;
        public float VieraEar04BRight_X_Sav01;
        public float VieraEar04BRight_Y_Sav01;
        public float VieraEar04BRight_Z_Sav01;
        public float VieraEar04BRight_W_Sav01;
        public float VieraLipLowerB_X_Sav01;
        public float VieraLipLowerB_Y_Sav01;
        public float VieraLipLowerB_Z_Sav01;
        public float VieraLipLowerB_W_Sav01;
        public float ExRootHair_X_Sav01;
        public float ExRootHair_Y_Sav01;
        public float ExRootHair_Z_Sav01;
        public float ExRootHair_W_Sav01;
        public float ExHairA_X_Sav01;
        public float ExHairA_Y_Sav01;
        public float ExHairA_Z_Sav01;
        public float ExHairA_W_Sav01;
        public float ExHairB_X_Sav01;
        public float ExHairB_Y_Sav01;
        public float ExHairB_Z_Sav01;
        public float ExHairB_W_Sav01;
        public float ExHairC_X_Sav01;
        public float ExHairC_Y_Sav01;
        public float ExHairC_Z_Sav01;
        public float ExHairC_W_Sav01;
        public float ExHairD_X_Sav01;
        public float ExHairD_Y_Sav01;
        public float ExHairD_Z_Sav01;
        public float ExHairD_W_Sav01;
        public float ExHairE_X_Sav01;
        public float ExHairE_Y_Sav01;
        public float ExHairE_Z_Sav01;
        public float ExHairE_W_Sav01;
        public float ExHairF_X_Sav01;
        public float ExHairF_Y_Sav01;
        public float ExHairF_Z_Sav01;
        public float ExHairF_W_Sav01;
        public float ExHairG_X_Sav01;
        public float ExHairG_Y_Sav01;
        public float ExHairG_Z_Sav01;
        public float ExHairG_W_Sav01;
        public float ExHairH_X_Sav01;
        public float ExHairH_Y_Sav01;
        public float ExHairH_Z_Sav01;
        public float ExHairH_W_Sav01;
        public float ExHairI_X_Sav01;
        public float ExHairI_Y_Sav01;
        public float ExHairI_Z_Sav01;
        public float ExHairI_W_Sav01;
        public float ExHairJ_X_Sav01;
        public float ExHairJ_Y_Sav01;
        public float ExHairJ_Z_Sav01;
        public float ExHairJ_W_Sav01;
        public float ExHairK_X_Sav01;
        public float ExHairK_Y_Sav01;
        public float ExHairK_Z_Sav01;
        public float ExHairK_W_Sav01;
        public float ExHairL_X_Sav01;
        public float ExHairL_Y_Sav01;
        public float ExHairL_Z_Sav01;
        public float ExHairL_W_Sav01;
        public float ExRootMet_X_Sav01;
        public float ExRootMet_Y_Sav01;
        public float ExRootMet_Z_Sav01;
        public float ExRootMet_W_Sav01;
        public float ExMetA_X_Sav01;
        public float ExMetA_Y_Sav01;
        public float ExMetA_Z_Sav01;
        public float ExMetA_W_Sav01;
        public float ExMetB_X_Sav01;
        public float ExMetB_Y_Sav01;
        public float ExMetB_Z_Sav01;
        public float ExMetB_W_Sav01;
        public float ExMetC_X_Sav01;
        public float ExMetC_Y_Sav01;
        public float ExMetC_Z_Sav01;
        public float ExMetC_W_Sav01;
        public float ExMetD_X_Sav01;
        public float ExMetD_Y_Sav01;
        public float ExMetD_Z_Sav01;
        public float ExMetD_W_Sav01;
        public float ExMetE_X_Sav01;
        public float ExMetE_Y_Sav01;
        public float ExMetE_Z_Sav01;
        public float ExMetE_W_Sav01;
        public float ExMetF_X_Sav01;
        public float ExMetF_Y_Sav01;
        public float ExMetF_Z_Sav01;
        public float ExMetF_W_Sav01;
        public float ExMetG_X_Sav01;
        public float ExMetG_Y_Sav01;
        public float ExMetG_Z_Sav01;
        public float ExMetG_W_Sav01;
        public float ExMetH_X_Sav01;
        public float ExMetH_Y_Sav01;
        public float ExMetH_Z_Sav01;
        public float ExMetH_W_Sav01;
        public float ExMetI_X_Sav01;
        public float ExMetI_Y_Sav01;
        public float ExMetI_Z_Sav01;
        public float ExMetI_W_Sav01;
        public float ExMetJ_X_Sav01;
        public float ExMetJ_Y_Sav01;
        public float ExMetJ_Z_Sav01;
        public float ExMetJ_W_Sav01;
        public float ExMetK_X_Sav01;
        public float ExMetK_Y_Sav01;
        public float ExMetK_Z_Sav01;
        public float ExMetK_W_Sav01;
        public float ExMetL_X_Sav01;
        public float ExMetL_Y_Sav01;
        public float ExMetL_Z_Sav01;
        public float ExMetL_W_Sav01;
        public float ExMetM_X_Sav01;
        public float ExMetM_Y_Sav01;
        public float ExMetM_Z_Sav01;
        public float ExMetM_W_Sav01;
        public float ExMetN_X_Sav01;
        public float ExMetN_Y_Sav01;
        public float ExMetN_Z_Sav01;
        public float ExMetN_W_Sav01;
        public float ExMetO_X_Sav01;
        public float ExMetO_Y_Sav01;
        public float ExMetO_Z_Sav01;
        public float ExMetO_W_Sav01;
        public float ExMetP_X_Sav01;
        public float ExMetP_Y_Sav01;
        public float ExMetP_Z_Sav01;
        public float ExMetP_W_Sav01;
        public float ExMetQ_X_Sav01;
        public float ExMetQ_Y_Sav01;
        public float ExMetQ_Z_Sav01;
        public float ExMetQ_W_Sav01;
        public float ExMetR_X_Sav01;
        public float ExMetR_Y_Sav01;
        public float ExMetR_Z_Sav01;
        public float ExMetR_W_Sav01;
        public float ExRootTop_X_Sav01;
        public float ExRootTop_Y_Sav01;
        public float ExRootTop_Z_Sav01;
        public float ExRootTop_W_Sav01;
        public float ExTopA_X_Sav01;
        public float ExTopA_Y_Sav01;
        public float ExTopA_Z_Sav01;
        public float ExTopA_W_Sav01;
        public float ExTopB_X_Sav01;
        public float ExTopB_Y_Sav01;
        public float ExTopB_Z_Sav01;
        public float ExTopB_W_Sav01;
        public float ExTopC_X_Sav01;
        public float ExTopC_Y_Sav01;
        public float ExTopC_Z_Sav01;
        public float ExTopC_W_Sav01;
        public float ExTopD_X_Sav01;
        public float ExTopD_Y_Sav01;
        public float ExTopD_Z_Sav01;
        public float ExTopD_W_Sav01;
        public float ExTopE_X_Sav01;
        public float ExTopE_Y_Sav01;
        public float ExTopE_Z_Sav01;
        public float ExTopE_W_Sav01;
        public float ExTopF_X_Sav01;
        public float ExTopF_Y_Sav01;
        public float ExTopF_Z_Sav01;
        public float ExTopF_W_Sav01;
        public float ExTopG_X_Sav01;
        public float ExTopG_Y_Sav01;
        public float ExTopG_Z_Sav01;
        public float ExTopG_W_Sav01;
        public float ExTopH_X_Sav01;
        public float ExTopH_Y_Sav01;
        public float ExTopH_Z_Sav01;
        public float ExTopH_W_Sav01;
        public float ExTopI_X_Sav01;
        public float ExTopI_Y_Sav01;
        public float ExTopI_Z_Sav01;
        public float ExTopI_W_Sav01;

        public float Root_X_Sav02;
        public float Root_Y_Sav02;
        public float Root_Z_Sav02;
        public float Root_W_Sav02;
        public float Abdomen_X_Sav02;
        public float Abdomen_Y_Sav02;
        public float Abdomen_Z_Sav02;
        public float Abdomen_W_Sav02;
        public float Throw_X_Sav02;
        public float Throw_Y_Sav02;
        public float Throw_Z_Sav02;
        public float Throw_W_Sav02;
        public float Waist_X_Sav02;
        public float Waist_Y_Sav02;
        public float Waist_Z_Sav02;
        public float Waist_W_Sav02;
        public float SpineA_X_Sav02;
        public float SpineA_Y_Sav02;
        public float SpineA_Z_Sav02;
        public float SpineA_W_Sav02;
        public float LegLeft_X_Sav02;
        public float LegLeft_Y_Sav02;
        public float LegLeft_Z_Sav02;
        public float LegLeft_W_Sav02;
        public float LegRight_X_Sav02;
        public float LegRight_Y_Sav02;
        public float LegRight_Z_Sav02;
        public float LegRight_W_Sav02;
        public float HolsterLeft_X_Sav02;
        public float HolsterLeft_Y_Sav02;
        public float HolsterLeft_Z_Sav02;
        public float HolsterLeft_W_Sav02;
        public float HolsterRight_X_Sav02;
        public float HolsterRight_Y_Sav02;
        public float HolsterRight_Z_Sav02;
        public float HolsterRight_W_Sav02;
        public float SheatheLeft_X_Sav02;
        public float SheatheLeft_Y_Sav02;
        public float SheatheLeft_Z_Sav02;
        public float SheatheLeft_W_Sav02;
        public float SheatheRight_X_Sav02;
        public float SheatheRight_Y_Sav02;
        public float SheatheRight_Z_Sav02;
        public float SheatheRight_W_Sav02;
        public float SpineB_X_Sav02;
        public float SpineB_Y_Sav02;
        public float SpineB_Z_Sav02;
        public float SpineB_W_Sav02;
        public float ClothBackALeft_X_Sav02;
        public float ClothBackALeft_Y_Sav02;
        public float ClothBackALeft_Z_Sav02;
        public float ClothBackALeft_W_Sav02;
        public float ClothBackARight_X_Sav02;
        public float ClothBackARight_Y_Sav02;
        public float ClothBackARight_Z_Sav02;
        public float ClothBackARight_W_Sav02;
        public float ClothFrontALeft_X_Sav02;
        public float ClothFrontALeft_Y_Sav02;
        public float ClothFrontALeft_Z_Sav02;
        public float ClothFrontALeft_W_Sav02;
        public float ClothFrontARight_X_Sav02;
        public float ClothFrontARight_Y_Sav02;
        public float ClothFrontARight_Z_Sav02;
        public float ClothFrontARight_W_Sav02;
        public float ClothSideALeft_X_Sav02;
        public float ClothSideALeft_Y_Sav02;
        public float ClothSideALeft_Z_Sav02;
        public float ClothSideALeft_W_Sav02;
        public float ClothSideARight_X_Sav02;
        public float ClothSideARight_Y_Sav02;
        public float ClothSideARight_Z_Sav02;
        public float ClothSideARight_W_Sav02;
        public float KneeLeft_X_Sav02;
        public float KneeLeft_Y_Sav02;
        public float KneeLeft_Z_Sav02;
        public float KneeLeft_W_Sav02;
        public float KneeRight_X_Sav02;
        public float KneeRight_Y_Sav02;
        public float KneeRight_Z_Sav02;
        public float KneeRight_W_Sav02;
        public float BreastLeft_X_Sav02;
        public float BreastLeft_Y_Sav02;
        public float BreastLeft_Z_Sav02;
        public float BreastLeft_W_Sav02;
        public float BreastRight_X_Sav02;
        public float BreastRight_Y_Sav02;
        public float BreastRight_Z_Sav02;
        public float BreastRight_W_Sav02;
        public float SpineC_X_Sav02;
        public float SpineC_Y_Sav02;
        public float SpineC_Z_Sav02;
        public float SpineC_W_Sav02;
        public float ClothBackBLeft_X_Sav02;
        public float ClothBackBLeft_Y_Sav02;
        public float ClothBackBLeft_Z_Sav02;
        public float ClothBackBLeft_W_Sav02;
        public float ClothBackBRight_X_Sav02;
        public float ClothBackBRight_Y_Sav02;
        public float ClothBackBRight_Z_Sav02;
        public float ClothBackBRight_W_Sav02;
        public float ClothFrontBLeft_X_Sav02;
        public float ClothFrontBLeft_Y_Sav02;
        public float ClothFrontBLeft_Z_Sav02;
        public float ClothFrontBLeft_W_Sav02;
        public float ClothFrontBRight_X_Sav02;
        public float ClothFrontBRight_Y_Sav02;
        public float ClothFrontBRight_Z_Sav02;
        public float ClothFrontBRight_W_Sav02;
        public float ClothSideBLeft_X_Sav02;
        public float ClothSideBLeft_Y_Sav02;
        public float ClothSideBLeft_Z_Sav02;
        public float ClothSideBLeft_W_Sav02;
        public float ClothSideBRight_X_Sav02;
        public float ClothSideBRight_Y_Sav02;
        public float ClothSideBRight_Z_Sav02;
        public float ClothSideBRight_W_Sav02;
        public float CalfLeft_X_Sav02;
        public float CalfLeft_Y_Sav02;
        public float CalfLeft_Z_Sav02;
        public float CalfLeft_W_Sav02;
        public float CalfRight_X_Sav02;
        public float CalfRight_Y_Sav02;
        public float CalfRight_Z_Sav02;
        public float CalfRight_W_Sav02;
        public float ScabbardLeft_X_Sav02;
        public float ScabbardLeft_Y_Sav02;
        public float ScabbardLeft_Z_Sav02;
        public float ScabbardLeft_W_Sav02;
        public float ScabbardRight_X_Sav02;
        public float ScabbardRight_Y_Sav02;
        public float ScabbardRight_Z_Sav02;
        public float ScabbardRight_W_Sav02;
        public float Neck_X_Sav02;
        public float Neck_Y_Sav02;
        public float Neck_Z_Sav02;
        public float Neck_W_Sav02;
        public float ClavicleLeft_X_Sav02;
        public float ClavicleLeft_Y_Sav02;
        public float ClavicleLeft_Z_Sav02;
        public float ClavicleLeft_W_Sav02;
        public float ClavicleRight_X_Sav02;
        public float ClavicleRight_Y_Sav02;
        public float ClavicleRight_Z_Sav02;
        public float ClavicleRight_W_Sav02;
        public float ClothBackCLeft_X_Sav02;
        public float ClothBackCLeft_Y_Sav02;
        public float ClothBackCLeft_Z_Sav02;
        public float ClothBackCLeft_W_Sav02;
        public float ClothBackCRight_X_Sav02;
        public float ClothBackCRight_Y_Sav02;
        public float ClothBackCRight_Z_Sav02;
        public float ClothBackCRight_W_Sav02;
        public float ClothFrontCLeft_X_Sav02;
        public float ClothFrontCLeft_Y_Sav02;
        public float ClothFrontCLeft_Z_Sav02;
        public float ClothFrontCLeft_W_Sav02;
        public float ClothFrontCRight_X_Sav02;
        public float ClothFrontCRight_Y_Sav02;
        public float ClothFrontCRight_Z_Sav02;
        public float ClothFrontCRight_W_Sav02;
        public float ClothSideCLeft_X_Sav02;
        public float ClothSideCLeft_Y_Sav02;
        public float ClothSideCLeft_Z_Sav02;
        public float ClothSideCLeft_W_Sav02;
        public float ClothSideCRight_X_Sav02;
        public float ClothSideCRight_Y_Sav02;
        public float ClothSideCRight_Z_Sav02;
        public float ClothSideCRight_W_Sav02;
        public float PoleynLeft_X_Sav02;
        public float PoleynLeft_Y_Sav02;
        public float PoleynLeft_Z_Sav02;
        public float PoleynLeft_W_Sav02;
        public float PoleynRight_X_Sav02;
        public float PoleynRight_Y_Sav02;
        public float PoleynRight_Z_Sav02;
        public float PoleynRight_W_Sav02;
        public float FootLeft_X_Sav02;
        public float FootLeft_Y_Sav02;
        public float FootLeft_Z_Sav02;
        public float FootLeft_W_Sav02;
        public float FootRight_X_Sav02;
        public float FootRight_Y_Sav02;
        public float FootRight_Z_Sav02;
        public float FootRight_W_Sav02;
        public float Head_X_Sav02;
        public float Head_Y_Sav02;
        public float Head_Z_Sav02;
        public float Head_W_Sav02;
        public float ArmLeft_X_Sav02;
        public float ArmLeft_Y_Sav02;
        public float ArmLeft_Z_Sav02;
        public float ArmLeft_W_Sav02;
        public float ArmRight_X_Sav02;
        public float ArmRight_Y_Sav02;
        public float ArmRight_Z_Sav02;
        public float ArmRight_W_Sav02;
        public float PauldronLeft_X_Sav02;
        public float PauldronLeft_Y_Sav02;
        public float PauldronLeft_Z_Sav02;
        public float PauldronLeft_W_Sav02;
        public float PauldronRight_X_Sav02;
        public float PauldronRight_Y_Sav02;
        public float PauldronRight_Z_Sav02;
        public float PauldronRight_W_Sav02;
        public float Unknown00_X_Sav02;
        public float Unknown00_Y_Sav02;
        public float Unknown00_Z_Sav02;
        public float Unknown00_W_Sav02;
        public float ToesLeft_X_Sav02;
        public float ToesLeft_Y_Sav02;
        public float ToesLeft_Z_Sav02;
        public float ToesLeft_W_Sav02;
        public float ToesRight_X_Sav02;
        public float ToesRight_Y_Sav02;
        public float ToesRight_Z_Sav02;
        public float ToesRight_W_Sav02;
        public float HairA_X_Sav02;
        public float HairA_Y_Sav02;
        public float HairA_Z_Sav02;
        public float HairA_W_Sav02;
        public float HairFrontLeft_X_Sav02;
        public float HairFrontLeft_Y_Sav02;
        public float HairFrontLeft_Z_Sav02;
        public float HairFrontLeft_W_Sav02;
        public float HairFrontRight_X_Sav02;
        public float HairFrontRight_Y_Sav02;
        public float HairFrontRight_Z_Sav02;
        public float HairFrontRight_W_Sav02;
        public float EarLeft_X_Sav02;
        public float EarLeft_Y_Sav02;
        public float EarLeft_Z_Sav02;
        public float EarLeft_W_Sav02;
        public float EarRight_X_Sav02;
        public float EarRight_Y_Sav02;
        public float EarRight_Z_Sav02;
        public float EarRight_W_Sav02;
        public float ForearmLeft_X_Sav02;
        public float ForearmLeft_Y_Sav02;
        public float ForearmLeft_Z_Sav02;
        public float ForearmLeft_W_Sav02;
        public float ForearmRight_X_Sav02;
        public float ForearmRight_Y_Sav02;
        public float ForearmRight_Z_Sav02;
        public float ForearmRight_W_Sav02;
        public float ShoulderLeft_X_Sav02;
        public float ShoulderLeft_Y_Sav02;
        public float ShoulderLeft_Z_Sav02;
        public float ShoulderLeft_W_Sav02;
        public float ShoulderRight_X_Sav02;
        public float ShoulderRight_Y_Sav02;
        public float ShoulderRight_Z_Sav02;
        public float ShoulderRight_W_Sav02;
        public float HairB_X_Sav02;
        public float HairB_Y_Sav02;
        public float HairB_Z_Sav02;
        public float HairB_W_Sav02;
        public float HandLeft_X_Sav02;
        public float HandLeft_Y_Sav02;
        public float HandLeft_Z_Sav02;
        public float HandLeft_W_Sav02;
        public float HandRight_X_Sav02;
        public float HandRight_Y_Sav02;
        public float HandRight_Z_Sav02;
        public float HandRight_W_Sav02;
        public float ShieldLeft_X_Sav02;
        public float ShieldLeft_Y_Sav02;
        public float ShieldLeft_Z_Sav02;
        public float ShieldLeft_W_Sav02;
        public float ShieldRight_X_Sav02;
        public float ShieldRight_Y_Sav02;
        public float ShieldRight_Z_Sav02;
        public float ShieldRight_W_Sav02;
        public float EarringALeft_X_Sav02;
        public float EarringALeft_Y_Sav02;
        public float EarringALeft_Z_Sav02;
        public float EarringALeft_W_Sav02;
        public float EarringARight_X_Sav02;
        public float EarringARight_Y_Sav02;
        public float EarringARight_Z_Sav02;
        public float EarringARight_W_Sav02;
        public float ElbowLeft_X_Sav02;
        public float ElbowLeft_Y_Sav02;
        public float ElbowLeft_Z_Sav02;
        public float ElbowLeft_W_Sav02;
        public float ElbowRight_X_Sav02;
        public float ElbowRight_Y_Sav02;
        public float ElbowRight_Z_Sav02;
        public float ElbowRight_W_Sav02;
        public float CouterLeft_X_Sav02;
        public float CouterLeft_Y_Sav02;
        public float CouterLeft_Z_Sav02;
        public float CouterLeft_W_Sav02;
        public float CouterRight_X_Sav02;
        public float CouterRight_Y_Sav02;
        public float CouterRight_Z_Sav02;
        public float CouterRight_W_Sav02;
        public float WristLeft_X_Sav02;
        public float WristLeft_Y_Sav02;
        public float WristLeft_Z_Sav02;
        public float WristLeft_W_Sav02;
        public float WristRight_X_Sav02;
        public float WristRight_Y_Sav02;
        public float WristRight_Z_Sav02;
        public float WristRight_W_Sav02;
        public float IndexALeft_X_Sav02;
        public float IndexALeft_Y_Sav02;
        public float IndexALeft_Z_Sav02;
        public float IndexALeft_W_Sav02;
        public float IndexARight_X_Sav02;
        public float IndexARight_Y_Sav02;
        public float IndexARight_Z_Sav02;
        public float IndexARight_W_Sav02;
        public float PinkyALeft_X_Sav02;
        public float PinkyALeft_Y_Sav02;
        public float PinkyALeft_Z_Sav02;
        public float PinkyALeft_W_Sav02;
        public float PinkyARight_X_Sav02;
        public float PinkyARight_Y_Sav02;
        public float PinkyARight_Z_Sav02;
        public float PinkyARight_W_Sav02;
        public float RingALeft_X_Sav02;
        public float RingALeft_Y_Sav02;
        public float RingALeft_Z_Sav02;
        public float RingALeft_W_Sav02;
        public float RingARight_X_Sav02;
        public float RingARight_Y_Sav02;
        public float RingARight_Z_Sav02;
        public float RingARight_W_Sav02;
        public float MiddleALeft_X_Sav02;
        public float MiddleALeft_Y_Sav02;
        public float MiddleALeft_Z_Sav02;
        public float MiddleALeft_W_Sav02;
        public float MiddleARight_X_Sav02;
        public float MiddleARight_Y_Sav02;
        public float MiddleARight_Z_Sav02;
        public float MiddleARight_W_Sav02;
        public float ThumbALeft_X_Sav02;
        public float ThumbALeft_Y_Sav02;
        public float ThumbALeft_Z_Sav02;
        public float ThumbALeft_W_Sav02;
        public float ThumbARight_X_Sav02;
        public float ThumbARight_Y_Sav02;
        public float ThumbARight_Z_Sav02;
        public float ThumbARight_W_Sav02;
        public float WeaponLeft_X_Sav02;
        public float WeaponLeft_Y_Sav02;
        public float WeaponLeft_Z_Sav02;
        public float WeaponLeft_W_Sav02;
        public float WeaponRight_X_Sav02;
        public float WeaponRight_Y_Sav02;
        public float WeaponRight_Z_Sav02;
        public float WeaponRight_W_Sav02;
        public float EarringBLeft_X_Sav02;
        public float EarringBLeft_Y_Sav02;
        public float EarringBLeft_Z_Sav02;
        public float EarringBLeft_W_Sav02;
        public float EarringBRight_X_Sav02;
        public float EarringBRight_Y_Sav02;
        public float EarringBRight_Z_Sav02;
        public float EarringBRight_W_Sav02;
        public float IndexBLeft_X_Sav02;
        public float IndexBLeft_Y_Sav02;
        public float IndexBLeft_Z_Sav02;
        public float IndexBLeft_W_Sav02;
        public float IndexBRight_X_Sav02;
        public float IndexBRight_Y_Sav02;
        public float IndexBRight_Z_Sav02;
        public float IndexBRight_W_Sav02;
        public float PinkyBLeft_X_Sav02;
        public float PinkyBLeft_Y_Sav02;
        public float PinkyBLeft_Z_Sav02;
        public float PinkyBLeft_W_Sav02;
        public float PinkyBRight_X_Sav02;
        public float PinkyBRight_Y_Sav02;
        public float PinkyBRight_Z_Sav02;
        public float PinkyBRight_W_Sav02;
        public float RingBLeft_X_Sav02;
        public float RingBLeft_Y_Sav02;
        public float RingBLeft_Z_Sav02;
        public float RingBLeft_W_Sav02;
        public float RingBRight_X_Sav02;
        public float RingBRight_Y_Sav02;
        public float RingBRight_Z_Sav02;
        public float RingBRight_W_Sav02;
        public float MiddleBLeft_X_Sav02;
        public float MiddleBLeft_Y_Sav02;
        public float MiddleBLeft_Z_Sav02;
        public float MiddleBLeft_W_Sav02;
        public float MiddleBRight_X_Sav02;
        public float MiddleBRight_Y_Sav02;
        public float MiddleBRight_Z_Sav02;
        public float MiddleBRight_W_Sav02;
        public float ThumbBLeft_X_Sav02;
        public float ThumbBLeft_Y_Sav02;
        public float ThumbBLeft_Z_Sav02;
        public float ThumbBLeft_W_Sav02;
        public float ThumbBRight_X_Sav02;
        public float ThumbBRight_Y_Sav02;
        public float ThumbBRight_Z_Sav02;
        public float ThumbBRight_W_Sav02;
        public float TailA_X_Sav02;
        public float TailA_Y_Sav02;
        public float TailA_Z_Sav02;
        public float TailA_W_Sav02;
        public float TailB_X_Sav02;
        public float TailB_Y_Sav02;
        public float TailB_Z_Sav02;
        public float TailB_W_Sav02;
        public float TailC_X_Sav02;
        public float TailC_Y_Sav02;
        public float TailC_Z_Sav02;
        public float TailC_W_Sav02;
        public float TailD_X_Sav02;
        public float TailD_Y_Sav02;
        public float TailD_Z_Sav02;
        public float TailD_W_Sav02;
        public float TailE_X_Sav02;
        public float TailE_Y_Sav02;
        public float TailE_Z_Sav02;
        public float TailE_W_Sav02;
        public float RootHead_X_Sav02;
        public float RootHead_Y_Sav02;
        public float RootHead_Z_Sav02;
        public float RootHead_W_Sav02;
        public float Jaw_X_Sav02;
        public float Jaw_Y_Sav02;
        public float Jaw_Z_Sav02;
        public float Jaw_W_Sav02;
        public float EyelidLowerLeft_X_Sav02;
        public float EyelidLowerLeft_Y_Sav02;
        public float EyelidLowerLeft_Z_Sav02;
        public float EyelidLowerLeft_W_Sav02;
        public float EyelidLowerRight_X_Sav02;
        public float EyelidLowerRight_Y_Sav02;
        public float EyelidLowerRight_Z_Sav02;
        public float EyelidLowerRight_W_Sav02;
        public float EyeLeft_X_Sav02;
        public float EyeLeft_Y_Sav02;
        public float EyeLeft_Z_Sav02;
        public float EyeLeft_W_Sav02;
        public float EyeRight_X_Sav02;
        public float EyeRight_Y_Sav02;
        public float EyeRight_Z_Sav02;
        public float EyeRight_W_Sav02;
        public float Nose_X_Sav02;
        public float Nose_Y_Sav02;
        public float Nose_Z_Sav02;
        public float Nose_W_Sav02;
        public float CheekLeft_X_Sav02;
        public float CheekLeft_Y_Sav02;
        public float CheekLeft_Z_Sav02;
        public float CheekLeft_W_Sav02;
        public float HrothWhiskersLeft_X_Sav02;
        public float HrothWhiskersLeft_Y_Sav02;
        public float HrothWhiskersLeft_Z_Sav02;
        public float HrothWhiskersLeft_W_Sav02;
        public float CheekRight_X_Sav02;
        public float CheekRight_Y_Sav02;
        public float CheekRight_Z_Sav02;
        public float CheekRight_W_Sav02;
        public float HrothWhiskersRight_X_Sav02;
        public float HrothWhiskersRight_Y_Sav02;
        public float HrothWhiskersRight_Z_Sav02;
        public float HrothWhiskersRight_W_Sav02;
        public float LipsLeft_X_Sav02;
        public float LipsLeft_Y_Sav02;
        public float LipsLeft_Z_Sav02;
        public float LipsLeft_W_Sav02;
        public float HrothEyebrowLeft_X_Sav02;
        public float HrothEyebrowLeft_Y_Sav02;
        public float HrothEyebrowLeft_Z_Sav02;
        public float HrothEyebrowLeft_W_Sav02;
        public float LipsRight_X_Sav02;
        public float LipsRight_Y_Sav02;
        public float LipsRight_Z_Sav02;
        public float LipsRight_W_Sav02;
        public float HrothEyebrowRight_X_Sav02;
        public float HrothEyebrowRight_Y_Sav02;
        public float HrothEyebrowRight_Z_Sav02;
        public float HrothEyebrowRight_W_Sav02;
        public float EyebrowLeft_X_Sav02;
        public float EyebrowLeft_Y_Sav02;
        public float EyebrowLeft_Z_Sav02;
        public float EyebrowLeft_W_Sav02;
        public float HrothBridge_X_Sav02;
        public float HrothBridge_Y_Sav02;
        public float HrothBridge_Z_Sav02;
        public float HrothBridge_W_Sav02;
        public float EyebrowRight_X_Sav02;
        public float EyebrowRight_Y_Sav02;
        public float EyebrowRight_Z_Sav02;
        public float EyebrowRight_W_Sav02;
        public float HrothBrowLeft_X_Sav02;
        public float HrothBrowLeft_Y_Sav02;
        public float HrothBrowLeft_Z_Sav02;
        public float HrothBrowLeft_W_Sav02;
        public float Bridge_X_Sav02;
        public float Bridge_Y_Sav02;
        public float Bridge_Z_Sav02;
        public float Bridge_W_Sav02;
        public float HrothBrowRight_X_Sav02;
        public float HrothBrowRight_Y_Sav02;
        public float HrothBrowRight_Z_Sav02;
        public float HrothBrowRight_W_Sav02;
        public float BrowLeft_X_Sav02;
        public float BrowLeft_Y_Sav02;
        public float BrowLeft_Z_Sav02;
        public float BrowLeft_W_Sav02;
        public float HrothJawUpper_X_Sav02;
        public float HrothJawUpper_Y_Sav02;
        public float HrothJawUpper_Z_Sav02;
        public float HrothJawUpper_W_Sav02;
        public float BrowRight_X_Sav02;
        public float BrowRight_Y_Sav02;
        public float BrowRight_Z_Sav02;
        public float BrowRight_W_Sav02;
        public float HrothLipUpper_X_Sav02;
        public float HrothLipUpper_Y_Sav02;
        public float HrothLipUpper_Z_Sav02;
        public float HrothLipUpper_W_Sav02;
        public float LipUpperA_X_Sav02;
        public float LipUpperA_Y_Sav02;
        public float LipUpperA_Z_Sav02;
        public float LipUpperA_W_Sav02;
        public float HrothEyelidUpperLeft_X_Sav02;
        public float HrothEyelidUpperLeft_Y_Sav02;
        public float HrothEyelidUpperLeft_Z_Sav02;
        public float HrothEyelidUpperLeft_W_Sav02;
        public float EyelidUpperLeft_X_Sav02;
        public float EyelidUpperLeft_Y_Sav02;
        public float EyelidUpperLeft_Z_Sav02;
        public float EyelidUpperLeft_W_Sav02;
        public float HrothEyelidUpperRight_X_Sav02;
        public float HrothEyelidUpperRight_Y_Sav02;
        public float HrothEyelidUpperRight_Z_Sav02;
        public float HrothEyelidUpperRight_W_Sav02;
        public float EyelidUpperRight_X_Sav02;
        public float EyelidUpperRight_Y_Sav02;
        public float EyelidUpperRight_Z_Sav02;
        public float EyelidUpperRight_W_Sav02;
        public float HrothLipsLeft_X_Sav02;
        public float HrothLipsLeft_Y_Sav02;
        public float HrothLipsLeft_Z_Sav02;
        public float HrothLipsLeft_W_Sav02;
        public float LipLowerA_X_Sav02;
        public float LipLowerA_Y_Sav02;
        public float LipLowerA_Z_Sav02;
        public float LipLowerA_W_Sav02;
        public float HrothLipsRight_X_Sav02;
        public float HrothLipsRight_Y_Sav02;
        public float HrothLipsRight_Z_Sav02;
        public float HrothLipsRight_W_Sav02;
        public float VieraEar01ALeft_X_Sav02;
        public float VieraEar01ALeft_Y_Sav02;
        public float VieraEar01ALeft_Z_Sav02;
        public float VieraEar01ALeft_W_Sav02;
        public float LipUpperB_X_Sav02;
        public float LipUpperB_Y_Sav02;
        public float LipUpperB_Z_Sav02;
        public float LipUpperB_W_Sav02;
        public float HrothLipUpperLeft_X_Sav02;
        public float HrothLipUpperLeft_Y_Sav02;
        public float HrothLipUpperLeft_Z_Sav02;
        public float HrothLipUpperLeft_W_Sav02;
        public float VieraEar01ARight_X_Sav02;
        public float VieraEar01ARight_Y_Sav02;
        public float VieraEar01ARight_Z_Sav02;
        public float VieraEar01ARight_W_Sav02;
        public float LipLowerB_X_Sav02;
        public float LipLowerB_Y_Sav02;
        public float LipLowerB_Z_Sav02;
        public float LipLowerB_W_Sav02;
        public float HrothLipUpperRight_X_Sav02;
        public float HrothLipUpperRight_Y_Sav02;
        public float HrothLipUpperRight_Z_Sav02;
        public float HrothLipUpperRight_W_Sav02;
        public float VieraEar02ALeft_X_Sav02;
        public float VieraEar02ALeft_Y_Sav02;
        public float VieraEar02ALeft_Z_Sav02;
        public float VieraEar02ALeft_W_Sav02;
        public float HrothLipLower_X_Sav02;
        public float HrothLipLower_Y_Sav02;
        public float HrothLipLower_Z_Sav02;
        public float HrothLipLower_W_Sav02;
        public float VieraEar02ARight_X_Sav02;
        public float VieraEar02ARight_Y_Sav02;
        public float VieraEar02ARight_Z_Sav02;
        public float VieraEar02ARight_W_Sav02;
        public float VieraEar03ALeft_X_Sav02;
        public float VieraEar03ALeft_Y_Sav02;
        public float VieraEar03ALeft_Z_Sav02;
        public float VieraEar03ALeft_W_Sav02;
        public float VieraEar03ARight_X_Sav02;
        public float VieraEar03ARight_Y_Sav02;
        public float VieraEar03ARight_Z_Sav02;
        public float VieraEar03ARight_W_Sav02;
        public float VieraEar04ALeft_X_Sav02;
        public float VieraEar04ALeft_Y_Sav02;
        public float VieraEar04ALeft_Z_Sav02;
        public float VieraEar04ALeft_W_Sav02;
        public float VieraEar04ARight_X_Sav02;
        public float VieraEar04ARight_Y_Sav02;
        public float VieraEar04ARight_Z_Sav02;
        public float VieraEar04ARight_W_Sav02;
        public float VieraLipLowerA_X_Sav02;
        public float VieraLipLowerA_Y_Sav02;
        public float VieraLipLowerA_Z_Sav02;
        public float VieraLipLowerA_W_Sav02;
        public float VieraLipUpperB_X_Sav02;
        public float VieraLipUpperB_Y_Sav02;
        public float VieraLipUpperB_Z_Sav02;
        public float VieraLipUpperB_W_Sav02;
        public float VieraEar01BLeft_X_Sav02;
        public float VieraEar01BLeft_Y_Sav02;
        public float VieraEar01BLeft_Z_Sav02;
        public float VieraEar01BLeft_W_Sav02;
        public float VieraEar01BRight_X_Sav02;
        public float VieraEar01BRight_Y_Sav02;
        public float VieraEar01BRight_Z_Sav02;
        public float VieraEar01BRight_W_Sav02;
        public float VieraEar02BLeft_X_Sav02;
        public float VieraEar02BLeft_Y_Sav02;
        public float VieraEar02BLeft_Z_Sav02;
        public float VieraEar02BLeft_W_Sav02;
        public float VieraEar02BRight_X_Sav02;
        public float VieraEar02BRight_Y_Sav02;
        public float VieraEar02BRight_Z_Sav02;
        public float VieraEar02BRight_W_Sav02;
        public float VieraEar03BLeft_X_Sav02;
        public float VieraEar03BLeft_Y_Sav02;
        public float VieraEar03BLeft_Z_Sav02;
        public float VieraEar03BLeft_W_Sav02;
        public float VieraEar03BRight_X_Sav02;
        public float VieraEar03BRight_Y_Sav02;
        public float VieraEar03BRight_Z_Sav02;
        public float VieraEar03BRight_W_Sav02;
        public float VieraEar04BLeft_X_Sav02;
        public float VieraEar04BLeft_Y_Sav02;
        public float VieraEar04BLeft_Z_Sav02;
        public float VieraEar04BLeft_W_Sav02;
        public float VieraEar04BRight_X_Sav02;
        public float VieraEar04BRight_Y_Sav02;
        public float VieraEar04BRight_Z_Sav02;
        public float VieraEar04BRight_W_Sav02;
        public float VieraLipLowerB_X_Sav02;
        public float VieraLipLowerB_Y_Sav02;
        public float VieraLipLowerB_Z_Sav02;
        public float VieraLipLowerB_W_Sav02;
        public float ExRootHair_X_Sav02;
        public float ExRootHair_Y_Sav02;
        public float ExRootHair_Z_Sav02;
        public float ExRootHair_W_Sav02;
        public float ExHairA_X_Sav02;
        public float ExHairA_Y_Sav02;
        public float ExHairA_Z_Sav02;
        public float ExHairA_W_Sav02;
        public float ExHairB_X_Sav02;
        public float ExHairB_Y_Sav02;
        public float ExHairB_Z_Sav02;
        public float ExHairB_W_Sav02;
        public float ExHairC_X_Sav02;
        public float ExHairC_Y_Sav02;
        public float ExHairC_Z_Sav02;
        public float ExHairC_W_Sav02;
        public float ExHairD_X_Sav02;
        public float ExHairD_Y_Sav02;
        public float ExHairD_Z_Sav02;
        public float ExHairD_W_Sav02;
        public float ExHairE_X_Sav02;
        public float ExHairE_Y_Sav02;
        public float ExHairE_Z_Sav02;
        public float ExHairE_W_Sav02;
        public float ExHairF_X_Sav02;
        public float ExHairF_Y_Sav02;
        public float ExHairF_Z_Sav02;
        public float ExHairF_W_Sav02;
        public float ExHairG_X_Sav02;
        public float ExHairG_Y_Sav02;
        public float ExHairG_Z_Sav02;
        public float ExHairG_W_Sav02;
        public float ExHairH_X_Sav02;
        public float ExHairH_Y_Sav02;
        public float ExHairH_Z_Sav02;
        public float ExHairH_W_Sav02;
        public float ExHairI_X_Sav02;
        public float ExHairI_Y_Sav02;
        public float ExHairI_Z_Sav02;
        public float ExHairI_W_Sav02;
        public float ExHairJ_X_Sav02;
        public float ExHairJ_Y_Sav02;
        public float ExHairJ_Z_Sav02;
        public float ExHairJ_W_Sav02;
        public float ExHairK_X_Sav02;
        public float ExHairK_Y_Sav02;
        public float ExHairK_Z_Sav02;
        public float ExHairK_W_Sav02;
        public float ExHairL_X_Sav02;
        public float ExHairL_Y_Sav02;
        public float ExHairL_Z_Sav02;
        public float ExHairL_W_Sav02;
        public float ExRootMet_X_Sav02;
        public float ExRootMet_Y_Sav02;
        public float ExRootMet_Z_Sav02;
        public float ExRootMet_W_Sav02;
        public float ExMetA_X_Sav02;
        public float ExMetA_Y_Sav02;
        public float ExMetA_Z_Sav02;
        public float ExMetA_W_Sav02;
        public float ExMetB_X_Sav02;
        public float ExMetB_Y_Sav02;
        public float ExMetB_Z_Sav02;
        public float ExMetB_W_Sav02;
        public float ExMetC_X_Sav02;
        public float ExMetC_Y_Sav02;
        public float ExMetC_Z_Sav02;
        public float ExMetC_W_Sav02;
        public float ExMetD_X_Sav02;
        public float ExMetD_Y_Sav02;
        public float ExMetD_Z_Sav02;
        public float ExMetD_W_Sav02;
        public float ExMetE_X_Sav02;
        public float ExMetE_Y_Sav02;
        public float ExMetE_Z_Sav02;
        public float ExMetE_W_Sav02;
        public float ExMetF_X_Sav02;
        public float ExMetF_Y_Sav02;
        public float ExMetF_Z_Sav02;
        public float ExMetF_W_Sav02;
        public float ExMetG_X_Sav02;
        public float ExMetG_Y_Sav02;
        public float ExMetG_Z_Sav02;
        public float ExMetG_W_Sav02;
        public float ExMetH_X_Sav02;
        public float ExMetH_Y_Sav02;
        public float ExMetH_Z_Sav02;
        public float ExMetH_W_Sav02;
        public float ExMetI_X_Sav02;
        public float ExMetI_Y_Sav02;
        public float ExMetI_Z_Sav02;
        public float ExMetI_W_Sav02;
        public float ExMetJ_X_Sav02;
        public float ExMetJ_Y_Sav02;
        public float ExMetJ_Z_Sav02;
        public float ExMetJ_W_Sav02;
        public float ExMetK_X_Sav02;
        public float ExMetK_Y_Sav02;
        public float ExMetK_Z_Sav02;
        public float ExMetK_W_Sav02;
        public float ExMetL_X_Sav02;
        public float ExMetL_Y_Sav02;
        public float ExMetL_Z_Sav02;
        public float ExMetL_W_Sav02;
        public float ExMetM_X_Sav02;
        public float ExMetM_Y_Sav02;
        public float ExMetM_Z_Sav02;
        public float ExMetM_W_Sav02;
        public float ExMetN_X_Sav02;
        public float ExMetN_Y_Sav02;
        public float ExMetN_Z_Sav02;
        public float ExMetN_W_Sav02;
        public float ExMetO_X_Sav02;
        public float ExMetO_Y_Sav02;
        public float ExMetO_Z_Sav02;
        public float ExMetO_W_Sav02;
        public float ExMetP_X_Sav02;
        public float ExMetP_Y_Sav02;
        public float ExMetP_Z_Sav02;
        public float ExMetP_W_Sav02;
        public float ExMetQ_X_Sav02;
        public float ExMetQ_Y_Sav02;
        public float ExMetQ_Z_Sav02;
        public float ExMetQ_W_Sav02;
        public float ExMetR_X_Sav02;
        public float ExMetR_Y_Sav02;
        public float ExMetR_Z_Sav02;
        public float ExMetR_W_Sav02;
        public float ExRootTop_X_Sav02;
        public float ExRootTop_Y_Sav02;
        public float ExRootTop_Z_Sav02;
        public float ExRootTop_W_Sav02;
        public float ExTopA_X_Sav02;
        public float ExTopA_Y_Sav02;
        public float ExTopA_Z_Sav02;
        public float ExTopA_W_Sav02;
        public float ExTopB_X_Sav02;
        public float ExTopB_Y_Sav02;
        public float ExTopB_Z_Sav02;
        public float ExTopB_W_Sav02;
        public float ExTopC_X_Sav02;
        public float ExTopC_Y_Sav02;
        public float ExTopC_Z_Sav02;
        public float ExTopC_W_Sav02;
        public float ExTopD_X_Sav02;
        public float ExTopD_Y_Sav02;
        public float ExTopD_Z_Sav02;
        public float ExTopD_W_Sav02;
        public float ExTopE_X_Sav02;
        public float ExTopE_Y_Sav02;
        public float ExTopE_Z_Sav02;
        public float ExTopE_W_Sav02;
        public float ExTopF_X_Sav02;
        public float ExTopF_Y_Sav02;
        public float ExTopF_Z_Sav02;
        public float ExTopF_W_Sav02;
        public float ExTopG_X_Sav02;
        public float ExTopG_Y_Sav02;
        public float ExTopG_Z_Sav02;
        public float ExTopG_W_Sav02;
        public float ExTopH_X_Sav02;
        public float ExTopH_Y_Sav02;
        public float ExTopH_Z_Sav02;
        public float ExTopH_W_Sav02;
        public float ExTopI_X_Sav02;
        public float ExTopI_Y_Sav02;
        public float ExTopI_Z_Sav02;
        public float ExTopI_W_Sav02;
        #endregion
        #region Bools
        public bool HeadSaved01;
        public bool HairSaved01;
        public bool EarringsSaved01;
        public bool BodySaved01;
        public bool LeftArmSaved01;
        public bool RightArmSaved01;
        public bool ClothesSaved01;
        public bool WeaponsSaved01;
        public bool LeftHandSaved01;
        public bool RightHandSaved01;
        public bool WaistSaved01;
        public bool LeftLegSaved01;
        public bool RightLegSaved01;
        public bool HelmSaved01;
        public bool TopSaved01;

        public bool HeadSaved02;
        public bool HairSaved02;
        public bool EarringsSaved02;
        public bool BodySaved02;
        public bool LeftArmSaved02;
        public bool RightArmSaved02;
        public bool ClothesSaved02;
        public bool WeaponsSaved02;
        public bool LeftHandSaved02;
        public bool RightHandSaved02;
        public bool WaistSaved02;
        public bool LeftLegSaved02;
        public bool RightLegSaved02;
        public bool HelmSaved02;
        public bool TopSaved02;

        public bool HeadAdvLoad;
        public bool HairAdvLoad;
        public bool EarringsAdvLoad;
        public bool BodyAdvLoad;
        public bool LeftArmAdvLoad;
        public bool RightArmAdvLoad;
        public bool ClothesAdvLoad;
        public bool WeaponsAdvLoad;
        public bool LeftHandAdvLoad;
        public bool RightHandAdvLoad;
        public bool WaistAdvLoad;
        public bool LeftLegAdvLoad;
        public bool RightLegAdvLoad;
        public bool HelmAdvLoad;
        public bool TopAdvLoad;
        #endregion

        public CharacterDetails CharacterDetails { get => (CharacterDetails)BaseViewModel.model; set => BaseViewModel.model = value; }
        private string GAS(params string[] args) => MemoryManager.GetAddressString(args);
        private readonly Mem m = MemoryManager.Instance.MemLib;
        private CharacterOffsets c = Settings.Instance.Character;

        public CharacterDetailsView5()
        {
            InitializeComponent();
            MainViewModel.ViewTime5 = this;
        }

        private Vector3D GetEulerAngles() => new Vector3D(CharacterDetails.BoneX, CharacterDetails.BoneY, CharacterDetails.BoneZ);

        #region Slider
        private void BoneSliders_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Root_Slider;
                    BoneSlider.ValueChanged += Root_Slider;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Abdomen_Slider;
                    BoneSlider.ValueChanged += Abdomen_Slider;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Throw_Slider;
                    BoneSlider.ValueChanged += Throw_Slider;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Waist_Slider;
                    BoneSlider.ValueChanged += Waist_Slider;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SpineA_Slider;
                    BoneSlider.ValueChanged += SpineA_Slider;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LegLeft_Slider;
                    BoneSlider.ValueChanged += LegLeft_Slider;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LegRight_Slider;
                    BoneSlider.ValueChanged += LegRight_Slider;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HolsterLeft_Slider;
                    BoneSlider.ValueChanged += HolsterLeft_Slider;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HolsterRight_Slider;
                    BoneSlider.ValueChanged += HolsterRight_Slider;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SheatheLeft_Slider;
                    BoneSlider.ValueChanged += SheatheLeft_Slider;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SheatheRight_Slider;
                    BoneSlider.ValueChanged += SheatheRight_Slider;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SpineB_Slider;
                    BoneSlider.ValueChanged += SpineB_Slider;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackALeft_Slider;
                    BoneSlider.ValueChanged += ClothBackALeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackARight_Slider;
                    BoneSlider.ValueChanged += ClothBackARight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontALeft_Slider;
                    BoneSlider.ValueChanged += ClothFrontALeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontARight_Slider;
                    BoneSlider.ValueChanged += ClothFrontARight_Slider;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideALeft_Slider;
                    BoneSlider.ValueChanged += ClothSideALeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideARight_Slider;
                    BoneSlider.ValueChanged += ClothSideARight_Slider;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= KneeLeft_Slider;
                    BoneSlider.ValueChanged += KneeLeft_Slider;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= KneeRight_Slider;
                    BoneSlider.ValueChanged += KneeRight_Slider;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= BreastLeft_Slider;
                    BoneSlider.ValueChanged += BreastLeft_Slider;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= BreastRight_Slider;
                    BoneSlider.ValueChanged += BreastRight_Slider;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SpineC_Slider;
                    BoneSlider.ValueChanged += SpineC_Slider;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackBLeft_Slider;
                    BoneSlider.ValueChanged += ClothBackBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackBRight_Slider;
                    BoneSlider.ValueChanged += ClothBackBRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontBLeft_Slider;
                    BoneSlider.ValueChanged += ClothFrontBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontBRight_Slider;
                    BoneSlider.ValueChanged += ClothFrontBRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideBLeft_Slider;
                    BoneSlider.ValueChanged += ClothSideBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideBRight_Slider;
                    BoneSlider.ValueChanged += ClothSideBRight_Slider;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CalfLeft_Slider;
                    BoneSlider.ValueChanged += CalfLeft_Slider;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CalfRight_Slider;
                    BoneSlider.ValueChanged += CalfRight_Slider;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ScabbardLeft_Slider;
                    BoneSlider.ValueChanged += ScabbardLeft_Slider;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ScabbardRight_Slider;
                    BoneSlider.ValueChanged += ScabbardRight_Slider;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Neck_Slider;
                    BoneSlider.ValueChanged += Neck_Slider;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClavicleLeft_Slider;
                    BoneSlider.ValueChanged += ClavicleLeft_Slider;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClavicleRight_Slider;
                    BoneSlider.ValueChanged += ClavicleRight_Slider;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackCLeft_Slider;
                    BoneSlider.ValueChanged += ClothBackCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackCRight_Slider;
                    BoneSlider.ValueChanged += ClothBackCRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontCLeft_Slider;
                    BoneSlider.ValueChanged += ClothFrontCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontCRight_Slider;
                    BoneSlider.ValueChanged += ClothFrontCRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideCLeft_Slider;
                    BoneSlider.ValueChanged += ClothSideCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideCRight_Slider;
                    BoneSlider.ValueChanged += ClothSideCRight_Slider;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PoleynLeft_Slider;
                    BoneSlider.ValueChanged += PoleynLeft_Slider;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PoleynRight_Slider;
                    BoneSlider.ValueChanged += PoleynRight_Slider;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= FootLeft_Slider;
                    BoneSlider.ValueChanged += FootLeft_Slider;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= FootRight_Slider;
                    BoneSlider.ValueChanged += FootRight_Slider;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Head_Slider;
                    BoneSlider.ValueChanged += Head_Slider;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ArmLeft_Slider;
                    BoneSlider.ValueChanged += ArmLeft_Slider;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ArmRight_Slider;
                    BoneSlider.ValueChanged += ArmRight_Slider;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PauldronLeft_Slider;
                    BoneSlider.ValueChanged += PauldronLeft_Slider;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PauldronRight_Slider;
                    BoneSlider.ValueChanged += PauldronRight_Slider;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Unknown00_Slider;
                    BoneSlider.ValueChanged += Unknown00_Slider;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ToesLeft_Slider;
                    BoneSlider.ValueChanged += ToesLeft_Slider;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ToesRight_Slider;
                    BoneSlider.ValueChanged += ToesRight_Slider;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HairA_Slider;
                    BoneSlider.ValueChanged += HairA_Slider;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HairFrontLeft_Slider;
                    BoneSlider.ValueChanged += HairFrontLeft_Slider;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HairFrontRight_Slider;
                    BoneSlider.ValueChanged += HairFrontRight_Slider;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarLeft_Slider;
                    BoneSlider.ValueChanged += EarLeft_Slider;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarRight_Slider;
                    BoneSlider.ValueChanged += EarRight_Slider;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ForearmLeft_Slider;
                    BoneSlider.ValueChanged += ForearmLeft_Slider;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ForearmRight_Slider;
                    BoneSlider.ValueChanged += ForearmRight_Slider;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ShoulderLeft_Slider;
                    BoneSlider.ValueChanged += ShoulderLeft_Slider;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ShoulderRight_Slider;
                    BoneSlider.ValueChanged += ShoulderRight_Slider;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HairB_Slider;
                    BoneSlider.ValueChanged += HairB_Slider;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HandLeft_Slider;
                    BoneSlider.ValueChanged += HandLeft_Slider;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HandRight_Slider;
                    BoneSlider.ValueChanged += HandRight_Slider;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ShieldLeft_Slider;
                    BoneSlider.ValueChanged += ShieldLeft_Slider;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ShieldRight_Slider;
                    BoneSlider.ValueChanged += ShieldRight_Slider;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarringALeft_Slider;
                    BoneSlider.ValueChanged += EarringALeft_Slider;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarringARight_Slider;
                    BoneSlider.ValueChanged += EarringARight_Slider;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ElbowLeft_Slider;
                    BoneSlider.ValueChanged += ElbowLeft_Slider;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ElbowRight_Slider;
                    BoneSlider.ValueChanged += ElbowRight_Slider;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CouterLeft_Slider;
                    BoneSlider.ValueChanged += CouterLeft_Slider;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CouterRight_Slider;
                    BoneSlider.ValueChanged += CouterRight_Slider;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= WristLeft_Slider;
                    BoneSlider.ValueChanged += WristLeft_Slider;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= WristRight_Slider;
                    BoneSlider.ValueChanged += WristRight_Slider;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= IndexALeft_Slider;
                    BoneSlider.ValueChanged += IndexALeft_Slider;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= IndexARight_Slider;
                    BoneSlider.ValueChanged += IndexARight_Slider;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PinkyALeft_Slider;
                    BoneSlider.ValueChanged += PinkyALeft_Slider;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PinkyARight_Slider;
                    BoneSlider.ValueChanged += PinkyARight_Slider;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RingALeft_Slider;
                    BoneSlider.ValueChanged += RingALeft_Slider;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RingARight_Slider;
                    BoneSlider.ValueChanged += RingARight_Slider;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= MiddleALeft_Slider;
                    BoneSlider.ValueChanged += MiddleALeft_Slider;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= MiddleARight_Slider;
                    BoneSlider.ValueChanged += MiddleARight_Slider;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ThumbALeft_Slider;
                    BoneSlider.ValueChanged += ThumbALeft_Slider;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ThumbARight_Slider;
                    BoneSlider.ValueChanged += ThumbARight_Slider;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= WeaponLeft_Slider;
                    BoneSlider.ValueChanged += WeaponLeft_Slider;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= WeaponRight_Slider;
                    BoneSlider.ValueChanged += WeaponRight_Slider;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarringBLeft_Slider;
                    BoneSlider.ValueChanged += EarringBLeft_Slider;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarringBRight_Slider;
                    BoneSlider.ValueChanged += EarringBRight_Slider;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= IndexBLeft_Slider;
                    BoneSlider.ValueChanged += IndexBLeft_Slider;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= IndexBRight_Slider;
                    BoneSlider.ValueChanged += IndexBRight_Slider;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PinkyBLeft_Slider;
                    BoneSlider.ValueChanged += PinkyBLeft_Slider;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PinkyBRight_Slider;
                    BoneSlider.ValueChanged += PinkyBRight_Slider;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RingBLeft_Slider;
                    BoneSlider.ValueChanged += RingBLeft_Slider;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RingBRight_Slider;
                    BoneSlider.ValueChanged += RingBRight_Slider;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= MiddleBLeft_Slider;
                    BoneSlider.ValueChanged += MiddleBLeft_Slider;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= MiddleBRight_Slider;
                    BoneSlider.ValueChanged += MiddleBRight_Slider;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ThumbBLeft_Slider;
                    BoneSlider.ValueChanged += ThumbBLeft_Slider;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ThumbBRight_Slider;
                    BoneSlider.ValueChanged += ThumbBRight_Slider;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailA_Slider;
                    BoneSlider.ValueChanged += TailA_Slider;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailB_Slider;
                    BoneSlider.ValueChanged += TailB_Slider;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailC_Slider;
                    BoneSlider.ValueChanged += TailC_Slider;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailD_Slider;
                    BoneSlider.ValueChanged += TailD_Slider;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailE_Slider;
                    BoneSlider.ValueChanged += TailE_Slider;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RootHead_Slider;
                    BoneSlider.ValueChanged += RootHead_Slider;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Jaw_Slider;
                    BoneSlider.ValueChanged += Jaw_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyelidLowerLeft_Slider;
                    BoneSlider.ValueChanged += EyelidLowerLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyelidLowerRight_Slider;
                    BoneSlider.ValueChanged += EyelidLowerRight_Slider;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyeLeft_Slider;
                    BoneSlider.ValueChanged += EyeLeft_Slider;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyeRight_Slider;
                    BoneSlider.ValueChanged += EyeRight_Slider;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Nose_Slider;
                    BoneSlider.ValueChanged += Nose_Slider;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CheekLeft_Slider;
                    BoneSlider.ValueChanged += CheekLeft_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothWhiskersLeft_Slider;
                    BoneSlider.ValueChanged += HrothWhiskersLeft_Slider;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CheekRight_Slider;
                    BoneSlider.ValueChanged += CheekRight_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothWhiskersRight_Slider;
                    BoneSlider.ValueChanged += HrothWhiskersRight_Slider;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipsLeft_Slider;
                    BoneSlider.ValueChanged += LipsLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothEyebrowLeft_Slider;
                    BoneSlider.ValueChanged += HrothEyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipsRight_Slider;
                    BoneSlider.ValueChanged += LipsRight_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothEyebrowRight_Slider;
                    BoneSlider.ValueChanged += HrothEyebrowRight_Slider;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyebrowLeft_Slider;
                    BoneSlider.ValueChanged += EyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothBridge_Slider;
                    BoneSlider.ValueChanged += HrothBridge_Slider;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyebrowRight_Slider;
                    BoneSlider.ValueChanged += EyebrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothBrowLeft_Slider;
                    BoneSlider.ValueChanged += HrothBrowLeft_Slider;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Bridge_Slider;
                    BoneSlider.ValueChanged += Bridge_Slider;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothBrowRight_Slider;
                    BoneSlider.ValueChanged += HrothBrowRight_Slider;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= BrowLeft_Slider;
                    BoneSlider.ValueChanged += BrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothJawUpper_Slider;
                    BoneSlider.ValueChanged += HrothJawUpper_Slider;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= BrowRight_Slider;
                    BoneSlider.ValueChanged += BrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipUpper_Slider;
                    BoneSlider.ValueChanged += HrothLipUpper_Slider;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipUpperA_Slider;
                    BoneSlider.ValueChanged += LipUpperA_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothEyelidUpperLeft_Slider;
                    BoneSlider.ValueChanged += HrothEyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyelidUpperLeft_Slider;
                    BoneSlider.ValueChanged += EyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothEyelidUpperRight_Slider;
                    BoneSlider.ValueChanged += HrothEyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyelidUpperRight_Slider;
                    BoneSlider.ValueChanged += EyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipsLeft_Slider;
                    BoneSlider.ValueChanged += HrothLipsLeft_Slider;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipLowerA_Slider;
                    BoneSlider.ValueChanged += LipLowerA_Slider;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipsRight_Slider;
                    BoneSlider.ValueChanged += HrothLipsRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar01ALeft_Slider;
                    BoneSlider.ValueChanged += VieraEar01ALeft_Slider;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipUpperB_Slider;
                    BoneSlider.ValueChanged += LipUpperB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipUpperLeft_Slider;
                    BoneSlider.ValueChanged += HrothLipUpperLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar01ARight_Slider;
                    BoneSlider.ValueChanged += VieraEar01ARight_Slider;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipLowerB_Slider;
                    BoneSlider.ValueChanged += LipLowerB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipUpperRight_Slider;
                    BoneSlider.ValueChanged += HrothLipUpperRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar02ALeft_Slider;
                    BoneSlider.ValueChanged += VieraEar02ALeft_Slider;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipLower_Slider;
                    BoneSlider.ValueChanged += HrothLipLower_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar02ARight_Slider;
                    BoneSlider.ValueChanged += VieraEar02ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar03ALeft_Slider;
                    BoneSlider.ValueChanged += VieraEar03ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar03ARight_Slider;
                    BoneSlider.ValueChanged += VieraEar03ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar04ALeft_Slider;
                    BoneSlider.ValueChanged += VieraEar04ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar04ARight_Slider;
                    BoneSlider.ValueChanged += VieraEar04ARight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraLipLowerA_Slider;
                    BoneSlider.ValueChanged += VieraLipLowerA_Slider;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraLipUpperB_Slider;
                    BoneSlider.ValueChanged += VieraLipUpperB_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar01BLeft_Slider;
                    BoneSlider.ValueChanged += VieraEar01BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar01BRight_Slider;
                    BoneSlider.ValueChanged += VieraEar01BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar02BLeft_Slider;
                    BoneSlider.ValueChanged += VieraEar02BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar02BRight_Slider;
                    BoneSlider.ValueChanged += VieraEar02BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar03BLeft_Slider;
                    BoneSlider.ValueChanged += VieraEar03BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar03BRight_Slider;
                    BoneSlider.ValueChanged += VieraEar03BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar04BLeft_Slider;
                    BoneSlider.ValueChanged += VieraEar04BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar04BRight_Slider;
                    BoneSlider.ValueChanged += VieraEar04BRight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraLipLowerB_Slider;
                    BoneSlider.ValueChanged += VieraLipLowerB_Slider;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairA_Slider;
                    BoneSlider.ValueChanged += ExHairA_Slider;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairB_Slider;
                    BoneSlider.ValueChanged += ExHairB_Slider;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairC_Slider;
                    BoneSlider.ValueChanged += ExHairC_Slider;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairD_Slider;
                    BoneSlider.ValueChanged += ExHairD_Slider;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairE_Slider;
                    BoneSlider.ValueChanged += ExHairE_Slider;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairF_Slider;
                    BoneSlider.ValueChanged += ExHairF_Slider;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairG_Slider;
                    BoneSlider.ValueChanged += ExHairG_Slider;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairH_Slider;
                    BoneSlider.ValueChanged += ExHairH_Slider;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairI_Slider;
                    BoneSlider.ValueChanged += ExHairI_Slider;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairJ_Slider;
                    BoneSlider.ValueChanged += ExHairJ_Slider;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairK_Slider;
                    BoneSlider.ValueChanged += ExHairK_Slider;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairL_Slider;
                    BoneSlider.ValueChanged += ExHairL_Slider;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetA_Slider;
                    BoneSlider.ValueChanged += ExMetA_Slider;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetB_Slider;
                    BoneSlider.ValueChanged += ExMetB_Slider;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetC_Slider;
                    BoneSlider.ValueChanged += ExMetC_Slider;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetD_Slider;
                    BoneSlider.ValueChanged += ExMetD_Slider;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetE_Slider;
                    BoneSlider.ValueChanged += ExMetE_Slider;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetF_Slider;
                    BoneSlider.ValueChanged += ExMetF_Slider;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetG_Slider;
                    BoneSlider.ValueChanged += ExMetG_Slider;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetH_Slider;
                    BoneSlider.ValueChanged += ExMetH_Slider;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetI_Slider;
                    BoneSlider.ValueChanged += ExMetI_Slider;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetJ_Slider;
                    BoneSlider.ValueChanged += ExMetJ_Slider;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetK_Slider;
                    BoneSlider.ValueChanged += ExMetK_Slider;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetL_Slider;
                    BoneSlider.ValueChanged += ExMetL_Slider;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetM_Slider;
                    BoneSlider.ValueChanged += ExMetM_Slider;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetN_Slider;
                    BoneSlider.ValueChanged += ExMetN_Slider;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetO_Slider;
                    BoneSlider.ValueChanged += ExMetO_Slider;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetP_Slider;
                    BoneSlider.ValueChanged += ExMetP_Slider;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetQ_Slider;
                    BoneSlider.ValueChanged += ExMetQ_Slider;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetR_Slider;
                    BoneSlider.ValueChanged += ExMetR_Slider;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopA_Slider;
                    BoneSlider.ValueChanged += ExTopA_Slider;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopB_Slider;
                    BoneSlider.ValueChanged += ExTopB_Slider;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopC_Slider;
                    BoneSlider.ValueChanged += ExTopC_Slider;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopD_Slider;
                    BoneSlider.ValueChanged += ExTopD_Slider;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopE_Slider;
                    BoneSlider.ValueChanged += ExTopE_Slider;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopF_Slider;
                    BoneSlider.ValueChanged += ExTopF_Slider;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopG_Slider;
                    BoneSlider.ValueChanged += ExTopG_Slider;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopH_Slider;
                    BoneSlider.ValueChanged += ExTopH_Slider;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopI_Slider;
                    BoneSlider.ValueChanged += ExTopI_Slider;
                }
            }
        }
        private void BoneSliders2_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Root_Slider;
                    BoneSlider2.ValueChanged += Root_Slider;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Abdomen_Slider;
                    BoneSlider2.ValueChanged += Abdomen_Slider;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Throw_Slider;
                    BoneSlider2.ValueChanged += Throw_Slider;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Waist_Slider;
                    BoneSlider2.ValueChanged += Waist_Slider;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SpineA_Slider;
                    BoneSlider2.ValueChanged += SpineA_Slider;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LegLeft_Slider;
                    BoneSlider2.ValueChanged += LegLeft_Slider;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LegRight_Slider;
                    BoneSlider2.ValueChanged += LegRight_Slider;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HolsterLeft_Slider;
                    BoneSlider2.ValueChanged += HolsterLeft_Slider;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HolsterRight_Slider;
                    BoneSlider2.ValueChanged += HolsterRight_Slider;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SheatheLeft_Slider;
                    BoneSlider2.ValueChanged += SheatheLeft_Slider;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SheatheRight_Slider;
                    BoneSlider2.ValueChanged += SheatheRight_Slider;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SpineB_Slider;
                    BoneSlider2.ValueChanged += SpineB_Slider;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackALeft_Slider;
                    BoneSlider2.ValueChanged += ClothBackALeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackARight_Slider;
                    BoneSlider2.ValueChanged += ClothBackARight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontALeft_Slider;
                    BoneSlider2.ValueChanged += ClothFrontALeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontARight_Slider;
                    BoneSlider2.ValueChanged += ClothFrontARight_Slider;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideALeft_Slider;
                    BoneSlider2.ValueChanged += ClothSideALeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideARight_Slider;
                    BoneSlider2.ValueChanged += ClothSideARight_Slider;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= KneeLeft_Slider;
                    BoneSlider2.ValueChanged += KneeLeft_Slider;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= KneeRight_Slider;
                    BoneSlider2.ValueChanged += KneeRight_Slider;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= BreastLeft_Slider;
                    BoneSlider2.ValueChanged += BreastLeft_Slider;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= BreastRight_Slider;
                    BoneSlider2.ValueChanged += BreastRight_Slider;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SpineC_Slider;
                    BoneSlider2.ValueChanged += SpineC_Slider;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackBLeft_Slider;
                    BoneSlider2.ValueChanged += ClothBackBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackBRight_Slider;
                    BoneSlider2.ValueChanged += ClothBackBRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontBLeft_Slider;
                    BoneSlider2.ValueChanged += ClothFrontBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontBRight_Slider;
                    BoneSlider2.ValueChanged += ClothFrontBRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideBLeft_Slider;
                    BoneSlider2.ValueChanged += ClothSideBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideBRight_Slider;
                    BoneSlider2.ValueChanged += ClothSideBRight_Slider;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CalfLeft_Slider;
                    BoneSlider2.ValueChanged += CalfLeft_Slider;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CalfRight_Slider;
                    BoneSlider2.ValueChanged += CalfRight_Slider;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ScabbardLeft_Slider;
                    BoneSlider2.ValueChanged += ScabbardLeft_Slider;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ScabbardRight_Slider;
                    BoneSlider2.ValueChanged += ScabbardRight_Slider;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Neck_Slider;
                    BoneSlider2.ValueChanged += Neck_Slider;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClavicleLeft_Slider;
                    BoneSlider2.ValueChanged += ClavicleLeft_Slider;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClavicleRight_Slider;
                    BoneSlider2.ValueChanged += ClavicleRight_Slider;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackCLeft_Slider;
                    BoneSlider2.ValueChanged += ClothBackCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackCRight_Slider;
                    BoneSlider2.ValueChanged += ClothBackCRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontCLeft_Slider;
                    BoneSlider2.ValueChanged += ClothFrontCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontCRight_Slider;
                    BoneSlider2.ValueChanged += ClothFrontCRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideCLeft_Slider;
                    BoneSlider2.ValueChanged += ClothSideCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideCRight_Slider;
                    BoneSlider2.ValueChanged += ClothSideCRight_Slider;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PoleynLeft_Slider;
                    BoneSlider2.ValueChanged += PoleynLeft_Slider;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PoleynRight_Slider;
                    BoneSlider2.ValueChanged += PoleynRight_Slider;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= FootLeft_Slider;
                    BoneSlider2.ValueChanged += FootLeft_Slider;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= FootRight_Slider;
                    BoneSlider2.ValueChanged += FootRight_Slider;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Head_Slider;
                    BoneSlider2.ValueChanged += Head_Slider;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ArmLeft_Slider;
                    BoneSlider2.ValueChanged += ArmLeft_Slider;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ArmRight_Slider;
                    BoneSlider2.ValueChanged += ArmRight_Slider;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PauldronLeft_Slider;
                    BoneSlider2.ValueChanged += PauldronLeft_Slider;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PauldronRight_Slider;
                    BoneSlider2.ValueChanged += PauldronRight_Slider;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Unknown00_Slider;
                    BoneSlider2.ValueChanged += Unknown00_Slider;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ToesLeft_Slider;
                    BoneSlider2.ValueChanged += ToesLeft_Slider;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ToesRight_Slider;
                    BoneSlider2.ValueChanged += ToesRight_Slider;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HairA_Slider;
                    BoneSlider2.ValueChanged += HairA_Slider;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HairFrontLeft_Slider;
                    BoneSlider2.ValueChanged += HairFrontLeft_Slider;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HairFrontRight_Slider;
                    BoneSlider2.ValueChanged += HairFrontRight_Slider;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarLeft_Slider;
                    BoneSlider2.ValueChanged += EarLeft_Slider;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarRight_Slider;
                    BoneSlider2.ValueChanged += EarRight_Slider;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ForearmLeft_Slider;
                    BoneSlider2.ValueChanged += ForearmLeft_Slider;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ForearmRight_Slider;
                    BoneSlider2.ValueChanged += ForearmRight_Slider;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ShoulderLeft_Slider;
                    BoneSlider2.ValueChanged += ShoulderLeft_Slider;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ShoulderRight_Slider;
                    BoneSlider2.ValueChanged += ShoulderRight_Slider;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HairB_Slider;
                    BoneSlider2.ValueChanged += HairB_Slider;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HandLeft_Slider;
                    BoneSlider2.ValueChanged += HandLeft_Slider;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HandRight_Slider;
                    BoneSlider2.ValueChanged += HandRight_Slider;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ShieldLeft_Slider;
                    BoneSlider2.ValueChanged += ShieldLeft_Slider;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ShieldRight_Slider;
                    BoneSlider2.ValueChanged += ShieldRight_Slider;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarringALeft_Slider;
                    BoneSlider2.ValueChanged += EarringALeft_Slider;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarringARight_Slider;
                    BoneSlider2.ValueChanged += EarringARight_Slider;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ElbowLeft_Slider;
                    BoneSlider2.ValueChanged += ElbowLeft_Slider;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ElbowRight_Slider;
                    BoneSlider2.ValueChanged += ElbowRight_Slider;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CouterLeft_Slider;
                    BoneSlider2.ValueChanged += CouterLeft_Slider;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CouterRight_Slider;
                    BoneSlider2.ValueChanged += CouterRight_Slider;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= WristLeft_Slider;
                    BoneSlider2.ValueChanged += WristLeft_Slider;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= WristRight_Slider;
                    BoneSlider2.ValueChanged += WristRight_Slider;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= IndexALeft_Slider;
                    BoneSlider2.ValueChanged += IndexALeft_Slider;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= IndexARight_Slider;
                    BoneSlider2.ValueChanged += IndexARight_Slider;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PinkyALeft_Slider;
                    BoneSlider2.ValueChanged += PinkyALeft_Slider;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PinkyARight_Slider;
                    BoneSlider2.ValueChanged += PinkyARight_Slider;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RingALeft_Slider;
                    BoneSlider2.ValueChanged += RingALeft_Slider;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RingARight_Slider;
                    BoneSlider2.ValueChanged += RingARight_Slider;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= MiddleALeft_Slider;
                    BoneSlider2.ValueChanged += MiddleALeft_Slider;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= MiddleARight_Slider;
                    BoneSlider2.ValueChanged += MiddleARight_Slider;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ThumbALeft_Slider;
                    BoneSlider2.ValueChanged += ThumbALeft_Slider;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ThumbARight_Slider;
                    BoneSlider2.ValueChanged += ThumbARight_Slider;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= WeaponLeft_Slider;
                    BoneSlider2.ValueChanged += WeaponLeft_Slider;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= WeaponRight_Slider;
                    BoneSlider2.ValueChanged += WeaponRight_Slider;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarringBLeft_Slider;
                    BoneSlider2.ValueChanged += EarringBLeft_Slider;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarringBRight_Slider;
                    BoneSlider2.ValueChanged += EarringBRight_Slider;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= IndexBLeft_Slider;
                    BoneSlider2.ValueChanged += IndexBLeft_Slider;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= IndexBRight_Slider;
                    BoneSlider2.ValueChanged += IndexBRight_Slider;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PinkyBLeft_Slider;
                    BoneSlider2.ValueChanged += PinkyBLeft_Slider;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PinkyBRight_Slider;
                    BoneSlider2.ValueChanged += PinkyBRight_Slider;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RingBLeft_Slider;
                    BoneSlider2.ValueChanged += RingBLeft_Slider;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RingBRight_Slider;
                    BoneSlider2.ValueChanged += RingBRight_Slider;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= MiddleBLeft_Slider;
                    BoneSlider2.ValueChanged += MiddleBLeft_Slider;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= MiddleBRight_Slider;
                    BoneSlider2.ValueChanged += MiddleBRight_Slider;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ThumbBLeft_Slider;
                    BoneSlider2.ValueChanged += ThumbBLeft_Slider;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ThumbBRight_Slider;
                    BoneSlider2.ValueChanged += ThumbBRight_Slider;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailA_Slider;
                    BoneSlider2.ValueChanged += TailA_Slider;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailB_Slider;
                    BoneSlider2.ValueChanged += TailB_Slider;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailC_Slider;
                    BoneSlider2.ValueChanged += TailC_Slider;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailD_Slider;
                    BoneSlider2.ValueChanged += TailD_Slider;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailE_Slider;
                    BoneSlider2.ValueChanged += TailE_Slider;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RootHead_Slider;
                    BoneSlider2.ValueChanged += RootHead_Slider;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Jaw_Slider;
                    BoneSlider2.ValueChanged += Jaw_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyelidLowerLeft_Slider;
                    BoneSlider2.ValueChanged += EyelidLowerLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyelidLowerRight_Slider;
                    BoneSlider2.ValueChanged += EyelidLowerRight_Slider;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyeLeft_Slider;
                    BoneSlider2.ValueChanged += EyeLeft_Slider;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyeRight_Slider;
                    BoneSlider2.ValueChanged += EyeRight_Slider;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Nose_Slider;
                    BoneSlider2.ValueChanged += Nose_Slider;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CheekLeft_Slider;
                    BoneSlider2.ValueChanged += CheekLeft_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothWhiskersLeft_Slider;
                    BoneSlider2.ValueChanged += HrothWhiskersLeft_Slider;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CheekRight_Slider;
                    BoneSlider2.ValueChanged += CheekRight_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothWhiskersRight_Slider;
                    BoneSlider2.ValueChanged += HrothWhiskersRight_Slider;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipsLeft_Slider;
                    BoneSlider2.ValueChanged += LipsLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothEyebrowLeft_Slider;
                    BoneSlider2.ValueChanged += HrothEyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipsRight_Slider;
                    BoneSlider2.ValueChanged += LipsRight_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothEyebrowRight_Slider;
                    BoneSlider2.ValueChanged += HrothEyebrowRight_Slider;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyebrowLeft_Slider;
                    BoneSlider2.ValueChanged += EyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothBridge_Slider;
                    BoneSlider2.ValueChanged += HrothBridge_Slider;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyebrowRight_Slider;
                    BoneSlider2.ValueChanged += EyebrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothBrowLeft_Slider;
                    BoneSlider2.ValueChanged += HrothBrowLeft_Slider;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Bridge_Slider;
                    BoneSlider2.ValueChanged += Bridge_Slider;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothBrowRight_Slider;
                    BoneSlider2.ValueChanged += HrothBrowRight_Slider;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= BrowLeft_Slider;
                    BoneSlider2.ValueChanged += BrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothJawUpper_Slider;
                    BoneSlider2.ValueChanged += HrothJawUpper_Slider;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= BrowRight_Slider;
                    BoneSlider2.ValueChanged += BrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipUpper_Slider;
                    BoneSlider2.ValueChanged += HrothLipUpper_Slider;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipUpperA_Slider;
                    BoneSlider2.ValueChanged += LipUpperA_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothEyelidUpperLeft_Slider;
                    BoneSlider2.ValueChanged += HrothEyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyelidUpperLeft_Slider;
                    BoneSlider2.ValueChanged += EyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothEyelidUpperRight_Slider;
                    BoneSlider2.ValueChanged += HrothEyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyelidUpperRight_Slider;
                    BoneSlider2.ValueChanged += EyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipsLeft_Slider;
                    BoneSlider2.ValueChanged += HrothLipsLeft_Slider;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipLowerA_Slider;
                    BoneSlider2.ValueChanged += LipLowerA_Slider;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipsRight_Slider;
                    BoneSlider2.ValueChanged += HrothLipsRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar01ALeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar01ALeft_Slider;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipUpperB_Slider;
                    BoneSlider2.ValueChanged += LipUpperB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipUpperLeft_Slider;
                    BoneSlider2.ValueChanged += HrothLipUpperLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar01ARight_Slider;
                    BoneSlider2.ValueChanged += VieraEar01ARight_Slider;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipLowerB_Slider;
                    BoneSlider2.ValueChanged += LipLowerB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipUpperRight_Slider;
                    BoneSlider2.ValueChanged += HrothLipUpperRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar02ALeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar02ALeft_Slider;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipLower_Slider;
                    BoneSlider2.ValueChanged += HrothLipLower_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar02ARight_Slider;
                    BoneSlider2.ValueChanged += VieraEar02ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar03ALeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar03ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar03ARight_Slider;
                    BoneSlider2.ValueChanged += VieraEar03ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar04ALeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar04ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar04ARight_Slider;
                    BoneSlider2.ValueChanged += VieraEar04ARight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraLipLowerA_Slider;
                    BoneSlider2.ValueChanged += VieraLipLowerA_Slider;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraLipUpperB_Slider;
                    BoneSlider2.ValueChanged += VieraLipUpperB_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar01BLeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar01BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar01BRight_Slider;
                    BoneSlider2.ValueChanged += VieraEar01BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar02BLeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar02BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar02BRight_Slider;
                    BoneSlider2.ValueChanged += VieraEar02BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar03BLeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar03BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar03BRight_Slider;
                    BoneSlider2.ValueChanged += VieraEar03BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar04BLeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar04BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar04BRight_Slider;
                    BoneSlider2.ValueChanged += VieraEar04BRight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraLipLowerB_Slider;
                    BoneSlider2.ValueChanged += VieraLipLowerB_Slider;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairA_Slider;
                    BoneSlider2.ValueChanged += ExHairA_Slider;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairB_Slider;
                    BoneSlider2.ValueChanged += ExHairB_Slider;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairC_Slider;
                    BoneSlider2.ValueChanged += ExHairC_Slider;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairD_Slider;
                    BoneSlider2.ValueChanged += ExHairD_Slider;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairE_Slider;
                    BoneSlider2.ValueChanged += ExHairE_Slider;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairF_Slider;
                    BoneSlider2.ValueChanged += ExHairF_Slider;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairG_Slider;
                    BoneSlider2.ValueChanged += ExHairG_Slider;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairH_Slider;
                    BoneSlider2.ValueChanged += ExHairH_Slider;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairI_Slider;
                    BoneSlider2.ValueChanged += ExHairI_Slider;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairJ_Slider;
                    BoneSlider2.ValueChanged += ExHairJ_Slider;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairK_Slider;
                    BoneSlider2.ValueChanged += ExHairK_Slider;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairL_Slider;
                    BoneSlider2.ValueChanged += ExHairL_Slider;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetA_Slider;
                    BoneSlider2.ValueChanged += ExMetA_Slider;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetB_Slider;
                    BoneSlider2.ValueChanged += ExMetB_Slider;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetC_Slider;
                    BoneSlider2.ValueChanged += ExMetC_Slider;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetD_Slider;
                    BoneSlider2.ValueChanged += ExMetD_Slider;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetE_Slider;
                    BoneSlider2.ValueChanged += ExMetE_Slider;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetF_Slider;
                    BoneSlider2.ValueChanged += ExMetF_Slider;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetG_Slider;
                    BoneSlider2.ValueChanged += ExMetG_Slider;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetH_Slider;
                    BoneSlider2.ValueChanged += ExMetH_Slider;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetI_Slider;
                    BoneSlider2.ValueChanged += ExMetI_Slider;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetJ_Slider;
                    BoneSlider2.ValueChanged += ExMetJ_Slider;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetK_Slider;
                    BoneSlider2.ValueChanged += ExMetK_Slider;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetL_Slider;
                    BoneSlider2.ValueChanged += ExMetL_Slider;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetM_Slider;
                    BoneSlider2.ValueChanged += ExMetM_Slider;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetN_Slider;
                    BoneSlider2.ValueChanged += ExMetN_Slider;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetO_Slider;
                    BoneSlider2.ValueChanged += ExMetO_Slider;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetP_Slider;
                    BoneSlider2.ValueChanged += ExMetP_Slider;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetQ_Slider;
                    BoneSlider2.ValueChanged += ExMetQ_Slider;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetR_Slider;
                    BoneSlider2.ValueChanged += ExMetR_Slider;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopA_Slider;
                    BoneSlider2.ValueChanged += ExTopA_Slider;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopB_Slider;
                    BoneSlider2.ValueChanged += ExTopB_Slider;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopC_Slider;
                    BoneSlider2.ValueChanged += ExTopC_Slider;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopD_Slider;
                    BoneSlider2.ValueChanged += ExTopD_Slider;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopE_Slider;
                    BoneSlider2.ValueChanged += ExTopE_Slider;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopF_Slider;
                    BoneSlider2.ValueChanged += ExTopF_Slider;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopG_Slider;
                    BoneSlider2.ValueChanged += ExTopG_Slider;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopH_Slider;
                    BoneSlider2.ValueChanged += ExTopH_Slider;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopI_Slider;
                    BoneSlider2.ValueChanged += ExTopI_Slider;
                }
            }
        }
        private void BoneSliders3_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Root_Slider;
                    BoneSlider3.ValueChanged += Root_Slider;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Abdomen_Slider;
                    BoneSlider3.ValueChanged += Abdomen_Slider;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Throw_Slider;
                    BoneSlider3.ValueChanged += Throw_Slider;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Waist_Slider;
                    BoneSlider3.ValueChanged += Waist_Slider;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SpineA_Slider;
                    BoneSlider3.ValueChanged += SpineA_Slider;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LegLeft_Slider;
                    BoneSlider3.ValueChanged += LegLeft_Slider;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LegRight_Slider;
                    BoneSlider3.ValueChanged += LegRight_Slider;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HolsterLeft_Slider;
                    BoneSlider3.ValueChanged += HolsterLeft_Slider;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HolsterRight_Slider;
                    BoneSlider3.ValueChanged += HolsterRight_Slider;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SheatheLeft_Slider;
                    BoneSlider3.ValueChanged += SheatheLeft_Slider;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SheatheRight_Slider;
                    BoneSlider3.ValueChanged += SheatheRight_Slider;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SpineB_Slider;
                    BoneSlider3.ValueChanged += SpineB_Slider;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackALeft_Slider;
                    BoneSlider3.ValueChanged += ClothBackALeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackARight_Slider;
                    BoneSlider3.ValueChanged += ClothBackARight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontALeft_Slider;
                    BoneSlider3.ValueChanged += ClothFrontALeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontARight_Slider;
                    BoneSlider3.ValueChanged += ClothFrontARight_Slider;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideALeft_Slider;
                    BoneSlider3.ValueChanged += ClothSideALeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideARight_Slider;
                    BoneSlider3.ValueChanged += ClothSideARight_Slider;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= KneeLeft_Slider;
                    BoneSlider3.ValueChanged += KneeLeft_Slider;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= KneeRight_Slider;
                    BoneSlider3.ValueChanged += KneeRight_Slider;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= BreastLeft_Slider;
                    BoneSlider3.ValueChanged += BreastLeft_Slider;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= BreastRight_Slider;
                    BoneSlider3.ValueChanged += BreastRight_Slider;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SpineC_Slider;
                    BoneSlider3.ValueChanged += SpineC_Slider;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackBLeft_Slider;
                    BoneSlider3.ValueChanged += ClothBackBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackBRight_Slider;
                    BoneSlider3.ValueChanged += ClothBackBRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontBLeft_Slider;
                    BoneSlider3.ValueChanged += ClothFrontBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontBRight_Slider;
                    BoneSlider3.ValueChanged += ClothFrontBRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideBLeft_Slider;
                    BoneSlider3.ValueChanged += ClothSideBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideBRight_Slider;
                    BoneSlider3.ValueChanged += ClothSideBRight_Slider;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CalfLeft_Slider;
                    BoneSlider3.ValueChanged += CalfLeft_Slider;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CalfRight_Slider;
                    BoneSlider3.ValueChanged += CalfRight_Slider;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ScabbardLeft_Slider;
                    BoneSlider3.ValueChanged += ScabbardLeft_Slider;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ScabbardRight_Slider;
                    BoneSlider3.ValueChanged += ScabbardRight_Slider;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Neck_Slider;
                    BoneSlider3.ValueChanged += Neck_Slider;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClavicleLeft_Slider;
                    BoneSlider3.ValueChanged += ClavicleLeft_Slider;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClavicleRight_Slider;
                    BoneSlider3.ValueChanged += ClavicleRight_Slider;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackCLeft_Slider;
                    BoneSlider3.ValueChanged += ClothBackCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackCRight_Slider;
                    BoneSlider3.ValueChanged += ClothBackCRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontCLeft_Slider;
                    BoneSlider3.ValueChanged += ClothFrontCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontCRight_Slider;
                    BoneSlider3.ValueChanged += ClothFrontCRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideCLeft_Slider;
                    BoneSlider3.ValueChanged += ClothSideCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideCRight_Slider;
                    BoneSlider3.ValueChanged += ClothSideCRight_Slider;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PoleynLeft_Slider;
                    BoneSlider3.ValueChanged += PoleynLeft_Slider;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PoleynRight_Slider;
                    BoneSlider3.ValueChanged += PoleynRight_Slider;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= FootLeft_Slider;
                    BoneSlider3.ValueChanged += FootLeft_Slider;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= FootRight_Slider;
                    BoneSlider3.ValueChanged += FootRight_Slider;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Head_Slider;
                    BoneSlider3.ValueChanged += Head_Slider;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ArmLeft_Slider;
                    BoneSlider3.ValueChanged += ArmLeft_Slider;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ArmRight_Slider;
                    BoneSlider3.ValueChanged += ArmRight_Slider;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PauldronLeft_Slider;
                    BoneSlider3.ValueChanged += PauldronLeft_Slider;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PauldronRight_Slider;
                    BoneSlider3.ValueChanged += PauldronRight_Slider;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Unknown00_Slider;
                    BoneSlider3.ValueChanged += Unknown00_Slider;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ToesLeft_Slider;
                    BoneSlider3.ValueChanged += ToesLeft_Slider;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ToesRight_Slider;
                    BoneSlider3.ValueChanged += ToesRight_Slider;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HairA_Slider;
                    BoneSlider3.ValueChanged += HairA_Slider;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HairFrontLeft_Slider;
                    BoneSlider3.ValueChanged += HairFrontLeft_Slider;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HairFrontRight_Slider;
                    BoneSlider3.ValueChanged += HairFrontRight_Slider;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarLeft_Slider;
                    BoneSlider3.ValueChanged += EarLeft_Slider;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarRight_Slider;
                    BoneSlider3.ValueChanged += EarRight_Slider;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ForearmLeft_Slider;
                    BoneSlider3.ValueChanged += ForearmLeft_Slider;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ForearmRight_Slider;
                    BoneSlider3.ValueChanged += ForearmRight_Slider;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ShoulderLeft_Slider;
                    BoneSlider3.ValueChanged += ShoulderLeft_Slider;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ShoulderRight_Slider;
                    BoneSlider3.ValueChanged += ShoulderRight_Slider;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HairB_Slider;
                    BoneSlider3.ValueChanged += HairB_Slider;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HandLeft_Slider;
                    BoneSlider3.ValueChanged += HandLeft_Slider;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HandRight_Slider;
                    BoneSlider3.ValueChanged += HandRight_Slider;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ShieldLeft_Slider;
                    BoneSlider3.ValueChanged += ShieldLeft_Slider;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ShieldRight_Slider;
                    BoneSlider3.ValueChanged += ShieldRight_Slider;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarringALeft_Slider;
                    BoneSlider3.ValueChanged += EarringALeft_Slider;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarringARight_Slider;
                    BoneSlider3.ValueChanged += EarringARight_Slider;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ElbowLeft_Slider;
                    BoneSlider3.ValueChanged += ElbowLeft_Slider;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ElbowRight_Slider;
                    BoneSlider3.ValueChanged += ElbowRight_Slider;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CouterLeft_Slider;
                    BoneSlider3.ValueChanged += CouterLeft_Slider;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CouterRight_Slider;
                    BoneSlider3.ValueChanged += CouterRight_Slider;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= WristLeft_Slider;
                    BoneSlider3.ValueChanged += WristLeft_Slider;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= WristRight_Slider;
                    BoneSlider3.ValueChanged += WristRight_Slider;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= IndexALeft_Slider;
                    BoneSlider3.ValueChanged += IndexALeft_Slider;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= IndexARight_Slider;
                    BoneSlider3.ValueChanged += IndexARight_Slider;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PinkyALeft_Slider;
                    BoneSlider3.ValueChanged += PinkyALeft_Slider;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PinkyARight_Slider;
                    BoneSlider3.ValueChanged += PinkyARight_Slider;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RingALeft_Slider;
                    BoneSlider3.ValueChanged += RingALeft_Slider;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RingARight_Slider;
                    BoneSlider3.ValueChanged += RingARight_Slider;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= MiddleALeft_Slider;
                    BoneSlider3.ValueChanged += MiddleALeft_Slider;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= MiddleARight_Slider;
                    BoneSlider3.ValueChanged += MiddleARight_Slider;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ThumbALeft_Slider;
                    BoneSlider3.ValueChanged += ThumbALeft_Slider;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ThumbARight_Slider;
                    BoneSlider3.ValueChanged += ThumbARight_Slider;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= WeaponLeft_Slider;
                    BoneSlider3.ValueChanged += WeaponLeft_Slider;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= WeaponRight_Slider;
                    BoneSlider3.ValueChanged += WeaponRight_Slider;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarringBLeft_Slider;
                    BoneSlider3.ValueChanged += EarringBLeft_Slider;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarringBRight_Slider;
                    BoneSlider3.ValueChanged += EarringBRight_Slider;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= IndexBLeft_Slider;
                    BoneSlider3.ValueChanged += IndexBLeft_Slider;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= IndexBRight_Slider;
                    BoneSlider3.ValueChanged += IndexBRight_Slider;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PinkyBLeft_Slider;
                    BoneSlider3.ValueChanged += PinkyBLeft_Slider;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PinkyBRight_Slider;
                    BoneSlider3.ValueChanged += PinkyBRight_Slider;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RingBLeft_Slider;
                    BoneSlider3.ValueChanged += RingBLeft_Slider;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RingBRight_Slider;
                    BoneSlider3.ValueChanged += RingBRight_Slider;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= MiddleBLeft_Slider;
                    BoneSlider3.ValueChanged += MiddleBLeft_Slider;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= MiddleBRight_Slider;
                    BoneSlider3.ValueChanged += MiddleBRight_Slider;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ThumbBLeft_Slider;
                    BoneSlider3.ValueChanged += ThumbBLeft_Slider;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ThumbBRight_Slider;
                    BoneSlider3.ValueChanged += ThumbBRight_Slider;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailA_Slider;
                    BoneSlider3.ValueChanged += TailA_Slider;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailB_Slider;
                    BoneSlider3.ValueChanged += TailB_Slider;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailC_Slider;
                    BoneSlider3.ValueChanged += TailC_Slider;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailD_Slider;
                    BoneSlider3.ValueChanged += TailD_Slider;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailE_Slider;
                    BoneSlider3.ValueChanged += TailE_Slider;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RootHead_Slider;
                    BoneSlider3.ValueChanged += RootHead_Slider;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Jaw_Slider;
                    BoneSlider3.ValueChanged += Jaw_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyelidLowerLeft_Slider;
                    BoneSlider3.ValueChanged += EyelidLowerLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyelidLowerRight_Slider;
                    BoneSlider3.ValueChanged += EyelidLowerRight_Slider;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyeLeft_Slider;
                    BoneSlider3.ValueChanged += EyeLeft_Slider;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyeRight_Slider;
                    BoneSlider3.ValueChanged += EyeRight_Slider;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Nose_Slider;
                    BoneSlider3.ValueChanged += Nose_Slider;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CheekLeft_Slider;
                    BoneSlider3.ValueChanged += CheekLeft_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothWhiskersLeft_Slider;
                    BoneSlider3.ValueChanged += HrothWhiskersLeft_Slider;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CheekRight_Slider;
                    BoneSlider3.ValueChanged += CheekRight_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothWhiskersRight_Slider;
                    BoneSlider3.ValueChanged += HrothWhiskersRight_Slider;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipsLeft_Slider;
                    BoneSlider3.ValueChanged += LipsLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothEyebrowLeft_Slider;
                    BoneSlider3.ValueChanged += HrothEyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipsRight_Slider;
                    BoneSlider3.ValueChanged += LipsRight_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothEyebrowRight_Slider;
                    BoneSlider3.ValueChanged += HrothEyebrowRight_Slider;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyebrowLeft_Slider;
                    BoneSlider3.ValueChanged += EyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothBridge_Slider;
                    BoneSlider3.ValueChanged += HrothBridge_Slider;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyebrowRight_Slider;
                    BoneSlider3.ValueChanged += EyebrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothBrowLeft_Slider;
                    BoneSlider3.ValueChanged += HrothBrowLeft_Slider;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Bridge_Slider;
                    BoneSlider3.ValueChanged += Bridge_Slider;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothBrowRight_Slider;
                    BoneSlider3.ValueChanged += HrothBrowRight_Slider;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= BrowLeft_Slider;
                    BoneSlider3.ValueChanged += BrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothJawUpper_Slider;
                    BoneSlider3.ValueChanged += HrothJawUpper_Slider;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= BrowRight_Slider;
                    BoneSlider3.ValueChanged += BrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipUpper_Slider;
                    BoneSlider3.ValueChanged += HrothLipUpper_Slider;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipUpperA_Slider;
                    BoneSlider3.ValueChanged += LipUpperA_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothEyelidUpperLeft_Slider;
                    BoneSlider3.ValueChanged += HrothEyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyelidUpperLeft_Slider;
                    BoneSlider3.ValueChanged += EyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothEyelidUpperRight_Slider;
                    BoneSlider3.ValueChanged += HrothEyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyelidUpperRight_Slider;
                    BoneSlider3.ValueChanged += EyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipsLeft_Slider;
                    BoneSlider3.ValueChanged += HrothLipsLeft_Slider;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipLowerA_Slider;
                    BoneSlider3.ValueChanged += LipLowerA_Slider;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipsRight_Slider;
                    BoneSlider3.ValueChanged += HrothLipsRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar01ALeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar01ALeft_Slider;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipUpperB_Slider;
                    BoneSlider3.ValueChanged += LipUpperB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipUpperLeft_Slider;
                    BoneSlider3.ValueChanged += HrothLipUpperLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar01ARight_Slider;
                    BoneSlider3.ValueChanged += VieraEar01ARight_Slider;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipLowerB_Slider;
                    BoneSlider3.ValueChanged += LipLowerB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipUpperRight_Slider;
                    BoneSlider3.ValueChanged += HrothLipUpperRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar02ALeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar02ALeft_Slider;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipLower_Slider;
                    BoneSlider3.ValueChanged += HrothLipLower_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar02ARight_Slider;
                    BoneSlider3.ValueChanged += VieraEar02ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar03ALeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar03ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar03ARight_Slider;
                    BoneSlider3.ValueChanged += VieraEar03ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar04ALeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar04ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar04ARight_Slider;
                    BoneSlider3.ValueChanged += VieraEar04ARight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraLipLowerA_Slider;
                    BoneSlider3.ValueChanged += VieraLipLowerA_Slider;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraLipUpperB_Slider;
                    BoneSlider3.ValueChanged += VieraLipUpperB_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar01BLeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar01BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar01BRight_Slider;
                    BoneSlider3.ValueChanged += VieraEar01BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar02BLeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar02BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar02BRight_Slider;
                    BoneSlider3.ValueChanged += VieraEar02BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar03BLeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar03BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar03BRight_Slider;
                    BoneSlider3.ValueChanged += VieraEar03BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar04BLeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar04BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar04BRight_Slider;
                    BoneSlider3.ValueChanged += VieraEar04BRight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraLipLowerB_Slider;
                    BoneSlider3.ValueChanged += VieraLipLowerB_Slider;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairA_Slider;
                    BoneSlider3.ValueChanged += ExHairA_Slider;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairB_Slider;
                    BoneSlider3.ValueChanged += ExHairB_Slider;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairC_Slider;
                    BoneSlider3.ValueChanged += ExHairC_Slider;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairD_Slider;
                    BoneSlider3.ValueChanged += ExHairD_Slider;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairE_Slider;
                    BoneSlider3.ValueChanged += ExHairE_Slider;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairF_Slider;
                    BoneSlider3.ValueChanged += ExHairF_Slider;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairG_Slider;
                    BoneSlider3.ValueChanged += ExHairG_Slider;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairH_Slider;
                    BoneSlider3.ValueChanged += ExHairH_Slider;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairI_Slider;
                    BoneSlider3.ValueChanged += ExHairI_Slider;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairJ_Slider;
                    BoneSlider3.ValueChanged += ExHairJ_Slider;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairK_Slider;
                    BoneSlider3.ValueChanged += ExHairK_Slider;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairL_Slider;
                    BoneSlider3.ValueChanged += ExHairL_Slider;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetA_Slider;
                    BoneSlider3.ValueChanged += ExMetA_Slider;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetB_Slider;
                    BoneSlider3.ValueChanged += ExMetB_Slider;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetC_Slider;
                    BoneSlider3.ValueChanged += ExMetC_Slider;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetD_Slider;
                    BoneSlider3.ValueChanged += ExMetD_Slider;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetE_Slider;
                    BoneSlider3.ValueChanged += ExMetE_Slider;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetF_Slider;
                    BoneSlider3.ValueChanged += ExMetF_Slider;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetG_Slider;
                    BoneSlider3.ValueChanged += ExMetG_Slider;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetH_Slider;
                    BoneSlider3.ValueChanged += ExMetH_Slider;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetI_Slider;
                    BoneSlider3.ValueChanged += ExMetI_Slider;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetJ_Slider;
                    BoneSlider3.ValueChanged += ExMetJ_Slider;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetK_Slider;
                    BoneSlider3.ValueChanged += ExMetK_Slider;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetL_Slider;
                    BoneSlider3.ValueChanged += ExMetL_Slider;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetM_Slider;
                    BoneSlider3.ValueChanged += ExMetM_Slider;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetN_Slider;
                    BoneSlider3.ValueChanged += ExMetN_Slider;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetO_Slider;
                    BoneSlider3.ValueChanged += ExMetO_Slider;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetP_Slider;
                    BoneSlider3.ValueChanged += ExMetP_Slider;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetQ_Slider;
                    BoneSlider3.ValueChanged += ExMetQ_Slider;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetR_Slider;
                    BoneSlider3.ValueChanged += ExMetR_Slider;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopA_Slider;
                    BoneSlider3.ValueChanged += ExTopA_Slider;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopB_Slider;
                    BoneSlider3.ValueChanged += ExTopB_Slider;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopC_Slider;
                    BoneSlider3.ValueChanged += ExTopC_Slider;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopD_Slider;
                    BoneSlider3.ValueChanged += ExTopD_Slider;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopE_Slider;
                    BoneSlider3.ValueChanged += ExTopE_Slider;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopF_Slider;
                    BoneSlider3.ValueChanged += ExTopF_Slider;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopG_Slider;
                    BoneSlider3.ValueChanged += ExTopG_Slider;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopH_Slider;
                    BoneSlider3.ValueChanged += ExTopH_Slider;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopI_Slider;
                    BoneSlider3.ValueChanged += ExTopI_Slider;
                }
            }
        }
        #endregion
        #region UpDown
        private void BoneUpDown_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Root_UpDown;
                    BoneUpDown.ValueChanged += Root_UpDown;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Abdomen_UpDown;
                    BoneUpDown.ValueChanged += Abdomen_UpDown;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Throw_UpDown;
                    BoneUpDown.ValueChanged += Throw_UpDown;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Waist_UpDown;
                    BoneUpDown.ValueChanged += Waist_UpDown;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SpineA_UpDown;
                    BoneUpDown.ValueChanged += SpineA_UpDown;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LegLeft_UpDown;
                    BoneUpDown.ValueChanged += LegLeft_UpDown;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LegRight_UpDown;
                    BoneUpDown.ValueChanged += LegRight_UpDown;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HolsterLeft_UpDown;
                    BoneUpDown.ValueChanged += HolsterLeft_UpDown;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HolsterRight_UpDown;
                    BoneUpDown.ValueChanged += HolsterRight_UpDown;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SheatheLeft_UpDown;
                    BoneUpDown.ValueChanged += SheatheLeft_UpDown;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SheatheRight_UpDown;
                    BoneUpDown.ValueChanged += SheatheRight_UpDown;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SpineB_UpDown;
                    BoneUpDown.ValueChanged += SpineB_UpDown;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackALeft_UpDown;
                    BoneUpDown.ValueChanged += ClothBackALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackARight_UpDown;
                    BoneUpDown.ValueChanged += ClothBackARight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontALeft_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontARight_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontARight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideALeft_UpDown;
                    BoneUpDown.ValueChanged += ClothSideALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideARight_UpDown;
                    BoneUpDown.ValueChanged += ClothSideARight_UpDown;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= KneeLeft_UpDown;
                    BoneUpDown.ValueChanged += KneeLeft_UpDown;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= KneeRight_UpDown;
                    BoneUpDown.ValueChanged += KneeRight_UpDown;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= BreastLeft_UpDown;
                    BoneUpDown.ValueChanged += BreastLeft_UpDown;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= BreastRight_UpDown;
                    BoneUpDown.ValueChanged += BreastRight_UpDown;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SpineC_UpDown;
                    BoneUpDown.ValueChanged += SpineC_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackBLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothBackBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackBRight_UpDown;
                    BoneUpDown.ValueChanged += ClothBackBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontBLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontBRight_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideBLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothSideBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideBRight_UpDown;
                    BoneUpDown.ValueChanged += ClothSideBRight_UpDown;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CalfLeft_UpDown;
                    BoneUpDown.ValueChanged += CalfLeft_UpDown;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CalfRight_UpDown;
                    BoneUpDown.ValueChanged += CalfRight_UpDown;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ScabbardLeft_UpDown;
                    BoneUpDown.ValueChanged += ScabbardLeft_UpDown;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ScabbardRight_UpDown;
                    BoneUpDown.ValueChanged += ScabbardRight_UpDown;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Neck_UpDown;
                    BoneUpDown.ValueChanged += Neck_UpDown;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClavicleLeft_UpDown;
                    BoneUpDown.ValueChanged += ClavicleLeft_UpDown;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClavicleRight_UpDown;
                    BoneUpDown.ValueChanged += ClavicleRight_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackCLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothBackCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackCRight_UpDown;
                    BoneUpDown.ValueChanged += ClothBackCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontCLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontCRight_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideCLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothSideCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideCRight_UpDown;
                    BoneUpDown.ValueChanged += ClothSideCRight_UpDown;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PoleynLeft_UpDown;
                    BoneUpDown.ValueChanged += PoleynLeft_UpDown;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PoleynRight_UpDown;
                    BoneUpDown.ValueChanged += PoleynRight_UpDown;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= FootLeft_UpDown;
                    BoneUpDown.ValueChanged += FootLeft_UpDown;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= FootRight_UpDown;
                    BoneUpDown.ValueChanged += FootRight_UpDown;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Head_UpDown;
                    BoneUpDown.ValueChanged += Head_UpDown;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ArmLeft_UpDown;
                    BoneUpDown.ValueChanged += ArmLeft_UpDown;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ArmRight_UpDown;
                    BoneUpDown.ValueChanged += ArmRight_UpDown;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PauldronLeft_UpDown;
                    BoneUpDown.ValueChanged += PauldronLeft_UpDown;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PauldronRight_UpDown;
                    BoneUpDown.ValueChanged += PauldronRight_UpDown;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Unknown00_UpDown;
                    BoneUpDown.ValueChanged += Unknown00_UpDown;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ToesLeft_UpDown;
                    BoneUpDown.ValueChanged += ToesLeft_UpDown;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ToesRight_UpDown;
                    BoneUpDown.ValueChanged += ToesRight_UpDown;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HairA_UpDown;
                    BoneUpDown.ValueChanged += HairA_UpDown;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HairFrontLeft_UpDown;
                    BoneUpDown.ValueChanged += HairFrontLeft_UpDown;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HairFrontRight_UpDown;
                    BoneUpDown.ValueChanged += HairFrontRight_UpDown;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarLeft_UpDown;
                    BoneUpDown.ValueChanged += EarLeft_UpDown;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarRight_UpDown;
                    BoneUpDown.ValueChanged += EarRight_UpDown;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ForearmLeft_UpDown;
                    BoneUpDown.ValueChanged += ForearmLeft_UpDown;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ForearmRight_UpDown;
                    BoneUpDown.ValueChanged += ForearmRight_UpDown;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ShoulderLeft_UpDown;
                    BoneUpDown.ValueChanged += ShoulderLeft_UpDown;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ShoulderRight_UpDown;
                    BoneUpDown.ValueChanged += ShoulderRight_UpDown;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HairB_UpDown;
                    BoneUpDown.ValueChanged += HairB_UpDown;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HandLeft_UpDown;
                    BoneUpDown.ValueChanged += HandLeft_UpDown;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HandRight_UpDown;
                    BoneUpDown.ValueChanged += HandRight_UpDown;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ShieldLeft_UpDown;
                    BoneUpDown.ValueChanged += ShieldLeft_UpDown;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ShieldRight_UpDown;
                    BoneUpDown.ValueChanged += ShieldRight_UpDown;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarringALeft_UpDown;
                    BoneUpDown.ValueChanged += EarringALeft_UpDown;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarringARight_UpDown;
                    BoneUpDown.ValueChanged += EarringARight_UpDown;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ElbowLeft_UpDown;
                    BoneUpDown.ValueChanged += ElbowLeft_UpDown;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ElbowRight_UpDown;
                    BoneUpDown.ValueChanged += ElbowRight_UpDown;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CouterLeft_UpDown;
                    BoneUpDown.ValueChanged += CouterLeft_UpDown;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CouterRight_UpDown;
                    BoneUpDown.ValueChanged += CouterRight_UpDown;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= WristLeft_UpDown;
                    BoneUpDown.ValueChanged += WristLeft_UpDown;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= WristRight_UpDown;
                    BoneUpDown.ValueChanged += WristRight_UpDown;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= IndexALeft_UpDown;
                    BoneUpDown.ValueChanged += IndexALeft_UpDown;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= IndexARight_UpDown;
                    BoneUpDown.ValueChanged += IndexARight_UpDown;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PinkyALeft_UpDown;
                    BoneUpDown.ValueChanged += PinkyALeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PinkyARight_UpDown;
                    BoneUpDown.ValueChanged += PinkyARight_UpDown;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RingALeft_UpDown;
                    BoneUpDown.ValueChanged += RingALeft_UpDown;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RingARight_UpDown;
                    BoneUpDown.ValueChanged += RingARight_UpDown;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= MiddleALeft_UpDown;
                    BoneUpDown.ValueChanged += MiddleALeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= MiddleARight_UpDown;
                    BoneUpDown.ValueChanged += MiddleARight_UpDown;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ThumbALeft_UpDown;
                    BoneUpDown.ValueChanged += ThumbALeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ThumbARight_UpDown;
                    BoneUpDown.ValueChanged += ThumbARight_UpDown;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= WeaponLeft_UpDown;
                    BoneUpDown.ValueChanged += WeaponLeft_UpDown;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= WeaponRight_UpDown;
                    BoneUpDown.ValueChanged += WeaponRight_UpDown;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarringBLeft_UpDown;
                    BoneUpDown.ValueChanged += EarringBLeft_UpDown;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarringBRight_UpDown;
                    BoneUpDown.ValueChanged += EarringBRight_UpDown;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= IndexBLeft_UpDown;
                    BoneUpDown.ValueChanged += IndexBLeft_UpDown;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= IndexBRight_UpDown;
                    BoneUpDown.ValueChanged += IndexBRight_UpDown;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PinkyBLeft_UpDown;
                    BoneUpDown.ValueChanged += PinkyBLeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PinkyBRight_UpDown;
                    BoneUpDown.ValueChanged += PinkyBRight_UpDown;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RingBLeft_UpDown;
                    BoneUpDown.ValueChanged += RingBLeft_UpDown;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RingBRight_UpDown;
                    BoneUpDown.ValueChanged += RingBRight_UpDown;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= MiddleBLeft_UpDown;
                    BoneUpDown.ValueChanged += MiddleBLeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= MiddleBRight_UpDown;
                    BoneUpDown.ValueChanged += MiddleBRight_UpDown;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ThumbBLeft_UpDown;
                    BoneUpDown.ValueChanged += ThumbBLeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ThumbBRight_UpDown;
                    BoneUpDown.ValueChanged += ThumbBRight_UpDown;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailA_UpDown;
                    BoneUpDown.ValueChanged += TailA_UpDown;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailB_UpDown;
                    BoneUpDown.ValueChanged += TailB_UpDown;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailC_UpDown;
                    BoneUpDown.ValueChanged += TailC_UpDown;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailD_UpDown;
                    BoneUpDown.ValueChanged += TailD_UpDown;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailE_UpDown;
                    BoneUpDown.ValueChanged += TailE_UpDown;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RootHead_UpDown;
                    BoneUpDown.ValueChanged += RootHead_UpDown;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Jaw_UpDown;
                    BoneUpDown.ValueChanged += Jaw_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyelidLowerLeft_UpDown;
                    BoneUpDown.ValueChanged += EyelidLowerLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyelidLowerRight_UpDown;
                    BoneUpDown.ValueChanged += EyelidLowerRight_UpDown;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyeLeft_UpDown;
                    BoneUpDown.ValueChanged += EyeLeft_UpDown;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyeRight_UpDown;
                    BoneUpDown.ValueChanged += EyeRight_UpDown;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Nose_UpDown;
                    BoneUpDown.ValueChanged += Nose_UpDown;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CheekLeft_UpDown;
                    BoneUpDown.ValueChanged += CheekLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothWhiskersLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothWhiskersLeft_UpDown;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CheekRight_UpDown;
                    BoneUpDown.ValueChanged += CheekRight_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothWhiskersRight_UpDown;
                    BoneUpDown.ValueChanged += HrothWhiskersRight_UpDown;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipsLeft_UpDown;
                    BoneUpDown.ValueChanged += LipsLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothEyebrowLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothEyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipsRight_UpDown;
                    BoneUpDown.ValueChanged += LipsRight_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothEyebrowRight_UpDown;
                    BoneUpDown.ValueChanged += HrothEyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyebrowLeft_UpDown;
                    BoneUpDown.ValueChanged += EyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothBridge_UpDown;
                    BoneUpDown.ValueChanged += HrothBridge_UpDown;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyebrowRight_UpDown;
                    BoneUpDown.ValueChanged += EyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothBrowLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothBrowLeft_UpDown;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Bridge_UpDown;
                    BoneUpDown.ValueChanged += Bridge_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothBrowRight_UpDown;
                    BoneUpDown.ValueChanged += HrothBrowRight_UpDown;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= BrowLeft_UpDown;
                    BoneUpDown.ValueChanged += BrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothJawUpper_UpDown;
                    BoneUpDown.ValueChanged += HrothJawUpper_UpDown;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= BrowRight_UpDown;
                    BoneUpDown.ValueChanged += BrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipUpper_UpDown;
                    BoneUpDown.ValueChanged += HrothLipUpper_UpDown;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipUpperA_UpDown;
                    BoneUpDown.ValueChanged += LipUpperA_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothEyelidUpperLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothEyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyelidUpperLeft_UpDown;
                    BoneUpDown.ValueChanged += EyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothEyelidUpperRight_UpDown;
                    BoneUpDown.ValueChanged += HrothEyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyelidUpperRight_UpDown;
                    BoneUpDown.ValueChanged += EyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipsLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothLipsLeft_UpDown;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipLowerA_UpDown;
                    BoneUpDown.ValueChanged += LipLowerA_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipsRight_UpDown;
                    BoneUpDown.ValueChanged += HrothLipsRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar01ALeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar01ALeft_UpDown;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipUpperB_UpDown;
                    BoneUpDown.ValueChanged += LipUpperB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipUpperLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothLipUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar01ARight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar01ARight_UpDown;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipLowerB_UpDown;
                    BoneUpDown.ValueChanged += LipLowerB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipUpperRight_UpDown;
                    BoneUpDown.ValueChanged += HrothLipUpperRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar02ALeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar02ALeft_UpDown;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipLower_UpDown;
                    BoneUpDown.ValueChanged += HrothLipLower_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar02ARight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar02ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar03ALeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar03ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar03ARight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar03ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar04ALeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar04ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar04ARight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar04ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraLipLowerA_UpDown;
                    BoneUpDown.ValueChanged += VieraLipLowerA_UpDown;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraLipUpperB_UpDown;
                    BoneUpDown.ValueChanged += VieraLipUpperB_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar01BLeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar01BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar01BRight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar01BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar02BLeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar02BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar02BRight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar02BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar03BLeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar03BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar03BRight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar03BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar04BLeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar04BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar04BRight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar04BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraLipLowerB_UpDown;
                    BoneUpDown.ValueChanged += VieraLipLowerB_UpDown;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairA_UpDown;
                    BoneUpDown.ValueChanged += ExHairA_UpDown;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairB_UpDown;
                    BoneUpDown.ValueChanged += ExHairB_UpDown;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairC_UpDown;
                    BoneUpDown.ValueChanged += ExHairC_UpDown;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairD_UpDown;
                    BoneUpDown.ValueChanged += ExHairD_UpDown;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairE_UpDown;
                    BoneUpDown.ValueChanged += ExHairE_UpDown;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairF_UpDown;
                    BoneUpDown.ValueChanged += ExHairF_UpDown;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairG_UpDown;
                    BoneUpDown.ValueChanged += ExHairG_UpDown;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairH_UpDown;
                    BoneUpDown.ValueChanged += ExHairH_UpDown;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairI_UpDown;
                    BoneUpDown.ValueChanged += ExHairI_UpDown;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairJ_UpDown;
                    BoneUpDown.ValueChanged += ExHairJ_UpDown;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairK_UpDown;
                    BoneUpDown.ValueChanged += ExHairK_UpDown;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairL_UpDown;
                    BoneUpDown.ValueChanged += ExHairL_UpDown;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetA_UpDown;
                    BoneUpDown.ValueChanged += ExMetA_UpDown;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetB_UpDown;
                    BoneUpDown.ValueChanged += ExMetB_UpDown;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetC_UpDown;
                    BoneUpDown.ValueChanged += ExMetC_UpDown;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetD_UpDown;
                    BoneUpDown.ValueChanged += ExMetD_UpDown;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetE_UpDown;
                    BoneUpDown.ValueChanged += ExMetE_UpDown;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetF_UpDown;
                    BoneUpDown.ValueChanged += ExMetF_UpDown;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetG_UpDown;
                    BoneUpDown.ValueChanged += ExMetG_UpDown;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetH_UpDown;
                    BoneUpDown.ValueChanged += ExMetH_UpDown;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetI_UpDown;
                    BoneUpDown.ValueChanged += ExMetI_UpDown;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetJ_UpDown;
                    BoneUpDown.ValueChanged += ExMetJ_UpDown;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetK_UpDown;
                    BoneUpDown.ValueChanged += ExMetK_UpDown;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetL_UpDown;
                    BoneUpDown.ValueChanged += ExMetL_UpDown;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetM_UpDown;
                    BoneUpDown.ValueChanged += ExMetM_UpDown;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetN_UpDown;
                    BoneUpDown.ValueChanged += ExMetN_UpDown;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetO_UpDown;
                    BoneUpDown.ValueChanged += ExMetO_UpDown;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetP_UpDown;
                    BoneUpDown.ValueChanged += ExMetP_UpDown;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetQ_UpDown;
                    BoneUpDown.ValueChanged += ExMetQ_UpDown;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetR_UpDown;
                    BoneUpDown.ValueChanged += ExMetR_UpDown;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopA_UpDown;
                    BoneUpDown.ValueChanged += ExTopA_UpDown;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopB_UpDown;
                    BoneUpDown.ValueChanged += ExTopB_UpDown;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopC_UpDown;
                    BoneUpDown.ValueChanged += ExTopC_UpDown;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopD_UpDown;
                    BoneUpDown.ValueChanged += ExTopD_UpDown;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopE_UpDown;
                    BoneUpDown.ValueChanged += ExTopE_UpDown;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopF_UpDown;
                    BoneUpDown.ValueChanged += ExTopF_UpDown;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopG_UpDown;
                    BoneUpDown.ValueChanged += ExTopG_UpDown;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopH_UpDown;
                    BoneUpDown.ValueChanged += ExTopH_UpDown;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopI_UpDown;
                    BoneUpDown.ValueChanged += ExTopI_UpDown;
                }
            }
        }
        private void BoneUpDown2_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Root_UpDown;
                    BoneUpDown2.ValueChanged += Root_UpDown;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Abdomen_UpDown;
                    BoneUpDown2.ValueChanged += Abdomen_UpDown;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Throw_UpDown;
                    BoneUpDown2.ValueChanged += Throw_UpDown;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Waist_UpDown;
                    BoneUpDown2.ValueChanged += Waist_UpDown;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SpineA_UpDown;
                    BoneUpDown2.ValueChanged += SpineA_UpDown;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LegLeft_UpDown;
                    BoneUpDown2.ValueChanged += LegLeft_UpDown;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LegRight_UpDown;
                    BoneUpDown2.ValueChanged += LegRight_UpDown;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HolsterLeft_UpDown;
                    BoneUpDown2.ValueChanged += HolsterLeft_UpDown;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HolsterRight_UpDown;
                    BoneUpDown2.ValueChanged += HolsterRight_UpDown;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SheatheLeft_UpDown;
                    BoneUpDown2.ValueChanged += SheatheLeft_UpDown;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SheatheRight_UpDown;
                    BoneUpDown2.ValueChanged += SheatheRight_UpDown;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SpineB_UpDown;
                    BoneUpDown2.ValueChanged += SpineB_UpDown;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackALeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackARight_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackARight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontALeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontARight_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontARight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideALeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideARight_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideARight_UpDown;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= KneeLeft_UpDown;
                    BoneUpDown2.ValueChanged += KneeLeft_UpDown;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= KneeRight_UpDown;
                    BoneUpDown2.ValueChanged += KneeRight_UpDown;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= BreastLeft_UpDown;
                    BoneUpDown2.ValueChanged += BreastLeft_UpDown;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= BreastRight_UpDown;
                    BoneUpDown2.ValueChanged += BreastRight_UpDown;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SpineC_UpDown;
                    BoneUpDown2.ValueChanged += SpineC_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackBLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackBRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontBLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontBRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideBLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideBRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideBRight_UpDown;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CalfLeft_UpDown;
                    BoneUpDown2.ValueChanged += CalfLeft_UpDown;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CalfRight_UpDown;
                    BoneUpDown2.ValueChanged += CalfRight_UpDown;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ScabbardLeft_UpDown;
                    BoneUpDown2.ValueChanged += ScabbardLeft_UpDown;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ScabbardRight_UpDown;
                    BoneUpDown2.ValueChanged += ScabbardRight_UpDown;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Neck_UpDown;
                    BoneUpDown2.ValueChanged += Neck_UpDown;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClavicleLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClavicleLeft_UpDown;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClavicleRight_UpDown;
                    BoneUpDown2.ValueChanged += ClavicleRight_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackCLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackCRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontCLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontCRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideCLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideCRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideCRight_UpDown;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PoleynLeft_UpDown;
                    BoneUpDown2.ValueChanged += PoleynLeft_UpDown;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PoleynRight_UpDown;
                    BoneUpDown2.ValueChanged += PoleynRight_UpDown;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= FootLeft_UpDown;
                    BoneUpDown2.ValueChanged += FootLeft_UpDown;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= FootRight_UpDown;
                    BoneUpDown2.ValueChanged += FootRight_UpDown;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Head_UpDown;
                    BoneUpDown2.ValueChanged += Head_UpDown;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ArmLeft_UpDown;
                    BoneUpDown2.ValueChanged += ArmLeft_UpDown;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ArmRight_UpDown;
                    BoneUpDown2.ValueChanged += ArmRight_UpDown;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PauldronLeft_UpDown;
                    BoneUpDown2.ValueChanged += PauldronLeft_UpDown;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PauldronRight_UpDown;
                    BoneUpDown2.ValueChanged += PauldronRight_UpDown;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Unknown00_UpDown;
                    BoneUpDown2.ValueChanged += Unknown00_UpDown;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ToesLeft_UpDown;
                    BoneUpDown2.ValueChanged += ToesLeft_UpDown;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ToesRight_UpDown;
                    BoneUpDown2.ValueChanged += ToesRight_UpDown;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HairA_UpDown;
                    BoneUpDown2.ValueChanged += HairA_UpDown;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HairFrontLeft_UpDown;
                    BoneUpDown2.ValueChanged += HairFrontLeft_UpDown;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HairFrontRight_UpDown;
                    BoneUpDown2.ValueChanged += HairFrontRight_UpDown;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarLeft_UpDown;
                    BoneUpDown2.ValueChanged += EarLeft_UpDown;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarRight_UpDown;
                    BoneUpDown2.ValueChanged += EarRight_UpDown;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ForearmLeft_UpDown;
                    BoneUpDown2.ValueChanged += ForearmLeft_UpDown;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ForearmRight_UpDown;
                    BoneUpDown2.ValueChanged += ForearmRight_UpDown;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ShoulderLeft_UpDown;
                    BoneUpDown2.ValueChanged += ShoulderLeft_UpDown;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ShoulderRight_UpDown;
                    BoneUpDown2.ValueChanged += ShoulderRight_UpDown;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HairB_UpDown;
                    BoneUpDown2.ValueChanged += HairB_UpDown;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HandLeft_UpDown;
                    BoneUpDown2.ValueChanged += HandLeft_UpDown;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HandRight_UpDown;
                    BoneUpDown2.ValueChanged += HandRight_UpDown;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ShieldLeft_UpDown;
                    BoneUpDown2.ValueChanged += ShieldLeft_UpDown;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ShieldRight_UpDown;
                    BoneUpDown2.ValueChanged += ShieldRight_UpDown;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarringALeft_UpDown;
                    BoneUpDown2.ValueChanged += EarringALeft_UpDown;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarringARight_UpDown;
                    BoneUpDown2.ValueChanged += EarringARight_UpDown;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ElbowLeft_UpDown;
                    BoneUpDown2.ValueChanged += ElbowLeft_UpDown;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ElbowRight_UpDown;
                    BoneUpDown2.ValueChanged += ElbowRight_UpDown;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CouterLeft_UpDown;
                    BoneUpDown2.ValueChanged += CouterLeft_UpDown;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CouterRight_UpDown;
                    BoneUpDown2.ValueChanged += CouterRight_UpDown;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= WristLeft_UpDown;
                    BoneUpDown2.ValueChanged += WristLeft_UpDown;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= WristRight_UpDown;
                    BoneUpDown2.ValueChanged += WristRight_UpDown;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= IndexALeft_UpDown;
                    BoneUpDown2.ValueChanged += IndexALeft_UpDown;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= IndexARight_UpDown;
                    BoneUpDown2.ValueChanged += IndexARight_UpDown;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PinkyALeft_UpDown;
                    BoneUpDown2.ValueChanged += PinkyALeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PinkyARight_UpDown;
                    BoneUpDown2.ValueChanged += PinkyARight_UpDown;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RingALeft_UpDown;
                    BoneUpDown2.ValueChanged += RingALeft_UpDown;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RingARight_UpDown;
                    BoneUpDown2.ValueChanged += RingARight_UpDown;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= MiddleALeft_UpDown;
                    BoneUpDown2.ValueChanged += MiddleALeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= MiddleARight_UpDown;
                    BoneUpDown2.ValueChanged += MiddleARight_UpDown;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ThumbALeft_UpDown;
                    BoneUpDown2.ValueChanged += ThumbALeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ThumbARight_UpDown;
                    BoneUpDown2.ValueChanged += ThumbARight_UpDown;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= WeaponLeft_UpDown;
                    BoneUpDown2.ValueChanged += WeaponLeft_UpDown;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= WeaponRight_UpDown;
                    BoneUpDown2.ValueChanged += WeaponRight_UpDown;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarringBLeft_UpDown;
                    BoneUpDown2.ValueChanged += EarringBLeft_UpDown;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarringBRight_UpDown;
                    BoneUpDown2.ValueChanged += EarringBRight_UpDown;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= IndexBLeft_UpDown;
                    BoneUpDown2.ValueChanged += IndexBLeft_UpDown;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= IndexBRight_UpDown;
                    BoneUpDown2.ValueChanged += IndexBRight_UpDown;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PinkyBLeft_UpDown;
                    BoneUpDown2.ValueChanged += PinkyBLeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PinkyBRight_UpDown;
                    BoneUpDown2.ValueChanged += PinkyBRight_UpDown;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RingBLeft_UpDown;
                    BoneUpDown2.ValueChanged += RingBLeft_UpDown;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RingBRight_UpDown;
                    BoneUpDown2.ValueChanged += RingBRight_UpDown;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= MiddleBLeft_UpDown;
                    BoneUpDown2.ValueChanged += MiddleBLeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= MiddleBRight_UpDown;
                    BoneUpDown2.ValueChanged += MiddleBRight_UpDown;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ThumbBLeft_UpDown;
                    BoneUpDown2.ValueChanged += ThumbBLeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ThumbBRight_UpDown;
                    BoneUpDown2.ValueChanged += ThumbBRight_UpDown;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailA_UpDown;
                    BoneUpDown2.ValueChanged += TailA_UpDown;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailB_UpDown;
                    BoneUpDown2.ValueChanged += TailB_UpDown;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailC_UpDown;
                    BoneUpDown2.ValueChanged += TailC_UpDown;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailD_UpDown;
                    BoneUpDown2.ValueChanged += TailD_UpDown;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailE_UpDown;
                    BoneUpDown2.ValueChanged += TailE_UpDown;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RootHead_UpDown;
                    BoneUpDown2.ValueChanged += RootHead_UpDown;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Jaw_UpDown;
                    BoneUpDown2.ValueChanged += Jaw_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyelidLowerLeft_UpDown;
                    BoneUpDown2.ValueChanged += EyelidLowerLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyelidLowerRight_UpDown;
                    BoneUpDown2.ValueChanged += EyelidLowerRight_UpDown;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyeLeft_UpDown;
                    BoneUpDown2.ValueChanged += EyeLeft_UpDown;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyeRight_UpDown;
                    BoneUpDown2.ValueChanged += EyeRight_UpDown;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Nose_UpDown;
                    BoneUpDown2.ValueChanged += Nose_UpDown;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CheekLeft_UpDown;
                    BoneUpDown2.ValueChanged += CheekLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothWhiskersLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothWhiskersLeft_UpDown;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CheekRight_UpDown;
                    BoneUpDown2.ValueChanged += CheekRight_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothWhiskersRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothWhiskersRight_UpDown;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipsLeft_UpDown;
                    BoneUpDown2.ValueChanged += LipsLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothEyebrowLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothEyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipsRight_UpDown;
                    BoneUpDown2.ValueChanged += LipsRight_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothEyebrowRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothEyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyebrowLeft_UpDown;
                    BoneUpDown2.ValueChanged += EyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothBridge_UpDown;
                    BoneUpDown2.ValueChanged += HrothBridge_UpDown;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyebrowRight_UpDown;
                    BoneUpDown2.ValueChanged += EyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothBrowLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothBrowLeft_UpDown;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Bridge_UpDown;
                    BoneUpDown2.ValueChanged += Bridge_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothBrowRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothBrowRight_UpDown;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= BrowLeft_UpDown;
                    BoneUpDown2.ValueChanged += BrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothJawUpper_UpDown;
                    BoneUpDown2.ValueChanged += HrothJawUpper_UpDown;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= BrowRight_UpDown;
                    BoneUpDown2.ValueChanged += BrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipUpper_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipUpper_UpDown;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipUpperA_UpDown;
                    BoneUpDown2.ValueChanged += LipUpperA_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothEyelidUpperLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothEyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyelidUpperLeft_UpDown;
                    BoneUpDown2.ValueChanged += EyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothEyelidUpperRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothEyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyelidUpperRight_UpDown;
                    BoneUpDown2.ValueChanged += EyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipsLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipsLeft_UpDown;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipLowerA_UpDown;
                    BoneUpDown2.ValueChanged += LipLowerA_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipsRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipsRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar01ALeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar01ALeft_UpDown;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipUpperB_UpDown;
                    BoneUpDown2.ValueChanged += LipUpperB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipUpperLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar01ARight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar01ARight_UpDown;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipLowerB_UpDown;
                    BoneUpDown2.ValueChanged += LipLowerB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipUpperRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipUpperRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar02ALeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar02ALeft_UpDown;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipLower_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipLower_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar02ARight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar02ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar03ALeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar03ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar03ARight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar03ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar04ALeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar04ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar04ARight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar04ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraLipLowerA_UpDown;
                    BoneUpDown2.ValueChanged += VieraLipLowerA_UpDown;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraLipUpperB_UpDown;
                    BoneUpDown2.ValueChanged += VieraLipUpperB_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar01BLeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar01BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar01BRight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar01BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar02BLeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar02BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar02BRight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar02BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar03BLeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar03BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar03BRight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar03BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar04BLeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar04BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar04BRight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar04BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraLipLowerB_UpDown;
                    BoneUpDown2.ValueChanged += VieraLipLowerB_UpDown;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairA_UpDown;
                    BoneUpDown2.ValueChanged += ExHairA_UpDown;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairB_UpDown;
                    BoneUpDown2.ValueChanged += ExHairB_UpDown;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairC_UpDown;
                    BoneUpDown2.ValueChanged += ExHairC_UpDown;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairD_UpDown;
                    BoneUpDown2.ValueChanged += ExHairD_UpDown;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairE_UpDown;
                    BoneUpDown2.ValueChanged += ExHairE_UpDown;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairF_UpDown;
                    BoneUpDown2.ValueChanged += ExHairF_UpDown;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairG_UpDown;
                    BoneUpDown2.ValueChanged += ExHairG_UpDown;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairH_UpDown;
                    BoneUpDown2.ValueChanged += ExHairH_UpDown;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairI_UpDown;
                    BoneUpDown2.ValueChanged += ExHairI_UpDown;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairJ_UpDown;
                    BoneUpDown2.ValueChanged += ExHairJ_UpDown;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairK_UpDown;
                    BoneUpDown2.ValueChanged += ExHairK_UpDown;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairL_UpDown;
                    BoneUpDown2.ValueChanged += ExHairL_UpDown;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetA_UpDown;
                    BoneUpDown2.ValueChanged += ExMetA_UpDown;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetB_UpDown;
                    BoneUpDown2.ValueChanged += ExMetB_UpDown;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetC_UpDown;
                    BoneUpDown2.ValueChanged += ExMetC_UpDown;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetD_UpDown;
                    BoneUpDown2.ValueChanged += ExMetD_UpDown;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetE_UpDown;
                    BoneUpDown2.ValueChanged += ExMetE_UpDown;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetF_UpDown;
                    BoneUpDown2.ValueChanged += ExMetF_UpDown;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetG_UpDown;
                    BoneUpDown2.ValueChanged += ExMetG_UpDown;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetH_UpDown;
                    BoneUpDown2.ValueChanged += ExMetH_UpDown;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetI_UpDown;
                    BoneUpDown2.ValueChanged += ExMetI_UpDown;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetJ_UpDown;
                    BoneUpDown2.ValueChanged += ExMetJ_UpDown;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetK_UpDown;
                    BoneUpDown2.ValueChanged += ExMetK_UpDown;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetL_UpDown;
                    BoneUpDown2.ValueChanged += ExMetL_UpDown;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetM_UpDown;
                    BoneUpDown2.ValueChanged += ExMetM_UpDown;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetN_UpDown;
                    BoneUpDown2.ValueChanged += ExMetN_UpDown;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetO_UpDown;
                    BoneUpDown2.ValueChanged += ExMetO_UpDown;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetP_UpDown;
                    BoneUpDown2.ValueChanged += ExMetP_UpDown;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetQ_UpDown;
                    BoneUpDown2.ValueChanged += ExMetQ_UpDown;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetR_UpDown;
                    BoneUpDown2.ValueChanged += ExMetR_UpDown;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopA_UpDown;
                    BoneUpDown2.ValueChanged += ExTopA_UpDown;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopB_UpDown;
                    BoneUpDown2.ValueChanged += ExTopB_UpDown;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopC_UpDown;
                    BoneUpDown2.ValueChanged += ExTopC_UpDown;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopD_UpDown;
                    BoneUpDown2.ValueChanged += ExTopD_UpDown;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopE_UpDown;
                    BoneUpDown2.ValueChanged += ExTopE_UpDown;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopF_UpDown;
                    BoneUpDown2.ValueChanged += ExTopF_UpDown;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopG_UpDown;
                    BoneUpDown2.ValueChanged += ExTopG_UpDown;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopH_UpDown;
                    BoneUpDown2.ValueChanged += ExTopH_UpDown;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopI_UpDown;
                    BoneUpDown2.ValueChanged += ExTopI_UpDown;
                }
            }
        }
        private void BoneUpDown3_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Root_UpDown;
                    BoneUpDown3.ValueChanged += Root_UpDown;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Abdomen_UpDown;
                    BoneUpDown3.ValueChanged += Abdomen_UpDown;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Throw_UpDown;
                    BoneUpDown3.ValueChanged += Throw_UpDown;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Waist_UpDown;
                    BoneUpDown3.ValueChanged += Waist_UpDown;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SpineA_UpDown;
                    BoneUpDown3.ValueChanged += SpineA_UpDown;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LegLeft_UpDown;
                    BoneUpDown3.ValueChanged += LegLeft_UpDown;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LegRight_UpDown;
                    BoneUpDown3.ValueChanged += LegRight_UpDown;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HolsterLeft_UpDown;
                    BoneUpDown3.ValueChanged += HolsterLeft_UpDown;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HolsterRight_UpDown;
                    BoneUpDown3.ValueChanged += HolsterRight_UpDown;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SheatheLeft_UpDown;
                    BoneUpDown3.ValueChanged += SheatheLeft_UpDown;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SheatheRight_UpDown;
                    BoneUpDown3.ValueChanged += SheatheRight_UpDown;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SpineB_UpDown;
                    BoneUpDown3.ValueChanged += SpineB_UpDown;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackALeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackARight_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackARight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontALeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontARight_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontARight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideALeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideARight_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideARight_UpDown;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= KneeLeft_UpDown;
                    BoneUpDown3.ValueChanged += KneeLeft_UpDown;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= KneeRight_UpDown;
                    BoneUpDown3.ValueChanged += KneeRight_UpDown;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= BreastLeft_UpDown;
                    BoneUpDown3.ValueChanged += BreastLeft_UpDown;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= BreastRight_UpDown;
                    BoneUpDown3.ValueChanged += BreastRight_UpDown;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SpineC_UpDown;
                    BoneUpDown3.ValueChanged += SpineC_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackBLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackBRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontBLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontBRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideBLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideBRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideBRight_UpDown;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CalfLeft_UpDown;
                    BoneUpDown3.ValueChanged += CalfLeft_UpDown;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CalfRight_UpDown;
                    BoneUpDown3.ValueChanged += CalfRight_UpDown;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ScabbardLeft_UpDown;
                    BoneUpDown3.ValueChanged += ScabbardLeft_UpDown;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ScabbardRight_UpDown;
                    BoneUpDown3.ValueChanged += ScabbardRight_UpDown;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Neck_UpDown;
                    BoneUpDown3.ValueChanged += Neck_UpDown;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClavicleLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClavicleLeft_UpDown;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClavicleRight_UpDown;
                    BoneUpDown3.ValueChanged += ClavicleRight_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackCLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackCRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontCLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontCRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideCLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideCRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideCRight_UpDown;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PoleynLeft_UpDown;
                    BoneUpDown3.ValueChanged += PoleynLeft_UpDown;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PoleynRight_UpDown;
                    BoneUpDown3.ValueChanged += PoleynRight_UpDown;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= FootLeft_UpDown;
                    BoneUpDown3.ValueChanged += FootLeft_UpDown;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= FootRight_UpDown;
                    BoneUpDown3.ValueChanged += FootRight_UpDown;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Head_UpDown;
                    BoneUpDown3.ValueChanged += Head_UpDown;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ArmLeft_UpDown;
                    BoneUpDown3.ValueChanged += ArmLeft_UpDown;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ArmRight_UpDown;
                    BoneUpDown3.ValueChanged += ArmRight_UpDown;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PauldronLeft_UpDown;
                    BoneUpDown3.ValueChanged += PauldronLeft_UpDown;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PauldronRight_UpDown;
                    BoneUpDown3.ValueChanged += PauldronRight_UpDown;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Unknown00_UpDown;
                    BoneUpDown3.ValueChanged += Unknown00_UpDown;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ToesLeft_UpDown;
                    BoneUpDown3.ValueChanged += ToesLeft_UpDown;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ToesRight_UpDown;
                    BoneUpDown3.ValueChanged += ToesRight_UpDown;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HairA_UpDown;
                    BoneUpDown3.ValueChanged += HairA_UpDown;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HairFrontLeft_UpDown;
                    BoneUpDown3.ValueChanged += HairFrontLeft_UpDown;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HairFrontRight_UpDown;
                    BoneUpDown3.ValueChanged += HairFrontRight_UpDown;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarLeft_UpDown;
                    BoneUpDown3.ValueChanged += EarLeft_UpDown;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarRight_UpDown;
                    BoneUpDown3.ValueChanged += EarRight_UpDown;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ForearmLeft_UpDown;
                    BoneUpDown3.ValueChanged += ForearmLeft_UpDown;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ForearmRight_UpDown;
                    BoneUpDown3.ValueChanged += ForearmRight_UpDown;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ShoulderLeft_UpDown;
                    BoneUpDown3.ValueChanged += ShoulderLeft_UpDown;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ShoulderRight_UpDown;
                    BoneUpDown3.ValueChanged += ShoulderRight_UpDown;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HairB_UpDown;
                    BoneUpDown3.ValueChanged += HairB_UpDown;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HandLeft_UpDown;
                    BoneUpDown3.ValueChanged += HandLeft_UpDown;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HandRight_UpDown;
                    BoneUpDown3.ValueChanged += HandRight_UpDown;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ShieldLeft_UpDown;
                    BoneUpDown3.ValueChanged += ShieldLeft_UpDown;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ShieldRight_UpDown;
                    BoneUpDown3.ValueChanged += ShieldRight_UpDown;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarringALeft_UpDown;
                    BoneUpDown3.ValueChanged += EarringALeft_UpDown;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarringARight_UpDown;
                    BoneUpDown3.ValueChanged += EarringARight_UpDown;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ElbowLeft_UpDown;
                    BoneUpDown3.ValueChanged += ElbowLeft_UpDown;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ElbowRight_UpDown;
                    BoneUpDown3.ValueChanged += ElbowRight_UpDown;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CouterLeft_UpDown;
                    BoneUpDown3.ValueChanged += CouterLeft_UpDown;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CouterRight_UpDown;
                    BoneUpDown3.ValueChanged += CouterRight_UpDown;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= WristLeft_UpDown;
                    BoneUpDown3.ValueChanged += WristLeft_UpDown;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= WristRight_UpDown;
                    BoneUpDown3.ValueChanged += WristRight_UpDown;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= IndexALeft_UpDown;
                    BoneUpDown3.ValueChanged += IndexALeft_UpDown;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= IndexARight_UpDown;
                    BoneUpDown3.ValueChanged += IndexARight_UpDown;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PinkyALeft_UpDown;
                    BoneUpDown3.ValueChanged += PinkyALeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PinkyARight_UpDown;
                    BoneUpDown3.ValueChanged += PinkyARight_UpDown;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RingALeft_UpDown;
                    BoneUpDown3.ValueChanged += RingALeft_UpDown;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RingARight_UpDown;
                    BoneUpDown3.ValueChanged += RingARight_UpDown;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= MiddleALeft_UpDown;
                    BoneUpDown3.ValueChanged += MiddleALeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= MiddleARight_UpDown;
                    BoneUpDown3.ValueChanged += MiddleARight_UpDown;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ThumbALeft_UpDown;
                    BoneUpDown3.ValueChanged += ThumbALeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ThumbARight_UpDown;
                    BoneUpDown3.ValueChanged += ThumbARight_UpDown;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= WeaponLeft_UpDown;
                    BoneUpDown3.ValueChanged += WeaponLeft_UpDown;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= WeaponRight_UpDown;
                    BoneUpDown3.ValueChanged += WeaponRight_UpDown;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarringBLeft_UpDown;
                    BoneUpDown3.ValueChanged += EarringBLeft_UpDown;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarringBRight_UpDown;
                    BoneUpDown3.ValueChanged += EarringBRight_UpDown;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= IndexBLeft_UpDown;
                    BoneUpDown3.ValueChanged += IndexBLeft_UpDown;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= IndexBRight_UpDown;
                    BoneUpDown3.ValueChanged += IndexBRight_UpDown;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PinkyBLeft_UpDown;
                    BoneUpDown3.ValueChanged += PinkyBLeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PinkyBRight_UpDown;
                    BoneUpDown3.ValueChanged += PinkyBRight_UpDown;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RingBLeft_UpDown;
                    BoneUpDown3.ValueChanged += RingBLeft_UpDown;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RingBRight_UpDown;
                    BoneUpDown3.ValueChanged += RingBRight_UpDown;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= MiddleBLeft_UpDown;
                    BoneUpDown3.ValueChanged += MiddleBLeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= MiddleBRight_UpDown;
                    BoneUpDown3.ValueChanged += MiddleBRight_UpDown;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ThumbBLeft_UpDown;
                    BoneUpDown3.ValueChanged += ThumbBLeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ThumbBRight_UpDown;
                    BoneUpDown3.ValueChanged += ThumbBRight_UpDown;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailA_UpDown;
                    BoneUpDown3.ValueChanged += TailA_UpDown;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailB_UpDown;
                    BoneUpDown3.ValueChanged += TailB_UpDown;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailC_UpDown;
                    BoneUpDown3.ValueChanged += TailC_UpDown;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailD_UpDown;
                    BoneUpDown3.ValueChanged += TailD_UpDown;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailE_UpDown;
                    BoneUpDown3.ValueChanged += TailE_UpDown;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RootHead_UpDown;
                    BoneUpDown3.ValueChanged += RootHead_UpDown;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Jaw_UpDown;
                    BoneUpDown3.ValueChanged += Jaw_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyelidLowerLeft_UpDown;
                    BoneUpDown3.ValueChanged += EyelidLowerLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyelidLowerRight_UpDown;
                    BoneUpDown3.ValueChanged += EyelidLowerRight_UpDown;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyeLeft_UpDown;
                    BoneUpDown3.ValueChanged += EyeLeft_UpDown;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyeRight_UpDown;
                    BoneUpDown3.ValueChanged += EyeRight_UpDown;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Nose_UpDown;
                    BoneUpDown3.ValueChanged += Nose_UpDown;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CheekLeft_UpDown;
                    BoneUpDown3.ValueChanged += CheekLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothWhiskersLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothWhiskersLeft_UpDown;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CheekRight_UpDown;
                    BoneUpDown3.ValueChanged += CheekRight_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothWhiskersRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothWhiskersRight_UpDown;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipsLeft_UpDown;
                    BoneUpDown3.ValueChanged += LipsLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothEyebrowLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothEyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipsRight_UpDown;
                    BoneUpDown3.ValueChanged += LipsRight_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothEyebrowRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothEyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyebrowLeft_UpDown;
                    BoneUpDown3.ValueChanged += EyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothBridge_UpDown;
                    BoneUpDown3.ValueChanged += HrothBridge_UpDown;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyebrowRight_UpDown;
                    BoneUpDown3.ValueChanged += EyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothBrowLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothBrowLeft_UpDown;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Bridge_UpDown;
                    BoneUpDown3.ValueChanged += Bridge_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothBrowRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothBrowRight_UpDown;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= BrowLeft_UpDown;
                    BoneUpDown3.ValueChanged += BrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothJawUpper_UpDown;
                    BoneUpDown3.ValueChanged += HrothJawUpper_UpDown;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= BrowRight_UpDown;
                    BoneUpDown3.ValueChanged += BrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipUpper_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipUpper_UpDown;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipUpperA_UpDown;
                    BoneUpDown3.ValueChanged += LipUpperA_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothEyelidUpperLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothEyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyelidUpperLeft_UpDown;
                    BoneUpDown3.ValueChanged += EyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothEyelidUpperRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothEyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyelidUpperRight_UpDown;
                    BoneUpDown3.ValueChanged += EyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipsLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipsLeft_UpDown;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipLowerA_UpDown;
                    BoneUpDown3.ValueChanged += LipLowerA_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipsRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipsRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar01ALeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar01ALeft_UpDown;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipUpperB_UpDown;
                    BoneUpDown3.ValueChanged += LipUpperB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipUpperLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar01ARight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar01ARight_UpDown;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipLowerB_UpDown;
                    BoneUpDown3.ValueChanged += LipLowerB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipUpperRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipUpperRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar02ALeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar02ALeft_UpDown;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipLower_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipLower_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar02ARight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar02ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar03ALeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar03ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar03ARight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar03ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar04ALeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar04ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar04ARight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar04ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraLipLowerA_UpDown;
                    BoneUpDown3.ValueChanged += VieraLipLowerA_UpDown;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraLipUpperB_UpDown;
                    BoneUpDown3.ValueChanged += VieraLipUpperB_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar01BLeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar01BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar01BRight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar01BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar02BLeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar02BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar02BRight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar02BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar03BLeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar03BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar03BRight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar03BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar04BLeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar04BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar04BRight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar04BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraLipLowerB_UpDown;
                    BoneUpDown3.ValueChanged += VieraLipLowerB_UpDown;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairA_UpDown;
                    BoneUpDown3.ValueChanged += ExHairA_UpDown;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairB_UpDown;
                    BoneUpDown3.ValueChanged += ExHairB_UpDown;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairC_UpDown;
                    BoneUpDown3.ValueChanged += ExHairC_UpDown;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairD_UpDown;
                    BoneUpDown3.ValueChanged += ExHairD_UpDown;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairE_UpDown;
                    BoneUpDown3.ValueChanged += ExHairE_UpDown;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairF_UpDown;
                    BoneUpDown3.ValueChanged += ExHairF_UpDown;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairG_UpDown;
                    BoneUpDown3.ValueChanged += ExHairG_UpDown;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairH_UpDown;
                    BoneUpDown3.ValueChanged += ExHairH_UpDown;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairI_UpDown;
                    BoneUpDown3.ValueChanged += ExHairI_UpDown;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairJ_UpDown;
                    BoneUpDown3.ValueChanged += ExHairJ_UpDown;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairK_UpDown;
                    BoneUpDown3.ValueChanged += ExHairK_UpDown;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairL_UpDown;
                    BoneUpDown3.ValueChanged += ExHairL_UpDown;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetA_UpDown;
                    BoneUpDown3.ValueChanged += ExMetA_UpDown;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetB_UpDown;
                    BoneUpDown3.ValueChanged += ExMetB_UpDown;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetC_UpDown;
                    BoneUpDown3.ValueChanged += ExMetC_UpDown;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetD_UpDown;
                    BoneUpDown3.ValueChanged += ExMetD_UpDown;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetE_UpDown;
                    BoneUpDown3.ValueChanged += ExMetE_UpDown;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetF_UpDown;
                    BoneUpDown3.ValueChanged += ExMetF_UpDown;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetG_UpDown;
                    BoneUpDown3.ValueChanged += ExMetG_UpDown;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetH_UpDown;
                    BoneUpDown3.ValueChanged += ExMetH_UpDown;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetI_UpDown;
                    BoneUpDown3.ValueChanged += ExMetI_UpDown;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetJ_UpDown;
                    BoneUpDown3.ValueChanged += ExMetJ_UpDown;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetK_UpDown;
                    BoneUpDown3.ValueChanged += ExMetK_UpDown;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetL_UpDown;
                    BoneUpDown3.ValueChanged += ExMetL_UpDown;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetM_UpDown;
                    BoneUpDown3.ValueChanged += ExMetM_UpDown;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetN_UpDown;
                    BoneUpDown3.ValueChanged += ExMetN_UpDown;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetO_UpDown;
                    BoneUpDown3.ValueChanged += ExMetO_UpDown;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetP_UpDown;
                    BoneUpDown3.ValueChanged += ExMetP_UpDown;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetQ_UpDown;
                    BoneUpDown3.ValueChanged += ExMetQ_UpDown;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetR_UpDown;
                    BoneUpDown3.ValueChanged += ExMetR_UpDown;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopA_UpDown;
                    BoneUpDown3.ValueChanged += ExTopA_UpDown;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopB_UpDown;
                    BoneUpDown3.ValueChanged += ExTopB_UpDown;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopC_UpDown;
                    BoneUpDown3.ValueChanged += ExTopC_UpDown;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopD_UpDown;
                    BoneUpDown3.ValueChanged += ExTopD_UpDown;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopE_UpDown;
                    BoneUpDown3.ValueChanged += ExTopE_UpDown;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopF_UpDown;
                    BoneUpDown3.ValueChanged += ExTopF_UpDown;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopG_UpDown;
                    BoneUpDown3.ValueChanged += ExTopG_UpDown;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopH_UpDown;
                    BoneUpDown3.ValueChanged += ExTopH_UpDown;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopI_UpDown;
                    BoneUpDown3.ValueChanged += ExTopI_UpDown;
                }
            }
        }
        #endregion

        private void BoneSliderButton_Checked(object sender, RoutedEventArgs e)
        {
            BoneUpDown.Visibility = Visibility.Hidden;
            BoneUpDown.IsEnabled = false;
            BoneUpDown2.Visibility = Visibility.Hidden;
            BoneUpDown2.IsEnabled = false;
            BoneUpDown3.Visibility = Visibility.Hidden;
            BoneUpDown3.IsEnabled = false;

            BoneSlider.Visibility = Visibility.Visible;
            BoneSlider.IsEnabled = true;
            BoneSlider2.Visibility = Visibility.Visible;
            BoneSlider2.IsEnabled = true;
            BoneSlider3.Visibility = Visibility.Visible;
            BoneSlider3.IsEnabled = true;
        }
        private void BoneSliderButton_Unchecked(object sender, RoutedEventArgs e)
        {
            BoneUpDown.Visibility = Visibility.Visible;
            BoneUpDown.IsEnabled = true;
            BoneUpDown2.Visibility = Visibility.Visible;
            BoneUpDown2.IsEnabled = true;
            BoneUpDown3.Visibility = Visibility.Visible;
            BoneUpDown3.IsEnabled = true;

            BoneSlider.Visibility = Visibility.Hidden;
            BoneSlider.IsEnabled = false;
            BoneSlider2.Visibility = Visibility.Hidden;
            BoneSlider2.IsEnabled = false;
            BoneSlider3.Visibility = Visibility.Hidden;
            BoneSlider3.IsEnabled = false;
        }

        #region Root
        private void Root_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Root_X.value = (float)quat.X;
            CharacterDetails.Root_Y.value = (float)quat.Y;
            CharacterDetails.Root_Z.value = (float)quat.Z;
            CharacterDetails.Root_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Root_Slider;
            BoneSlider2.ValueChanged -= Root_Slider;
            BoneSlider3.ValueChanged -= Root_Slider;
        }

        private void Root_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Root_X.value = (float)quat.X;
            CharacterDetails.Root_Y.value = (float)quat.Y;
            CharacterDetails.Root_Z.value = (float)quat.Z;
            CharacterDetails.Root_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Root_UpDown;
            BoneUpDown2.ValueChanged -= Root_UpDown;
            BoneUpDown3.ValueChanged -= Root_UpDown;
        }

        public void Root_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Root);

            //Load Current Values for Slider
            CharacterDetails.Root_Toggle = true;
        }
        private void Root_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Root_Rotate = false;
        }
        #endregion
        #region Abdomen
        private void Abdomen_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Abdomen_X.value = (float)quat.X;
            CharacterDetails.Abdomen_Y.value = (float)quat.Y;
            CharacterDetails.Abdomen_Z.value = (float)quat.Z;
            CharacterDetails.Abdomen_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Abdomen_Slider;
            BoneSlider2.ValueChanged -= Abdomen_Slider;
            BoneSlider3.ValueChanged -= Abdomen_Slider;
        }

        private void Abdomen_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Abdomen_X.value = (float)quat.X;
            CharacterDetails.Abdomen_Y.value = (float)quat.Y;
            CharacterDetails.Abdomen_Z.value = (float)quat.Z;
            CharacterDetails.Abdomen_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Abdomen_UpDown;
            BoneUpDown2.ValueChanged -= Abdomen_UpDown;
            BoneUpDown3.ValueChanged -= Abdomen_UpDown;
        }

        public void Abdomen_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Abdomen);

            //Load Current Values for Slider
            CharacterDetails.Abdomen_Toggle = true;
        }
        private void Abdomen_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Abdomen_Rotate = false;
        }
        #endregion
        #region Throw
        private void Throw_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Throw_X.value = (float)quat.X;
            CharacterDetails.Throw_Y.value = (float)quat.Y;
            CharacterDetails.Throw_Z.value = (float)quat.Z;
            CharacterDetails.Throw_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Throw_Slider;
            BoneSlider2.ValueChanged -= Throw_Slider;
            BoneSlider3.ValueChanged -= Throw_Slider;
        }

        private void Throw_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Throw_X.value = (float)quat.X;
            CharacterDetails.Throw_Y.value = (float)quat.Y;
            CharacterDetails.Throw_Z.value = (float)quat.Z;
            CharacterDetails.Throw_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Throw_UpDown;
            BoneUpDown2.ValueChanged -= Throw_UpDown;
            BoneUpDown3.ValueChanged -= Throw_UpDown;
        }

        public void Throw_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Throw);

            //Load Current Values for Slider
            CharacterDetails.Throw_Toggle = true;
        }
        private void Throw_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Throw_Rotate = false;
        }
        #endregion
        #region Waist
        private void Waist_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Waist_X.value = (float)quat.X;
            CharacterDetails.Waist_Y.value = (float)quat.Y;
            CharacterDetails.Waist_Z.value = (float)quat.Z;
            CharacterDetails.Waist_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Waist_Slider;
            BoneSlider2.ValueChanged -= Waist_Slider;
            BoneSlider3.ValueChanged -= Waist_Slider;
        }

        private void Waist_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Waist_X.value = (float)quat.X;
            CharacterDetails.Waist_Y.value = (float)quat.Y;
            CharacterDetails.Waist_Z.value = (float)quat.Z;
            CharacterDetails.Waist_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Waist_UpDown;
            BoneUpDown2.ValueChanged -= Waist_UpDown;
            BoneUpDown3.ValueChanged -= Waist_UpDown;
        }

        public void Waist_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Waist);

            //Load Current Values for Slider
            CharacterDetails.Waist_Toggle = true;
        }
        private void Waist_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Waist_Rotate = false;
        }
        #endregion
        #region SpineA
        private void SpineA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SpineA_X.value = (float)quat.X;
            CharacterDetails.SpineA_Y.value = (float)quat.Y;
            CharacterDetails.SpineA_Z.value = (float)quat.Z;
            CharacterDetails.SpineA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= SpineA_Slider;
            BoneSlider2.ValueChanged -= SpineA_Slider;
            BoneSlider3.ValueChanged -= SpineA_Slider;
        }

        private void SpineA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SpineA_X.value = (float)quat.X;
            CharacterDetails.SpineA_Y.value = (float)quat.Y;
            CharacterDetails.SpineA_Z.value = (float)quat.Z;
            CharacterDetails.SpineA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= SpineA_UpDown;
            BoneUpDown2.ValueChanged -= SpineA_UpDown;
            BoneUpDown3.ValueChanged -= SpineA_UpDown;
        }

        public void SpineA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SpineA);

            //Load Current Values for Slider
            CharacterDetails.SpineA_Toggle = true;
        }
        private void SpineA_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SpineA_Rotate = false;
        }
        #endregion
        #region LegLeft
        private void LegLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LegLeft_X.value = (float)quat.X;
            CharacterDetails.LegLeft_Y.value = (float)quat.Y;
            CharacterDetails.LegLeft_Z.value = (float)quat.Z;
            CharacterDetails.LegLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= LegLeft_Slider;
            BoneSlider2.ValueChanged -= LegLeft_Slider;
            BoneSlider3.ValueChanged -= LegLeft_Slider;
        }

        private void LegLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LegLeft_X.value = (float)quat.X;
            CharacterDetails.LegLeft_Y.value = (float)quat.Y;
            CharacterDetails.LegLeft_Z.value = (float)quat.Z;
            CharacterDetails.LegLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= LegLeft_UpDown;
            BoneUpDown2.ValueChanged -= LegLeft_UpDown;
            BoneUpDown3.ValueChanged -= LegLeft_UpDown;
        }

        public void LegLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LegLeft);

            //Load Current Values for Slider
            CharacterDetails.LegLeft_Toggle = true;
        }
        private void LegLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.LegLeft_Rotate = false;
        }
        #endregion
        #region LegRight
        private void LegRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LegRight_X.value = (float)quat.X;
            CharacterDetails.LegRight_Y.value = (float)quat.Y;
            CharacterDetails.LegRight_Z.value = (float)quat.Z;
            CharacterDetails.LegRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= LegRight_Slider;
            BoneSlider2.ValueChanged -= LegRight_Slider;
            BoneSlider3.ValueChanged -= LegRight_Slider;
        }

        private void LegRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LegRight_X.value = (float)quat.X;
            CharacterDetails.LegRight_Y.value = (float)quat.Y;
            CharacterDetails.LegRight_Z.value = (float)quat.Z;
            CharacterDetails.LegRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= LegRight_UpDown;
            BoneUpDown2.ValueChanged -= LegRight_UpDown;
            BoneUpDown3.ValueChanged -= LegRight_UpDown;
        }

        public void LegRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LegRight);

            //Load Current Values for Slider
            CharacterDetails.LegRight_Toggle = true;
        }
        private void LegRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.LegRight_Rotate = false;
        }
        #endregion
        #region HolsterLeft
        private void HolsterLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HolsterLeft_X.value = (float)quat.X;
            CharacterDetails.HolsterLeft_Y.value = (float)quat.Y;
            CharacterDetails.HolsterLeft_Z.value = (float)quat.Z;
            CharacterDetails.HolsterLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HolsterLeft_Slider;
            BoneSlider2.ValueChanged -= HolsterLeft_Slider;
            BoneSlider3.ValueChanged -= HolsterLeft_Slider;
        }

        private void HolsterLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HolsterLeft_X.value = (float)quat.X;
            CharacterDetails.HolsterLeft_Y.value = (float)quat.Y;
            CharacterDetails.HolsterLeft_Z.value = (float)quat.Z;
            CharacterDetails.HolsterLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HolsterLeft_UpDown;
            BoneUpDown2.ValueChanged -= HolsterLeft_UpDown;
            BoneUpDown3.ValueChanged -= HolsterLeft_UpDown;
        }

        public void HolsterLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HolsterLeft);

            //Load Current Values for Slider
            CharacterDetails.HolsterLeft_Toggle = true;
        }
        private void HolsterLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HolsterLeft_Rotate = false;
        }
        #endregion
        #region HolsterRight
        private void HolsterRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HolsterRight_X.value = (float)quat.X;
            CharacterDetails.HolsterRight_Y.value = (float)quat.Y;
            CharacterDetails.HolsterRight_Z.value = (float)quat.Z;
            CharacterDetails.HolsterRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HolsterRight_Slider;
            BoneSlider2.ValueChanged -= HolsterRight_Slider;
            BoneSlider3.ValueChanged -= HolsterRight_Slider;
        }

        private void HolsterRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HolsterRight_X.value = (float)quat.X;
            CharacterDetails.HolsterRight_Y.value = (float)quat.Y;
            CharacterDetails.HolsterRight_Z.value = (float)quat.Z;
            CharacterDetails.HolsterRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HolsterRight_UpDown;
            BoneUpDown2.ValueChanged -= HolsterRight_UpDown;
            BoneUpDown3.ValueChanged -= HolsterRight_UpDown;
        }

        public void HolsterRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HolsterRight);

            //Load Current Values for Slider
            CharacterDetails.HolsterRight_Toggle = true;
        }
        private void HolsterRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HolsterRight_Rotate = false;
        }
        #endregion
        #region SheatheLeft
        private void SheatheLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SheatheLeft_X.value = (float)quat.X;
            CharacterDetails.SheatheLeft_Y.value = (float)quat.Y;
            CharacterDetails.SheatheLeft_Z.value = (float)quat.Z;
            CharacterDetails.SheatheLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= SheatheLeft_Slider;
            BoneSlider2.ValueChanged -= SheatheLeft_Slider;
            BoneSlider3.ValueChanged -= SheatheLeft_Slider;
        }

        private void SheatheLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SheatheLeft_X.value = (float)quat.X;
            CharacterDetails.SheatheLeft_Y.value = (float)quat.Y;
            CharacterDetails.SheatheLeft_Z.value = (float)quat.Z;
            CharacterDetails.SheatheLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= SheatheLeft_UpDown;
            BoneUpDown2.ValueChanged -= SheatheLeft_UpDown;
            BoneUpDown3.ValueChanged -= SheatheLeft_UpDown;
        }

        public void SheatheLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SheatheLeft);

            //Load Current Values for Slider
            CharacterDetails.SheatheLeft_Toggle = true;
        }
        private void SheatheLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SheatheLeft_Rotate = false;
        }
        #endregion
        #region SheatheRight
        private void SheatheRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SheatheRight_X.value = (float)quat.X;
            CharacterDetails.SheatheRight_Y.value = (float)quat.Y;
            CharacterDetails.SheatheRight_Z.value = (float)quat.Z;
            CharacterDetails.SheatheRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= SheatheRight_Slider;
            BoneSlider2.ValueChanged -= SheatheRight_Slider;
            BoneSlider3.ValueChanged -= SheatheRight_Slider;
        }

        private void SheatheRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SheatheRight_X.value = (float)quat.X;
            CharacterDetails.SheatheRight_Y.value = (float)quat.Y;
            CharacterDetails.SheatheRight_Z.value = (float)quat.Z;
            CharacterDetails.SheatheRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= SheatheRight_UpDown;
            BoneUpDown2.ValueChanged -= SheatheRight_UpDown;
            BoneUpDown3.ValueChanged -= SheatheRight_UpDown;
        }

        public void SheatheRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SheatheRight);

            //Load Current Values for Slider
            CharacterDetails.SheatheRight_Toggle = true;
        }
        private void SheatheRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SheatheRight_Rotate = false;
        }
        #endregion
        #region SpineB
        private void SpineB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SpineB_X.value = (float)quat.X;
            CharacterDetails.SpineB_Y.value = (float)quat.Y;
            CharacterDetails.SpineB_Z.value = (float)quat.Z;
            CharacterDetails.SpineB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= SpineB_Slider;
            BoneSlider2.ValueChanged -= SpineB_Slider;
            BoneSlider3.ValueChanged -= SpineB_Slider;
        }

        private void SpineB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SpineB_X.value = (float)quat.X;
            CharacterDetails.SpineB_Y.value = (float)quat.Y;
            CharacterDetails.SpineB_Z.value = (float)quat.Z;
            CharacterDetails.SpineB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= SpineB_UpDown;
            BoneUpDown2.ValueChanged -= SpineB_UpDown;
            BoneUpDown3.ValueChanged -= SpineB_UpDown;
        }

        public void SpineB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SpineB);

            //Load Current Values for Slider
            CharacterDetails.SpineB_Toggle = true;
        }
        private void SpineB_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SpineB_Rotate = false;
        }
        #endregion
        #region ClothBackALeft
        private void ClothBackALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackALeft_X.value = (float)quat.X;
            CharacterDetails.ClothBackALeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackALeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothBackALeft_Slider;
            BoneSlider2.ValueChanged -= ClothBackALeft_Slider;
            BoneSlider3.ValueChanged -= ClothBackALeft_Slider;
        }

        private void ClothBackALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackALeft_X.value = (float)quat.X;
            CharacterDetails.ClothBackALeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackALeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothBackALeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothBackALeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothBackALeft_UpDown;
        }

        public void ClothBackALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackALeft);

            //Load Current Values for Slider
            CharacterDetails.ClothBackALeft_Toggle = true;
        }
        private void ClothBackALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothBackALeft_Rotate = false;
        }
        #endregion
        #region ClothBackARight
        private void ClothBackARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackARight_X.value = (float)quat.X;
            CharacterDetails.ClothBackARight_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackARight_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothBackARight_Slider;
            BoneSlider2.ValueChanged -= ClothBackARight_Slider;
            BoneSlider3.ValueChanged -= ClothBackARight_Slider;
        }

        private void ClothBackARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackARight_X.value = (float)quat.X;
            CharacterDetails.ClothBackARight_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackARight_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothBackARight_UpDown;
            BoneUpDown2.ValueChanged -= ClothBackARight_UpDown;
            BoneUpDown3.ValueChanged -= ClothBackARight_UpDown;
        }

        public void ClothBackARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackARight);

            //Load Current Values for Slider
            CharacterDetails.ClothBackARight_Toggle = true;
        }
        private void ClothBackARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothBackARight_Rotate = false;
        }
        #endregion
        #region ClothFrontALeft
        private void ClothFrontALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontALeft_X.value = (float)quat.X;
            CharacterDetails.ClothFrontALeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontALeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothFrontALeft_Slider;
            BoneSlider2.ValueChanged -= ClothFrontALeft_Slider;
            BoneSlider3.ValueChanged -= ClothFrontALeft_Slider;
        }

        private void ClothFrontALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontALeft_X.value = (float)quat.X;
            CharacterDetails.ClothFrontALeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontALeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothFrontALeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothFrontALeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothFrontALeft_UpDown;
        }

        public void ClothFrontALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontALeft);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontALeft_Toggle = true;
        }
        private void ClothFrontALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothFrontALeft_Rotate = false;
        }
        #endregion
        #region ClothFrontARight
        private void ClothFrontARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontARight_X.value = (float)quat.X;
            CharacterDetails.ClothFrontARight_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontARight_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothFrontARight_Slider;
            BoneSlider2.ValueChanged -= ClothFrontARight_Slider;
            BoneSlider3.ValueChanged -= ClothFrontARight_Slider;
        }

        private void ClothFrontARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontARight_X.value = (float)quat.X;
            CharacterDetails.ClothFrontARight_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontARight_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothFrontARight_UpDown;
            BoneUpDown2.ValueChanged -= ClothFrontARight_UpDown;
            BoneUpDown3.ValueChanged -= ClothFrontARight_UpDown;
        }

        public void ClothFrontARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontARight);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontARight_Toggle = true;
        }
        private void ClothFrontARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothFrontARight_Rotate = false;
        }
        #endregion
        #region ClothSideALeft
        private void ClothSideALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideALeft_X.value = (float)quat.X;
            CharacterDetails.ClothSideALeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideALeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothSideALeft_Slider;
            BoneSlider2.ValueChanged -= ClothSideALeft_Slider;
            BoneSlider3.ValueChanged -= ClothSideALeft_Slider;
        }

        private void ClothSideALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideALeft_X.value = (float)quat.X;
            CharacterDetails.ClothSideALeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideALeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothSideALeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothSideALeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothSideALeft_UpDown;
        }

        public void ClothSideALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideALeft);

            //Load Current Values for Slider
            CharacterDetails.ClothSideALeft_Toggle = true;
        }
        private void ClothSideALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothSideALeft_Rotate = false;
        }
        #endregion
        #region ClothSideARight
        private void ClothSideARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideARight_X.value = (float)quat.X;
            CharacterDetails.ClothSideARight_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideARight_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothSideARight_Slider;
            BoneSlider2.ValueChanged -= ClothSideARight_Slider;
            BoneSlider3.ValueChanged -= ClothSideARight_Slider;
        }

        private void ClothSideARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideARight_X.value = (float)quat.X;
            CharacterDetails.ClothSideARight_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideARight_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothSideARight_UpDown;
            BoneUpDown2.ValueChanged -= ClothSideARight_UpDown;
            BoneUpDown3.ValueChanged -= ClothSideARight_UpDown;
        }

        public void ClothSideARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideARight);

            //Load Current Values for Slider
            CharacterDetails.ClothSideARight_Toggle = true;
        }
        private void ClothSideARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothSideARight_Rotate = false;
        }
        #endregion
        #region KneeLeft
        private void KneeLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.KneeLeft_X.value = (float)quat.X;
            CharacterDetails.KneeLeft_Y.value = (float)quat.Y;
            CharacterDetails.KneeLeft_Z.value = (float)quat.Z;
            CharacterDetails.KneeLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= KneeLeft_Slider;
            BoneSlider2.ValueChanged -= KneeLeft_Slider;
            BoneSlider3.ValueChanged -= KneeLeft_Slider;
        }

        private void KneeLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.KneeLeft_X.value = (float)quat.X;
            CharacterDetails.KneeLeft_Y.value = (float)quat.Y;
            CharacterDetails.KneeLeft_Z.value = (float)quat.Z;
            CharacterDetails.KneeLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= KneeLeft_UpDown;
            BoneUpDown2.ValueChanged -= KneeLeft_UpDown;
            BoneUpDown3.ValueChanged -= KneeLeft_UpDown;
        }

        public void KneeLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(KneeLeft);

            //Load Current Values for Slider
            CharacterDetails.KneeLeft_Toggle = true;
        }
        private void KneeLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.KneeLeft_Rotate = false;
        }
        #endregion
        #region KneeRight
        private void KneeRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.KneeRight_X.value = (float)quat.X;
            CharacterDetails.KneeRight_Y.value = (float)quat.Y;
            CharacterDetails.KneeRight_Z.value = (float)quat.Z;
            CharacterDetails.KneeRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= KneeRight_Slider;
            BoneSlider2.ValueChanged -= KneeRight_Slider;
            BoneSlider3.ValueChanged -= KneeRight_Slider;
        }

        private void KneeRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.KneeRight_X.value = (float)quat.X;
            CharacterDetails.KneeRight_Y.value = (float)quat.Y;
            CharacterDetails.KneeRight_Z.value = (float)quat.Z;
            CharacterDetails.KneeRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= KneeRight_UpDown;
            BoneUpDown2.ValueChanged -= KneeRight_UpDown;
            BoneUpDown3.ValueChanged -= KneeRight_UpDown;
        }

        public void KneeRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(KneeRight);

            //Load Current Values for Slider
            CharacterDetails.KneeRight_Toggle = true;
        }
        private void KneeRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.KneeRight_Rotate = false;
        }
        #endregion
        #region BreastLeft
        private void BreastLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.BreastLeft_X.value = (float)quat.X;
            CharacterDetails.BreastLeft_Y.value = (float)quat.Y;
            CharacterDetails.BreastLeft_Z.value = (float)quat.Z;
            CharacterDetails.BreastLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= BreastLeft_Slider;
            BoneSlider2.ValueChanged -= BreastLeft_Slider;
            BoneSlider3.ValueChanged -= BreastLeft_Slider;
        }

        private void BreastLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.BreastLeft_X.value = (float)quat.X;
            CharacterDetails.BreastLeft_Y.value = (float)quat.Y;
            CharacterDetails.BreastLeft_Z.value = (float)quat.Z;
            CharacterDetails.BreastLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= BreastLeft_UpDown;
            BoneUpDown2.ValueChanged -= BreastLeft_UpDown;
            BoneUpDown3.ValueChanged -= BreastLeft_UpDown;
        }

        public void BreastLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(BreastLeft);

            //Load Current Values for Slider
            CharacterDetails.BreastLeft_Toggle = true;
        }
        private void BreastLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.BreastLeft_Rotate = false;
        }
        #endregion
        #region BreastRight
        private void BreastRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.BreastRight_X.value = (float)quat.X;
            CharacterDetails.BreastRight_Y.value = (float)quat.Y;
            CharacterDetails.BreastRight_Z.value = (float)quat.Z;
            CharacterDetails.BreastRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= BreastRight_Slider;
            BoneSlider2.ValueChanged -= BreastRight_Slider;
            BoneSlider3.ValueChanged -= BreastRight_Slider;
        }

        private void BreastRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.BreastRight_X.value = (float)quat.X;
            CharacterDetails.BreastRight_Y.value = (float)quat.Y;
            CharacterDetails.BreastRight_Z.value = (float)quat.Z;
            CharacterDetails.BreastRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= BreastRight_UpDown;
            BoneUpDown2.ValueChanged -= BreastRight_UpDown;
            BoneUpDown3.ValueChanged -= BreastRight_UpDown;
        }

        public void BreastRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(BreastRight);

            //Load Current Values for Slider
            CharacterDetails.BreastRight_Toggle = true;
        }
        private void BreastRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.BreastRight_Rotate = false;
        }
        #endregion
        #region SpineC
        private void SpineC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SpineC_X.value = (float)quat.X;
            CharacterDetails.SpineC_Y.value = (float)quat.Y;
            CharacterDetails.SpineC_Z.value = (float)quat.Z;
            CharacterDetails.SpineC_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= SpineC_Slider;
            BoneSlider2.ValueChanged -= SpineC_Slider;
            BoneSlider3.ValueChanged -= SpineC_Slider;
        }

        private void SpineC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.SpineC_X.value = (float)quat.X;
            CharacterDetails.SpineC_Y.value = (float)quat.Y;
            CharacterDetails.SpineC_Z.value = (float)quat.Z;
            CharacterDetails.SpineC_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= SpineC_UpDown;
            BoneUpDown2.ValueChanged -= SpineC_UpDown;
            BoneUpDown3.ValueChanged -= SpineC_UpDown;
        }

        public void SpineC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SpineC);

            //Load Current Values for Slider
            CharacterDetails.SpineC_Toggle = true;
        }
        private void SpineC_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SpineC_Rotate = false;
        }
        #endregion
        #region ClothBackBLeft
        private void ClothBackBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackBLeft_X.value = (float)quat.X;
            CharacterDetails.ClothBackBLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackBLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothBackBLeft_Slider;
            BoneSlider2.ValueChanged -= ClothBackBLeft_Slider;
            BoneSlider3.ValueChanged -= ClothBackBLeft_Slider;
        }

        private void ClothBackBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackBLeft_X.value = (float)quat.X;
            CharacterDetails.ClothBackBLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackBLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothBackBLeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothBackBLeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothBackBLeft_UpDown;
        }

        public void ClothBackBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackBLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothBackBLeft_Toggle = true;
        }
        private void ClothBackBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothBackBLeft_Rotate = false;
        }
        #endregion
        #region ClothBackBRight
        private void ClothBackBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackBRight_X.value = (float)quat.X;
            CharacterDetails.ClothBackBRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackBRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothBackBRight_Slider;
            BoneSlider2.ValueChanged -= ClothBackBRight_Slider;
            BoneSlider3.ValueChanged -= ClothBackBRight_Slider;
        }

        private void ClothBackBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackBRight_X.value = (float)quat.X;
            CharacterDetails.ClothBackBRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackBRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothBackBRight_UpDown;
            BoneUpDown2.ValueChanged -= ClothBackBRight_UpDown;
            BoneUpDown3.ValueChanged -= ClothBackBRight_UpDown;
        }

        public void ClothBackBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackBRight);

            //Load Current Values for Slider
            CharacterDetails.ClothBackBRight_Toggle = true;
        }
        private void ClothBackBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothBackBRight_Rotate = false;
        }
        #endregion
        #region ClothFrontBLeft
        private void ClothFrontBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontBLeft_X.value = (float)quat.X;
            CharacterDetails.ClothFrontBLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontBLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothFrontBLeft_Slider;
            BoneSlider2.ValueChanged -= ClothFrontBLeft_Slider;
            BoneSlider3.ValueChanged -= ClothFrontBLeft_Slider;
        }

        private void ClothFrontBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontBLeft_X.value = (float)quat.X;
            CharacterDetails.ClothFrontBLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontBLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothFrontBLeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothFrontBLeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothFrontBLeft_UpDown;
        }

        public void ClothFrontBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontBLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontBLeft_Toggle = true;
        }
        private void ClothFrontBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothFrontBLeft_Rotate = false;
        }
        #endregion
        #region ClothFrontBRight
        private void ClothFrontBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontBRight_X.value = (float)quat.X;
            CharacterDetails.ClothFrontBRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontBRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothFrontBRight_Slider;
            BoneSlider2.ValueChanged -= ClothFrontBRight_Slider;
            BoneSlider3.ValueChanged -= ClothFrontBRight_Slider;
        }

        private void ClothFrontBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontBRight_X.value = (float)quat.X;
            CharacterDetails.ClothFrontBRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontBRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothFrontBRight_UpDown;
            BoneUpDown2.ValueChanged -= ClothFrontBRight_UpDown;
            BoneUpDown3.ValueChanged -= ClothFrontBRight_UpDown;
        }

        public void ClothFrontBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontBRight);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontBRight_Toggle = true;
        }
        private void ClothFrontBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothFrontBRight_Rotate = false;
        }
        #endregion
        #region ClothSideBLeft
        private void ClothSideBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideBLeft_X.value = (float)quat.X;
            CharacterDetails.ClothSideBLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideBLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothSideBLeft_Slider;
            BoneSlider2.ValueChanged -= ClothSideBLeft_Slider;
            BoneSlider3.ValueChanged -= ClothSideBLeft_Slider;
        }

        private void ClothSideBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideBLeft_X.value = (float)quat.X;
            CharacterDetails.ClothSideBLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideBLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothSideBLeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothSideBLeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothSideBLeft_UpDown;
        }

        public void ClothSideBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideBLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothSideBLeft_Toggle = true;
        }
        private void ClothSideBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothSideBLeft_Rotate = false;
        }
        #endregion
        #region ClothSideBRight
        private void ClothSideBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideBRight_X.value = (float)quat.X;
            CharacterDetails.ClothSideBRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideBRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothSideBRight_Slider;
            BoneSlider2.ValueChanged -= ClothSideBRight_Slider;
            BoneSlider3.ValueChanged -= ClothSideBRight_Slider;
        }

        private void ClothSideBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideBRight_X.value = (float)quat.X;
            CharacterDetails.ClothSideBRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideBRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothSideBRight_UpDown;
            BoneUpDown2.ValueChanged -= ClothSideBRight_UpDown;
            BoneUpDown3.ValueChanged -= ClothSideBRight_UpDown;
        }

        public void ClothSideBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideBRight);

            //Load Current Values for Slider
            CharacterDetails.ClothSideBRight_Toggle = true;
        }
        private void ClothSideBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothSideBRight_Rotate = false;
        }
        #endregion
        #region CalfLeft
        private void CalfLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CalfLeft_X.value = (float)quat.X;
            CharacterDetails.CalfLeft_Y.value = (float)quat.Y;
            CharacterDetails.CalfLeft_Z.value = (float)quat.Z;
            CharacterDetails.CalfLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= CalfLeft_Slider;
            BoneSlider2.ValueChanged -= CalfLeft_Slider;
            BoneSlider3.ValueChanged -= CalfLeft_Slider;
        }

        private void CalfLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CalfLeft_X.value = (float)quat.X;
            CharacterDetails.CalfLeft_Y.value = (float)quat.Y;
            CharacterDetails.CalfLeft_Z.value = (float)quat.Z;
            CharacterDetails.CalfLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= CalfLeft_UpDown;
            BoneUpDown2.ValueChanged -= CalfLeft_UpDown;
            BoneUpDown3.ValueChanged -= CalfLeft_UpDown;
        }

        public void CalfLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CalfLeft);

            //Load Current Values for Slider
            CharacterDetails.CalfLeft_Toggle = true;
        }
        private void CalfLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.CalfLeft_Rotate = false;
        }
        #endregion
        #region CalfRight
        private void CalfRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CalfRight_X.value = (float)quat.X;
            CharacterDetails.CalfRight_Y.value = (float)quat.Y;
            CharacterDetails.CalfRight_Z.value = (float)quat.Z;
            CharacterDetails.CalfRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= CalfRight_Slider;
            BoneSlider2.ValueChanged -= CalfRight_Slider;
            BoneSlider3.ValueChanged -= CalfRight_Slider;
        }

        private void CalfRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CalfRight_X.value = (float)quat.X;
            CharacterDetails.CalfRight_Y.value = (float)quat.Y;
            CharacterDetails.CalfRight_Z.value = (float)quat.Z;
            CharacterDetails.CalfRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= CalfRight_UpDown;
            BoneUpDown2.ValueChanged -= CalfRight_UpDown;
            BoneUpDown3.ValueChanged -= CalfRight_UpDown;
        }

        public void CalfRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CalfRight);

            //Load Current Values for Slider
            CharacterDetails.CalfRight_Toggle = true;
        }
        private void CalfRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.CalfRight_Rotate = false;
        }
        #endregion
        #region ScabbardLeft
        private void ScabbardLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ScabbardLeft_X.value = (float)quat.X;
            CharacterDetails.ScabbardLeft_Y.value = (float)quat.Y;
            CharacterDetails.ScabbardLeft_Z.value = (float)quat.Z;
            CharacterDetails.ScabbardLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ScabbardLeft_Slider;
            BoneSlider2.ValueChanged -= ScabbardLeft_Slider;
            BoneSlider3.ValueChanged -= ScabbardLeft_Slider;
        }

        private void ScabbardLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ScabbardLeft_X.value = (float)quat.X;
            CharacterDetails.ScabbardLeft_Y.value = (float)quat.Y;
            CharacterDetails.ScabbardLeft_Z.value = (float)quat.Z;
            CharacterDetails.ScabbardLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ScabbardLeft_UpDown;
            BoneUpDown2.ValueChanged -= ScabbardLeft_UpDown;
            BoneUpDown3.ValueChanged -= ScabbardLeft_UpDown;
        }

        public void ScabbardLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ScabbardLeft);

            //Load Current Values for Slider
            CharacterDetails.ScabbardLeft_Toggle = true;
        }
        private void ScabbardLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ScabbardLeft_Rotate = false;
        }
        #endregion
        #region ScabbardRight
        private void ScabbardRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ScabbardRight_X.value = (float)quat.X;
            CharacterDetails.ScabbardRight_Y.value = (float)quat.Y;
            CharacterDetails.ScabbardRight_Z.value = (float)quat.Z;
            CharacterDetails.ScabbardRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ScabbardRight_Slider;
            BoneSlider2.ValueChanged -= ScabbardRight_Slider;
            BoneSlider3.ValueChanged -= ScabbardRight_Slider;
        }

        private void ScabbardRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ScabbardRight_X.value = (float)quat.X;
            CharacterDetails.ScabbardRight_Y.value = (float)quat.Y;
            CharacterDetails.ScabbardRight_Z.value = (float)quat.Z;
            CharacterDetails.ScabbardRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ScabbardRight_UpDown;
            BoneUpDown2.ValueChanged -= ScabbardRight_UpDown;
            BoneUpDown3.ValueChanged -= ScabbardRight_UpDown;
        }

        public void ScabbardRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ScabbardRight);

            //Load Current Values for Slider
            CharacterDetails.ScabbardRight_Toggle = true;
        }
        private void ScabbardRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ScabbardRight_Rotate = false;
        }
        #endregion
        #region Neck
        private void Neck_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Neck_X.value = (float)quat.X;
            CharacterDetails.Neck_Y.value = (float)quat.Y;
            CharacterDetails.Neck_Z.value = (float)quat.Z;
            CharacterDetails.Neck_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Neck_Slider;
            BoneSlider2.ValueChanged -= Neck_Slider;
            BoneSlider3.ValueChanged -= Neck_Slider;
        }

        private void Neck_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Neck_X.value = (float)quat.X;
            CharacterDetails.Neck_Y.value = (float)quat.Y;
            CharacterDetails.Neck_Z.value = (float)quat.Z;
            CharacterDetails.Neck_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Neck_UpDown;
            BoneUpDown2.ValueChanged -= Neck_UpDown;
            BoneUpDown3.ValueChanged -= Neck_UpDown;
        }

        public void Neck_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Neck);

            //Load Current Values for Slider
            CharacterDetails.Neck_Toggle = true;
        }
        private void Neck_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Neck_Rotate = false;
        }
        #endregion
        #region ClavicleLeft
        private void ClavicleLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClavicleLeft_X.value = (float)quat.X;
            CharacterDetails.ClavicleLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClavicleLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClavicleLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClavicleLeft_Slider;
            BoneSlider2.ValueChanged -= ClavicleLeft_Slider;
            BoneSlider3.ValueChanged -= ClavicleLeft_Slider;
        }

        private void ClavicleLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClavicleLeft_X.value = (float)quat.X;
            CharacterDetails.ClavicleLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClavicleLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClavicleLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClavicleLeft_UpDown;
            BoneUpDown2.ValueChanged -= ClavicleLeft_UpDown;
            BoneUpDown3.ValueChanged -= ClavicleLeft_UpDown;
        }

        public void ClavicleLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClavicleLeft);

            //Load Current Values for Slider
            CharacterDetails.ClavicleLeft_Toggle = true;
        }
        private void ClavicleLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClavicleLeft_Rotate = false;
        }
        #endregion
        #region ClavicleRight
        private void ClavicleRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClavicleRight_X.value = (float)quat.X;
            CharacterDetails.ClavicleRight_Y.value = (float)quat.Y;
            CharacterDetails.ClavicleRight_Z.value = (float)quat.Z;
            CharacterDetails.ClavicleRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClavicleRight_Slider;
            BoneSlider2.ValueChanged -= ClavicleRight_Slider;
            BoneSlider3.ValueChanged -= ClavicleRight_Slider;
        }

        private void ClavicleRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClavicleRight_X.value = (float)quat.X;
            CharacterDetails.ClavicleRight_Y.value = (float)quat.Y;
            CharacterDetails.ClavicleRight_Z.value = (float)quat.Z;
            CharacterDetails.ClavicleRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClavicleRight_UpDown;
            BoneUpDown2.ValueChanged -= ClavicleRight_UpDown;
            BoneUpDown3.ValueChanged -= ClavicleRight_UpDown;
        }

        public void ClavicleRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClavicleRight);

            //Load Current Values for Slider
            CharacterDetails.ClavicleRight_Toggle = true;
        }
        private void ClavicleRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClavicleRight_Rotate = false;
        }
        #endregion
        #region ClothBackCLeft
        private void ClothBackCLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackCLeft_X.value = (float)quat.X;
            CharacterDetails.ClothBackCLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackCLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackCLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothBackCLeft_Slider;
            BoneSlider2.ValueChanged -= ClothBackCLeft_Slider;
            BoneSlider3.ValueChanged -= ClothBackCLeft_Slider;
        }

        private void ClothBackCLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackCLeft_X.value = (float)quat.X;
            CharacterDetails.ClothBackCLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackCLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackCLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothBackCLeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothBackCLeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothBackCLeft_UpDown;
        }

        public void ClothBackCLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackCLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothBackCLeft_Toggle = true;
        }
        private void ClothBackCLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothBackCLeft_Rotate = false;
        }
        #endregion
        #region ClothBackCRight
        private void ClothBackCRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackCRight_X.value = (float)quat.X;
            CharacterDetails.ClothBackCRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackCRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackCRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothBackCRight_Slider;
            BoneSlider2.ValueChanged -= ClothBackCRight_Slider;
            BoneSlider3.ValueChanged -= ClothBackCRight_Slider;
        }

        private void ClothBackCRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothBackCRight_X.value = (float)quat.X;
            CharacterDetails.ClothBackCRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothBackCRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothBackCRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothBackCRight_UpDown;
            BoneUpDown2.ValueChanged -= ClothBackCRight_UpDown;
            BoneUpDown3.ValueChanged -= ClothBackCRight_UpDown;
        }

        public void ClothBackCRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackCRight);

            //Load Current Values for Slider
            CharacterDetails.ClothBackCRight_Toggle = true;
        }
        private void ClothBackCRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothBackCRight_Rotate = false;
        }
        #endregion
        #region ClothFrontCLeft
        private void ClothFrontCLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontCLeft_X.value = (float)quat.X;
            CharacterDetails.ClothFrontCLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontCLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontCLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothFrontCLeft_Slider;
            BoneSlider2.ValueChanged -= ClothFrontCLeft_Slider;
            BoneSlider3.ValueChanged -= ClothFrontCLeft_Slider;
        }

        private void ClothFrontCLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontCLeft_X.value = (float)quat.X;
            CharacterDetails.ClothFrontCLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontCLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontCLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothFrontCLeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothFrontCLeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothFrontCLeft_UpDown;
        }

        public void ClothFrontCLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontCLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontCLeft_Toggle = true;
        }
        private void ClothFrontCLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothFrontCLeft_Rotate = false;
        }
        #endregion
        #region ClothFrontCRight
        private void ClothFrontCRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontCRight_X.value = (float)quat.X;
            CharacterDetails.ClothFrontCRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontCRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontCRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothFrontCRight_Slider;
            BoneSlider2.ValueChanged -= ClothFrontCRight_Slider;
            BoneSlider3.ValueChanged -= ClothFrontCRight_Slider;
        }

        private void ClothFrontCRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothFrontCRight_X.value = (float)quat.X;
            CharacterDetails.ClothFrontCRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothFrontCRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothFrontCRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothFrontCRight_UpDown;
            BoneUpDown2.ValueChanged -= ClothFrontCRight_UpDown;
            BoneUpDown3.ValueChanged -= ClothFrontCRight_UpDown;
        }

        public void ClothFrontCRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontCRight);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontCRight_Toggle = true;
        }
        private void ClothFrontCRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothFrontCRight_Rotate = false;
        }
        #endregion
        #region ClothSideCLeft
        private void ClothSideCLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideCLeft_X.value = (float)quat.X;
            CharacterDetails.ClothSideCLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideCLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideCLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothSideCLeft_Slider;
            BoneSlider2.ValueChanged -= ClothSideCLeft_Slider;
            BoneSlider3.ValueChanged -= ClothSideCLeft_Slider;
        }

        private void ClothSideCLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideCLeft_X.value = (float)quat.X;
            CharacterDetails.ClothSideCLeft_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideCLeft_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideCLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothSideCLeft_UpDown;
            BoneUpDown2.ValueChanged -= ClothSideCLeft_UpDown;
            BoneUpDown3.ValueChanged -= ClothSideCLeft_UpDown;
        }

        public void ClothSideCLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideCLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothSideCLeft_Toggle = true;
        }
        private void ClothSideCLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothSideCLeft_Rotate = false;
        }
        #endregion
        #region ClothSideCRight
        private void ClothSideCRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideCRight_X.value = (float)quat.X;
            CharacterDetails.ClothSideCRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideCRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideCRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ClothSideCRight_Slider;
            BoneSlider2.ValueChanged -= ClothSideCRight_Slider;
            BoneSlider3.ValueChanged -= ClothSideCRight_Slider;
        }

        private void ClothSideCRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ClothSideCRight_X.value = (float)quat.X;
            CharacterDetails.ClothSideCRight_Y.value = (float)quat.Y;
            CharacterDetails.ClothSideCRight_Z.value = (float)quat.Z;
            CharacterDetails.ClothSideCRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ClothSideCRight_UpDown;
            BoneUpDown2.ValueChanged -= ClothSideCRight_UpDown;
            BoneUpDown3.ValueChanged -= ClothSideCRight_UpDown;
        }

        public void ClothSideCRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideCRight);

            //Load Current Values for Slider
            CharacterDetails.ClothSideCRight_Toggle = true;
        }
        private void ClothSideCRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ClothSideCRight_Rotate = false;
        }
        #endregion
        #region PoleynLeft
        private void PoleynLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PoleynLeft_X.value = (float)quat.X;
            CharacterDetails.PoleynLeft_Y.value = (float)quat.Y;
            CharacterDetails.PoleynLeft_Z.value = (float)quat.Z;
            CharacterDetails.PoleynLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= PoleynLeft_Slider;
            BoneSlider2.ValueChanged -= PoleynLeft_Slider;
            BoneSlider3.ValueChanged -= PoleynLeft_Slider;
        }

        private void PoleynLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PoleynLeft_X.value = (float)quat.X;
            CharacterDetails.PoleynLeft_Y.value = (float)quat.Y;
            CharacterDetails.PoleynLeft_Z.value = (float)quat.Z;
            CharacterDetails.PoleynLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= PoleynLeft_UpDown;
            BoneUpDown2.ValueChanged -= PoleynLeft_UpDown;
            BoneUpDown3.ValueChanged -= PoleynLeft_UpDown;
        }

        public void PoleynLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PoleynLeft);

            //Load Current Values for Slider
            CharacterDetails.PoleynLeft_Toggle = true;
        }
        private void PoleynLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.PoleynLeft_Rotate = false;
        }
        #endregion
        #region PoleynRight
        private void PoleynRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PoleynRight_X.value = (float)quat.X;
            CharacterDetails.PoleynRight_Y.value = (float)quat.Y;
            CharacterDetails.PoleynRight_Z.value = (float)quat.Z;
            CharacterDetails.PoleynRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= PoleynRight_Slider;
            BoneSlider2.ValueChanged -= PoleynRight_Slider;
            BoneSlider3.ValueChanged -= PoleynRight_Slider;
        }

        private void PoleynRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PoleynRight_X.value = (float)quat.X;
            CharacterDetails.PoleynRight_Y.value = (float)quat.Y;
            CharacterDetails.PoleynRight_Z.value = (float)quat.Z;
            CharacterDetails.PoleynRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= PoleynRight_UpDown;
            BoneUpDown2.ValueChanged -= PoleynRight_UpDown;
            BoneUpDown3.ValueChanged -= PoleynRight_UpDown;
        }

        public void PoleynRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PoleynRight);

            //Load Current Values for Slider
            CharacterDetails.PoleynRight_Toggle = true;
        }
        private void PoleynRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.PoleynRight_Rotate = false;
        }
        #endregion
        #region FootLeft
        private void FootLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.FootLeft_X.value = (float)quat.X;
            CharacterDetails.FootLeft_Y.value = (float)quat.Y;
            CharacterDetails.FootLeft_Z.value = (float)quat.Z;
            CharacterDetails.FootLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= FootLeft_Slider;
            BoneSlider2.ValueChanged -= FootLeft_Slider;
            BoneSlider3.ValueChanged -= FootLeft_Slider;
        }

        private void FootLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.FootLeft_X.value = (float)quat.X;
            CharacterDetails.FootLeft_Y.value = (float)quat.Y;
            CharacterDetails.FootLeft_Z.value = (float)quat.Z;
            CharacterDetails.FootLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= FootLeft_UpDown;
            BoneUpDown2.ValueChanged -= FootLeft_UpDown;
            BoneUpDown3.ValueChanged -= FootLeft_UpDown;
        }

        public void FootLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(FootLeft);

            //Load Current Values for Slider
            CharacterDetails.FootLeft_Toggle = true;
        }
        private void FootLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.FootLeft_Rotate = false;
        }
        #endregion
        #region FootRight
        private void FootRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.FootRight_X.value = (float)quat.X;
            CharacterDetails.FootRight_Y.value = (float)quat.Y;
            CharacterDetails.FootRight_Z.value = (float)quat.Z;
            CharacterDetails.FootRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= FootRight_Slider;
            BoneSlider2.ValueChanged -= FootRight_Slider;
            BoneSlider3.ValueChanged -= FootRight_Slider;
        }

        private void FootRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.FootRight_X.value = (float)quat.X;
            CharacterDetails.FootRight_Y.value = (float)quat.Y;
            CharacterDetails.FootRight_Z.value = (float)quat.Z;
            CharacterDetails.FootRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= FootRight_UpDown;
            BoneUpDown2.ValueChanged -= FootRight_UpDown;
            BoneUpDown3.ValueChanged -= FootRight_UpDown;
        }

        public void FootRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(FootRight);

            //Load Current Values for Slider
            CharacterDetails.FootRight_Toggle = true;
        }
        private void FootRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.FootRight_Rotate = false;
        }
        #endregion
        #region Head
        private void Head_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Head_X.value = (float)quat.X;
            CharacterDetails.Head_Y.value = (float)quat.Y;
            CharacterDetails.Head_Z.value = (float)quat.Z;
            CharacterDetails.Head_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Head_Slider;
            BoneSlider2.ValueChanged -= Head_Slider;
            BoneSlider3.ValueChanged -= Head_Slider;
        }

        private void Head_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Head_X.value = (float)quat.X;
            CharacterDetails.Head_Y.value = (float)quat.Y;
            CharacterDetails.Head_Z.value = (float)quat.Z;
            CharacterDetails.Head_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Head_UpDown;
            BoneUpDown2.ValueChanged -= Head_UpDown;
            BoneUpDown3.ValueChanged -= Head_UpDown;
        }

        public void Head_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Head);

            //Load Current Values for Slider
            CharacterDetails.Head_Toggle = true;
        }
        private void Head_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Head_Rotate = false;
        }
        #endregion
        #region ArmLeft
        private void ArmLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ArmLeft_X.value = (float)quat.X;
            CharacterDetails.ArmLeft_Y.value = (float)quat.Y;
            CharacterDetails.ArmLeft_Z.value = (float)quat.Z;
            CharacterDetails.ArmLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ArmLeft_Slider;
            BoneSlider2.ValueChanged -= ArmLeft_Slider;
            BoneSlider3.ValueChanged -= ArmLeft_Slider;
        }

        private void ArmLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ArmLeft_X.value = (float)quat.X;
            CharacterDetails.ArmLeft_Y.value = (float)quat.Y;
            CharacterDetails.ArmLeft_Z.value = (float)quat.Z;
            CharacterDetails.ArmLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ArmLeft_UpDown;
            BoneUpDown2.ValueChanged -= ArmLeft_UpDown;
            BoneUpDown3.ValueChanged -= ArmLeft_UpDown;
        }

        public void ArmLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ArmLeft);

            //Load Current Values for Slider
            CharacterDetails.ArmLeft_Toggle = true;
        }
        private void ArmLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ArmLeft_Rotate = false;
        }
        #endregion
        #region ArmRight
        private void ArmRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ArmRight_X.value = (float)quat.X;
            CharacterDetails.ArmRight_Y.value = (float)quat.Y;
            CharacterDetails.ArmRight_Z.value = (float)quat.Z;
            CharacterDetails.ArmRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ArmRight_Slider;
            BoneSlider2.ValueChanged -= ArmRight_Slider;
            BoneSlider3.ValueChanged -= ArmRight_Slider;
        }

        private void ArmRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ArmRight_X.value = (float)quat.X;
            CharacterDetails.ArmRight_Y.value = (float)quat.Y;
            CharacterDetails.ArmRight_Z.value = (float)quat.Z;
            CharacterDetails.ArmRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ArmRight_UpDown;
            BoneUpDown2.ValueChanged -= ArmRight_UpDown;
            BoneUpDown3.ValueChanged -= ArmRight_UpDown;
        }

        public void ArmRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ArmRight);

            //Load Current Values for Slider
            CharacterDetails.ArmRight_Toggle = true;
        }
        private void ArmRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ArmRight_Rotate = false;
        }
        #endregion
        #region PauldronLeft
        private void PauldronLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PauldronLeft_X.value = (float)quat.X;
            CharacterDetails.PauldronLeft_Y.value = (float)quat.Y;
            CharacterDetails.PauldronLeft_Z.value = (float)quat.Z;
            CharacterDetails.PauldronLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= PauldronLeft_Slider;
            BoneSlider2.ValueChanged -= PauldronLeft_Slider;
            BoneSlider3.ValueChanged -= PauldronLeft_Slider;
        }

        private void PauldronLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PauldronLeft_X.value = (float)quat.X;
            CharacterDetails.PauldronLeft_Y.value = (float)quat.Y;
            CharacterDetails.PauldronLeft_Z.value = (float)quat.Z;
            CharacterDetails.PauldronLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= PauldronLeft_UpDown;
            BoneUpDown2.ValueChanged -= PauldronLeft_UpDown;
            BoneUpDown3.ValueChanged -= PauldronLeft_UpDown;
        }

        public void PauldronLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PauldronLeft);

            //Load Current Values for Slider
            CharacterDetails.PauldronLeft_Toggle = true;
        }
        private void PauldronLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.PauldronLeft_Rotate = false;
        }
        #endregion
        #region PauldronRight
        private void PauldronRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PauldronRight_X.value = (float)quat.X;
            CharacterDetails.PauldronRight_Y.value = (float)quat.Y;
            CharacterDetails.PauldronRight_Z.value = (float)quat.Z;
            CharacterDetails.PauldronRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= PauldronRight_Slider;
            BoneSlider2.ValueChanged -= PauldronRight_Slider;
            BoneSlider3.ValueChanged -= PauldronRight_Slider;
        }

        private void PauldronRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PauldronRight_X.value = (float)quat.X;
            CharacterDetails.PauldronRight_Y.value = (float)quat.Y;
            CharacterDetails.PauldronRight_Z.value = (float)quat.Z;
            CharacterDetails.PauldronRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= PauldronRight_UpDown;
            BoneUpDown2.ValueChanged -= PauldronRight_UpDown;
            BoneUpDown3.ValueChanged -= PauldronRight_UpDown;
        }

        public void PauldronRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PauldronRight);

            //Load Current Values for Slider
            CharacterDetails.PauldronRight_Toggle = true;
        }
        private void PauldronRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.PauldronRight_Rotate = false;
        }
        #endregion
        #region Unknown00
        private void Unknown00_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Unknown00_X.value = (float)quat.X;
            CharacterDetails.Unknown00_Y.value = (float)quat.Y;
            CharacterDetails.Unknown00_Z.value = (float)quat.Z;
            CharacterDetails.Unknown00_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Unknown00_Slider;
            BoneSlider2.ValueChanged -= Unknown00_Slider;
            BoneSlider3.ValueChanged -= Unknown00_Slider;
        }

        private void Unknown00_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Unknown00_X.value = (float)quat.X;
            CharacterDetails.Unknown00_Y.value = (float)quat.Y;
            CharacterDetails.Unknown00_Z.value = (float)quat.Z;
            CharacterDetails.Unknown00_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Unknown00_UpDown;
            BoneUpDown2.ValueChanged -= Unknown00_UpDown;
            BoneUpDown3.ValueChanged -= Unknown00_UpDown;
        }

        public void Unknown00_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Unknown00);

            //Load Current Values for Slider
            CharacterDetails.Unknown00_Toggle = true;
        }
        private void Unknown00_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Unknown00_Rotate = false;
        }
        #endregion
        #region ToesLeft
        private void ToesLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ToesLeft_X.value = (float)quat.X;
            CharacterDetails.ToesLeft_Y.value = (float)quat.Y;
            CharacterDetails.ToesLeft_Z.value = (float)quat.Z;
            CharacterDetails.ToesLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ToesLeft_Slider;
            BoneSlider2.ValueChanged -= ToesLeft_Slider;
            BoneSlider3.ValueChanged -= ToesLeft_Slider;
        }

        private void ToesLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ToesLeft_X.value = (float)quat.X;
            CharacterDetails.ToesLeft_Y.value = (float)quat.Y;
            CharacterDetails.ToesLeft_Z.value = (float)quat.Z;
            CharacterDetails.ToesLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ToesLeft_UpDown;
            BoneUpDown2.ValueChanged -= ToesLeft_UpDown;
            BoneUpDown3.ValueChanged -= ToesLeft_UpDown;
        }

        public void ToesLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ToesLeft);

            //Load Current Values for Slider
            CharacterDetails.ToesLeft_Toggle = true;
        }
        private void ToesLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ToesLeft_Rotate = false;
        }
        #endregion
        #region ToesRight
        private void ToesRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ToesRight_X.value = (float)quat.X;
            CharacterDetails.ToesRight_Y.value = (float)quat.Y;
            CharacterDetails.ToesRight_Z.value = (float)quat.Z;
            CharacterDetails.ToesRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ToesRight_Slider;
            BoneSlider2.ValueChanged -= ToesRight_Slider;
            BoneSlider3.ValueChanged -= ToesRight_Slider;
        }

        private void ToesRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ToesRight_X.value = (float)quat.X;
            CharacterDetails.ToesRight_Y.value = (float)quat.Y;
            CharacterDetails.ToesRight_Z.value = (float)quat.Z;
            CharacterDetails.ToesRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ToesRight_UpDown;
            BoneUpDown2.ValueChanged -= ToesRight_UpDown;
            BoneUpDown3.ValueChanged -= ToesRight_UpDown;
        }

        public void ToesRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ToesRight);

            //Load Current Values for Slider
            CharacterDetails.ToesRight_Toggle = true;
        }
        private void ToesRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ToesRight_Rotate = false;
        }
        #endregion
        #region HairA
        private void HairA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HairA_X.value = (float)quat.X;
            CharacterDetails.HairA_Y.value = (float)quat.Y;
            CharacterDetails.HairA_Z.value = (float)quat.Z;
            CharacterDetails.HairA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HairA_Slider;
            BoneSlider2.ValueChanged -= HairA_Slider;
            BoneSlider3.ValueChanged -= HairA_Slider;
        }

        private void HairA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HairA_X.value = (float)quat.X;
            CharacterDetails.HairA_Y.value = (float)quat.Y;
            CharacterDetails.HairA_Z.value = (float)quat.Z;
            CharacterDetails.HairA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HairA_UpDown;
            BoneUpDown2.ValueChanged -= HairA_UpDown;
            BoneUpDown3.ValueChanged -= HairA_UpDown;
        }

        public void HairA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HairA);

            //Load Current Values for Slider
            CharacterDetails.HairA_Toggle = true;
        }
        private void HairA_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HairA_Rotate = false;
        }
        #endregion
        #region HairFrontLeft
        private void HairFrontLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HairFrontLeft_X.value = (float)quat.X;
            CharacterDetails.HairFrontLeft_Y.value = (float)quat.Y;
            CharacterDetails.HairFrontLeft_Z.value = (float)quat.Z;
            CharacterDetails.HairFrontLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HairFrontLeft_Slider;
            BoneSlider2.ValueChanged -= HairFrontLeft_Slider;
            BoneSlider3.ValueChanged -= HairFrontLeft_Slider;
        }

        private void HairFrontLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HairFrontLeft_X.value = (float)quat.X;
            CharacterDetails.HairFrontLeft_Y.value = (float)quat.Y;
            CharacterDetails.HairFrontLeft_Z.value = (float)quat.Z;
            CharacterDetails.HairFrontLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HairFrontLeft_UpDown;
            BoneUpDown2.ValueChanged -= HairFrontLeft_UpDown;
            BoneUpDown3.ValueChanged -= HairFrontLeft_UpDown;
        }

        public void HairFrontLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HairFrontLeft);

            //Load Current Values for Slider
            CharacterDetails.HairFrontLeft_Toggle = true;
        }
        private void HairFrontLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HairFrontLeft_Rotate = false;
        }
        #endregion
        #region HairFrontRight
        private void HairFrontRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HairFrontRight_X.value = (float)quat.X;
            CharacterDetails.HairFrontRight_Y.value = (float)quat.Y;
            CharacterDetails.HairFrontRight_Z.value = (float)quat.Z;
            CharacterDetails.HairFrontRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HairFrontRight_Slider;
            BoneSlider2.ValueChanged -= HairFrontRight_Slider;
            BoneSlider3.ValueChanged -= HairFrontRight_Slider;
        }

        private void HairFrontRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HairFrontRight_X.value = (float)quat.X;
            CharacterDetails.HairFrontRight_Y.value = (float)quat.Y;
            CharacterDetails.HairFrontRight_Z.value = (float)quat.Z;
            CharacterDetails.HairFrontRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HairFrontRight_UpDown;
            BoneUpDown2.ValueChanged -= HairFrontRight_UpDown;
            BoneUpDown3.ValueChanged -= HairFrontRight_UpDown;
        }

        public void HairFrontRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HairFrontRight);

            //Load Current Values for Slider
            CharacterDetails.HairFrontRight_Toggle = true;
        }
        private void HairFrontRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HairFrontRight_Rotate = false;
        }
        #endregion
        #region EarLeft
        private void EarLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarLeft_X.value = (float)quat.X;
            CharacterDetails.EarLeft_Y.value = (float)quat.Y;
            CharacterDetails.EarLeft_Z.value = (float)quat.Z;
            CharacterDetails.EarLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EarLeft_Slider;
            BoneSlider2.ValueChanged -= EarLeft_Slider;
            BoneSlider3.ValueChanged -= EarLeft_Slider;
        }

        private void EarLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarLeft_X.value = (float)quat.X;
            CharacterDetails.EarLeft_Y.value = (float)quat.Y;
            CharacterDetails.EarLeft_Z.value = (float)quat.Z;
            CharacterDetails.EarLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EarLeft_UpDown;
            BoneUpDown2.ValueChanged -= EarLeft_UpDown;
            BoneUpDown3.ValueChanged -= EarLeft_UpDown;
        }

        public void EarLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarLeft);

            //Load Current Values for Slider
            CharacterDetails.EarLeft_Toggle = true;
        }
        private void EarLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EarLeft_Rotate = false;
        }
        #endregion
        #region EarRight
        private void EarRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarRight_X.value = (float)quat.X;
            CharacterDetails.EarRight_Y.value = (float)quat.Y;
            CharacterDetails.EarRight_Z.value = (float)quat.Z;
            CharacterDetails.EarRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EarRight_Slider;
            BoneSlider2.ValueChanged -= EarRight_Slider;
            BoneSlider3.ValueChanged -= EarRight_Slider;
        }

        private void EarRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarRight_X.value = (float)quat.X;
            CharacterDetails.EarRight_Y.value = (float)quat.Y;
            CharacterDetails.EarRight_Z.value = (float)quat.Z;
            CharacterDetails.EarRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EarRight_UpDown;
            BoneUpDown2.ValueChanged -= EarRight_UpDown;
            BoneUpDown3.ValueChanged -= EarRight_UpDown;
        }

        public void EarRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarRight);

            //Load Current Values for Slider
            CharacterDetails.EarRight_Toggle = true;
        }
        private void EarRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EarRight_Rotate = false;
        }
        #endregion
        #region ForearmLeft
        private void ForearmLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ForearmLeft_X.value = (float)quat.X;
            CharacterDetails.ForearmLeft_Y.value = (float)quat.Y;
            CharacterDetails.ForearmLeft_Z.value = (float)quat.Z;
            CharacterDetails.ForearmLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ForearmLeft_Slider;
            BoneSlider2.ValueChanged -= ForearmLeft_Slider;
            BoneSlider3.ValueChanged -= ForearmLeft_Slider;
        }

        private void ForearmLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ForearmLeft_X.value = (float)quat.X;
            CharacterDetails.ForearmLeft_Y.value = (float)quat.Y;
            CharacterDetails.ForearmLeft_Z.value = (float)quat.Z;
            CharacterDetails.ForearmLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ForearmLeft_UpDown;
            BoneUpDown2.ValueChanged -= ForearmLeft_UpDown;
            BoneUpDown3.ValueChanged -= ForearmLeft_UpDown;
        }

        public void ForearmLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ForearmLeft);

            //Load Current Values for Slider
            CharacterDetails.ForearmLeft_Toggle = true;
        }
        private void ForearmLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ForearmLeft_Rotate = false;
        }
        #endregion
        #region ForearmRight
        private void ForearmRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ForearmRight_X.value = (float)quat.X;
            CharacterDetails.ForearmRight_Y.value = (float)quat.Y;
            CharacterDetails.ForearmRight_Z.value = (float)quat.Z;
            CharacterDetails.ForearmRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ForearmRight_Slider;
            BoneSlider2.ValueChanged -= ForearmRight_Slider;
            BoneSlider3.ValueChanged -= ForearmRight_Slider;
        }

        private void ForearmRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ForearmRight_X.value = (float)quat.X;
            CharacterDetails.ForearmRight_Y.value = (float)quat.Y;
            CharacterDetails.ForearmRight_Z.value = (float)quat.Z;
            CharacterDetails.ForearmRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ForearmRight_UpDown;
            BoneUpDown2.ValueChanged -= ForearmRight_UpDown;
            BoneUpDown3.ValueChanged -= ForearmRight_UpDown;
        }

        public void ForearmRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ForearmRight);

            //Load Current Values for Slider
            CharacterDetails.ForearmRight_Toggle = true;
        }
        private void ForearmRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ForearmRight_Rotate = false;
        }
        #endregion
        #region ShoulderLeft
        private void ShoulderLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ShoulderLeft_X.value = (float)quat.X;
            CharacterDetails.ShoulderLeft_Y.value = (float)quat.Y;
            CharacterDetails.ShoulderLeft_Z.value = (float)quat.Z;
            CharacterDetails.ShoulderLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ShoulderLeft_Slider;
            BoneSlider2.ValueChanged -= ShoulderLeft_Slider;
            BoneSlider3.ValueChanged -= ShoulderLeft_Slider;
        }

        private void ShoulderLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ShoulderLeft_X.value = (float)quat.X;
            CharacterDetails.ShoulderLeft_Y.value = (float)quat.Y;
            CharacterDetails.ShoulderLeft_Z.value = (float)quat.Z;
            CharacterDetails.ShoulderLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ShoulderLeft_UpDown;
            BoneUpDown2.ValueChanged -= ShoulderLeft_UpDown;
            BoneUpDown3.ValueChanged -= ShoulderLeft_UpDown;
        }

        public void ShoulderLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ShoulderLeft);

            //Load Current Values for Slider
            CharacterDetails.ShoulderLeft_Toggle = true;
        }
        private void ShoulderLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ShoulderLeft_Rotate = false;
        }
        #endregion
        #region ShoulderRight
        private void ShoulderRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ShoulderRight_X.value = (float)quat.X;
            CharacterDetails.ShoulderRight_Y.value = (float)quat.Y;
            CharacterDetails.ShoulderRight_Z.value = (float)quat.Z;
            CharacterDetails.ShoulderRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ShoulderRight_Slider;
            BoneSlider2.ValueChanged -= ShoulderRight_Slider;
            BoneSlider3.ValueChanged -= ShoulderRight_Slider;
        }

        private void ShoulderRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ShoulderRight_X.value = (float)quat.X;
            CharacterDetails.ShoulderRight_Y.value = (float)quat.Y;
            CharacterDetails.ShoulderRight_Z.value = (float)quat.Z;
            CharacterDetails.ShoulderRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ShoulderRight_UpDown;
            BoneUpDown2.ValueChanged -= ShoulderRight_UpDown;
            BoneUpDown3.ValueChanged -= ShoulderRight_UpDown;
        }

        public void ShoulderRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ShoulderRight);

            //Load Current Values for Slider
            CharacterDetails.ShoulderRight_Toggle = true;
        }
        private void ShoulderRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ShoulderRight_Rotate = false;
        }
        #endregion
        #region HairB
        private void HairB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HairB_X.value = (float)quat.X;
            CharacterDetails.HairB_Y.value = (float)quat.Y;
            CharacterDetails.HairB_Z.value = (float)quat.Z;
            CharacterDetails.HairB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HairB_Slider;
            BoneSlider2.ValueChanged -= HairB_Slider;
            BoneSlider3.ValueChanged -= HairB_Slider;
        }

        private void HairB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HairB_X.value = (float)quat.X;
            CharacterDetails.HairB_Y.value = (float)quat.Y;
            CharacterDetails.HairB_Z.value = (float)quat.Z;
            CharacterDetails.HairB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HairB_UpDown;
            BoneUpDown2.ValueChanged -= HairB_UpDown;
            BoneUpDown3.ValueChanged -= HairB_UpDown;
        }

        public void HairB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HairB);

            //Load Current Values for Slider
            CharacterDetails.HairB_Toggle = true;
        }
        private void HairB_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HairB_Rotate = false;
        }
        #endregion
        #region HandLeft
        private void HandLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HandLeft_X.value = (float)quat.X;
            CharacterDetails.HandLeft_Y.value = (float)quat.Y;
            CharacterDetails.HandLeft_Z.value = (float)quat.Z;
            CharacterDetails.HandLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HandLeft_Slider;
            BoneSlider2.ValueChanged -= HandLeft_Slider;
            BoneSlider3.ValueChanged -= HandLeft_Slider;
        }

        private void HandLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HandLeft_X.value = (float)quat.X;
            CharacterDetails.HandLeft_Y.value = (float)quat.Y;
            CharacterDetails.HandLeft_Z.value = (float)quat.Z;
            CharacterDetails.HandLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HandLeft_UpDown;
            BoneUpDown2.ValueChanged -= HandLeft_UpDown;
            BoneUpDown3.ValueChanged -= HandLeft_UpDown;
        }

        public void HandLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HandLeft);

            //Load Current Values for Slider
            CharacterDetails.HandLeft_Toggle = true;
        }
        private void HandLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HandLeft_Rotate = false;
        }
        #endregion
        #region HandRight
        private void HandRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HandRight_X.value = (float)quat.X;
            CharacterDetails.HandRight_Y.value = (float)quat.Y;
            CharacterDetails.HandRight_Z.value = (float)quat.Z;
            CharacterDetails.HandRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HandRight_Slider;
            BoneSlider2.ValueChanged -= HandRight_Slider;
            BoneSlider3.ValueChanged -= HandRight_Slider;
        }

        private void HandRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HandRight_X.value = (float)quat.X;
            CharacterDetails.HandRight_Y.value = (float)quat.Y;
            CharacterDetails.HandRight_Z.value = (float)quat.Z;
            CharacterDetails.HandRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HandRight_UpDown;
            BoneUpDown2.ValueChanged -= HandRight_UpDown;
            BoneUpDown3.ValueChanged -= HandRight_UpDown;
        }

        public void HandRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HandRight);

            //Load Current Values for Slider
            CharacterDetails.HandRight_Toggle = true;
        }
        private void HandRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HandRight_Rotate = false;
        }
        #endregion
        #region ShieldLeft
        private void ShieldLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ShieldLeft_X.value = (float)quat.X;
            CharacterDetails.ShieldLeft_Y.value = (float)quat.Y;
            CharacterDetails.ShieldLeft_Z.value = (float)quat.Z;
            CharacterDetails.ShieldLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ShieldLeft_Slider;
            BoneSlider2.ValueChanged -= ShieldLeft_Slider;
            BoneSlider3.ValueChanged -= ShieldLeft_Slider;
        }

        private void ShieldLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ShieldLeft_X.value = (float)quat.X;
            CharacterDetails.ShieldLeft_Y.value = (float)quat.Y;
            CharacterDetails.ShieldLeft_Z.value = (float)quat.Z;
            CharacterDetails.ShieldLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ShieldLeft_UpDown;
            BoneUpDown2.ValueChanged -= ShieldLeft_UpDown;
            BoneUpDown3.ValueChanged -= ShieldLeft_UpDown;
        }

        public void ShieldLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ShieldLeft);

            //Load Current Values for Slider
            CharacterDetails.ShieldLeft_Toggle = true;
        }
        private void ShieldLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ShieldLeft_Rotate = false;
        }
        #endregion
        #region ShieldRight
        private void ShieldRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ShieldRight_X.value = (float)quat.X;
            CharacterDetails.ShieldRight_Y.value = (float)quat.Y;
            CharacterDetails.ShieldRight_Z.value = (float)quat.Z;
            CharacterDetails.ShieldRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ShieldRight_Slider;
            BoneSlider2.ValueChanged -= ShieldRight_Slider;
            BoneSlider3.ValueChanged -= ShieldRight_Slider;
        }

        private void ShieldRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ShieldRight_X.value = (float)quat.X;
            CharacterDetails.ShieldRight_Y.value = (float)quat.Y;
            CharacterDetails.ShieldRight_Z.value = (float)quat.Z;
            CharacterDetails.ShieldRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ShieldRight_UpDown;
            BoneUpDown2.ValueChanged -= ShieldRight_UpDown;
            BoneUpDown3.ValueChanged -= ShieldRight_UpDown;
        }

        public void ShieldRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ShieldRight);

            //Load Current Values for Slider
            CharacterDetails.ShieldRight_Toggle = true;
        }
        private void ShieldRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ShieldRight_Rotate = false;
        }
        #endregion
        #region EarringALeft
        private void EarringALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarringALeft_X.value = (float)quat.X;
            CharacterDetails.EarringALeft_Y.value = (float)quat.Y;
            CharacterDetails.EarringALeft_Z.value = (float)quat.Z;
            CharacterDetails.EarringALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EarringALeft_Slider;
            BoneSlider2.ValueChanged -= EarringALeft_Slider;
            BoneSlider3.ValueChanged -= EarringALeft_Slider;
        }

        private void EarringALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarringALeft_X.value = (float)quat.X;
            CharacterDetails.EarringALeft_Y.value = (float)quat.Y;
            CharacterDetails.EarringALeft_Z.value = (float)quat.Z;
            CharacterDetails.EarringALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EarringALeft_UpDown;
            BoneUpDown2.ValueChanged -= EarringALeft_UpDown;
            BoneUpDown3.ValueChanged -= EarringALeft_UpDown;
        }

        public void EarringALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarringALeft);

            //Load Current Values for Slider
            CharacterDetails.EarringALeft_Toggle = true;
        }
        private void EarringALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EarringALeft_Rotate = false;
        }
        #endregion
        #region EarringARight
        private void EarringARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarringARight_X.value = (float)quat.X;
            CharacterDetails.EarringARight_Y.value = (float)quat.Y;
            CharacterDetails.EarringARight_Z.value = (float)quat.Z;
            CharacterDetails.EarringARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EarringARight_Slider;
            BoneSlider2.ValueChanged -= EarringARight_Slider;
            BoneSlider3.ValueChanged -= EarringARight_Slider;
        }

        private void EarringARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarringARight_X.value = (float)quat.X;
            CharacterDetails.EarringARight_Y.value = (float)quat.Y;
            CharacterDetails.EarringARight_Z.value = (float)quat.Z;
            CharacterDetails.EarringARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EarringARight_UpDown;
            BoneUpDown2.ValueChanged -= EarringARight_UpDown;
            BoneUpDown3.ValueChanged -= EarringARight_UpDown;
        }

        public void EarringARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarringARight);

            //Load Current Values for Slider
            CharacterDetails.EarringARight_Toggle = true;
        }
        private void EarringARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EarringARight_Rotate = false;
        }
        #endregion
        #region ElbowLeft
        private void ElbowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ElbowLeft_X.value = (float)quat.X;
            CharacterDetails.ElbowLeft_Y.value = (float)quat.Y;
            CharacterDetails.ElbowLeft_Z.value = (float)quat.Z;
            CharacterDetails.ElbowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ElbowLeft_Slider;
            BoneSlider2.ValueChanged -= ElbowLeft_Slider;
            BoneSlider3.ValueChanged -= ElbowLeft_Slider;
        }

        private void ElbowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ElbowLeft_X.value = (float)quat.X;
            CharacterDetails.ElbowLeft_Y.value = (float)quat.Y;
            CharacterDetails.ElbowLeft_Z.value = (float)quat.Z;
            CharacterDetails.ElbowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ElbowLeft_UpDown;
            BoneUpDown2.ValueChanged -= ElbowLeft_UpDown;
            BoneUpDown3.ValueChanged -= ElbowLeft_UpDown;
        }

        public void ElbowLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ElbowLeft);

            //Load Current Values for Slider
            CharacterDetails.ElbowLeft_Toggle = true;
        }
        private void ElbowLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ElbowLeft_Rotate = false;
        }
        #endregion
        #region ElbowRight
        private void ElbowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ElbowRight_X.value = (float)quat.X;
            CharacterDetails.ElbowRight_Y.value = (float)quat.Y;
            CharacterDetails.ElbowRight_Z.value = (float)quat.Z;
            CharacterDetails.ElbowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ElbowRight_Slider;
            BoneSlider2.ValueChanged -= ElbowRight_Slider;
            BoneSlider3.ValueChanged -= ElbowRight_Slider;
        }

        private void ElbowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ElbowRight_X.value = (float)quat.X;
            CharacterDetails.ElbowRight_Y.value = (float)quat.Y;
            CharacterDetails.ElbowRight_Z.value = (float)quat.Z;
            CharacterDetails.ElbowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ElbowRight_UpDown;
            BoneUpDown2.ValueChanged -= ElbowRight_UpDown;
            BoneUpDown3.ValueChanged -= ElbowRight_UpDown;
        }

        public void ElbowRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ElbowRight);

            //Load Current Values for Slider
            CharacterDetails.ElbowRight_Toggle = true;
        }
        private void ElbowRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ElbowRight_Rotate = false;
        }
        #endregion
        #region CouterLeft
        private void CouterLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CouterLeft_X.value = (float)quat.X;
            CharacterDetails.CouterLeft_Y.value = (float)quat.Y;
            CharacterDetails.CouterLeft_Z.value = (float)quat.Z;
            CharacterDetails.CouterLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= CouterLeft_Slider;
            BoneSlider2.ValueChanged -= CouterLeft_Slider;
            BoneSlider3.ValueChanged -= CouterLeft_Slider;
        }

        private void CouterLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CouterLeft_X.value = (float)quat.X;
            CharacterDetails.CouterLeft_Y.value = (float)quat.Y;
            CharacterDetails.CouterLeft_Z.value = (float)quat.Z;
            CharacterDetails.CouterLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= CouterLeft_UpDown;
            BoneUpDown2.ValueChanged -= CouterLeft_UpDown;
            BoneUpDown3.ValueChanged -= CouterLeft_UpDown;
        }

        public void CouterLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CouterLeft);

            //Load Current Values for Slider
            CharacterDetails.CouterLeft_Toggle = true;
        }
        private void CouterLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.CouterLeft_Rotate = false;
        }
        #endregion
        #region CouterRight
        private void CouterRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CouterRight_X.value = (float)quat.X;
            CharacterDetails.CouterRight_Y.value = (float)quat.Y;
            CharacterDetails.CouterRight_Z.value = (float)quat.Z;
            CharacterDetails.CouterRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= CouterRight_Slider;
            BoneSlider2.ValueChanged -= CouterRight_Slider;
            BoneSlider3.ValueChanged -= CouterRight_Slider;
        }

        private void CouterRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CouterRight_X.value = (float)quat.X;
            CharacterDetails.CouterRight_Y.value = (float)quat.Y;
            CharacterDetails.CouterRight_Z.value = (float)quat.Z;
            CharacterDetails.CouterRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= CouterRight_UpDown;
            BoneUpDown2.ValueChanged -= CouterRight_UpDown;
            BoneUpDown3.ValueChanged -= CouterRight_UpDown;
        }

        public void CouterRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CouterRight);

            //Load Current Values for Slider
            CharacterDetails.CouterRight_Toggle = true;
        }
        private void CouterRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.CouterRight_Rotate = false;
        }
        #endregion
        #region WristLeft
        private void WristLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.WristLeft_X.value = (float)quat.X;
            CharacterDetails.WristLeft_Y.value = (float)quat.Y;
            CharacterDetails.WristLeft_Z.value = (float)quat.Z;
            CharacterDetails.WristLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= WristLeft_Slider;
            BoneSlider2.ValueChanged -= WristLeft_Slider;
            BoneSlider3.ValueChanged -= WristLeft_Slider;
        }

        private void WristLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.WristLeft_X.value = (float)quat.X;
            CharacterDetails.WristLeft_Y.value = (float)quat.Y;
            CharacterDetails.WristLeft_Z.value = (float)quat.Z;
            CharacterDetails.WristLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= WristLeft_UpDown;
            BoneUpDown2.ValueChanged -= WristLeft_UpDown;
            BoneUpDown3.ValueChanged -= WristLeft_UpDown;
        }

        public void WristLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(WristLeft);

            //Load Current Values for Slider
            CharacterDetails.WristLeft_Toggle = true;
        }
        private void WristLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.WristLeft_Rotate = false;
        }
        #endregion
        #region WristRight
        private void WristRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.WristRight_X.value = (float)quat.X;
            CharacterDetails.WristRight_Y.value = (float)quat.Y;
            CharacterDetails.WristRight_Z.value = (float)quat.Z;
            CharacterDetails.WristRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= WristRight_Slider;
            BoneSlider2.ValueChanged -= WristRight_Slider;
            BoneSlider3.ValueChanged -= WristRight_Slider;
        }

        private void WristRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.WristRight_X.value = (float)quat.X;
            CharacterDetails.WristRight_Y.value = (float)quat.Y;
            CharacterDetails.WristRight_Z.value = (float)quat.Z;
            CharacterDetails.WristRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= WristRight_UpDown;
            BoneUpDown2.ValueChanged -= WristRight_UpDown;
            BoneUpDown3.ValueChanged -= WristRight_UpDown;
        }

        public void WristRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(WristRight);

            //Load Current Values for Slider
            CharacterDetails.WristRight_Toggle = true;
        }
        private void WristRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.WristRight_Rotate = false;
        }
        #endregion
        #region IndexALeft
        private void IndexALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.IndexALeft_X.value = (float)quat.X;
            CharacterDetails.IndexALeft_Y.value = (float)quat.Y;
            CharacterDetails.IndexALeft_Z.value = (float)quat.Z;
            CharacterDetails.IndexALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= IndexALeft_Slider;
            BoneSlider2.ValueChanged -= IndexALeft_Slider;
            BoneSlider3.ValueChanged -= IndexALeft_Slider;
        }

        private void IndexALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.IndexALeft_X.value = (float)quat.X;
            CharacterDetails.IndexALeft_Y.value = (float)quat.Y;
            CharacterDetails.IndexALeft_Z.value = (float)quat.Z;
            CharacterDetails.IndexALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= IndexALeft_UpDown;
            BoneUpDown2.ValueChanged -= IndexALeft_UpDown;
            BoneUpDown3.ValueChanged -= IndexALeft_UpDown;
        }

        public void IndexALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(IndexALeft);

            //Load Current Values for Slider
            CharacterDetails.IndexALeft_Toggle = true;
        }
        private void IndexALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.IndexALeft_Rotate = false;
        }
        #endregion
        #region IndexARight
        private void IndexARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.IndexARight_X.value = (float)quat.X;
            CharacterDetails.IndexARight_Y.value = (float)quat.Y;
            CharacterDetails.IndexARight_Z.value = (float)quat.Z;
            CharacterDetails.IndexARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= IndexARight_Slider;
            BoneSlider2.ValueChanged -= IndexARight_Slider;
            BoneSlider3.ValueChanged -= IndexARight_Slider;
        }

        private void IndexARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.IndexARight_X.value = (float)quat.X;
            CharacterDetails.IndexARight_Y.value = (float)quat.Y;
            CharacterDetails.IndexARight_Z.value = (float)quat.Z;
            CharacterDetails.IndexARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= IndexARight_UpDown;
            BoneUpDown2.ValueChanged -= IndexARight_UpDown;
            BoneUpDown3.ValueChanged -= IndexARight_UpDown;
        }

        public void IndexARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(IndexARight);

            //Load Current Values for Slider
            CharacterDetails.IndexARight_Toggle = true;
        }
        private void IndexARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.IndexARight_Rotate = false;
        }
        #endregion
        #region PinkyALeft
        private void PinkyALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PinkyALeft_X.value = (float)quat.X;
            CharacterDetails.PinkyALeft_Y.value = (float)quat.Y;
            CharacterDetails.PinkyALeft_Z.value = (float)quat.Z;
            CharacterDetails.PinkyALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= PinkyALeft_Slider;
            BoneSlider2.ValueChanged -= PinkyALeft_Slider;
            BoneSlider3.ValueChanged -= PinkyALeft_Slider;
        }

        private void PinkyALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PinkyALeft_X.value = (float)quat.X;
            CharacterDetails.PinkyALeft_Y.value = (float)quat.Y;
            CharacterDetails.PinkyALeft_Z.value = (float)quat.Z;
            CharacterDetails.PinkyALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= PinkyALeft_UpDown;
            BoneUpDown2.ValueChanged -= PinkyALeft_UpDown;
            BoneUpDown3.ValueChanged -= PinkyALeft_UpDown;
        }

        public void PinkyALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PinkyALeft);

            //Load Current Values for Slider
            CharacterDetails.PinkyALeft_Toggle = true;
        }
        private void PinkyALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.PinkyALeft_Rotate = false;
        }
        #endregion
        #region PinkyARight
        private void PinkyARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PinkyARight_X.value = (float)quat.X;
            CharacterDetails.PinkyARight_Y.value = (float)quat.Y;
            CharacterDetails.PinkyARight_Z.value = (float)quat.Z;
            CharacterDetails.PinkyARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= PinkyARight_Slider;
            BoneSlider2.ValueChanged -= PinkyARight_Slider;
            BoneSlider3.ValueChanged -= PinkyARight_Slider;
        }

        private void PinkyARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PinkyARight_X.value = (float)quat.X;
            CharacterDetails.PinkyARight_Y.value = (float)quat.Y;
            CharacterDetails.PinkyARight_Z.value = (float)quat.Z;
            CharacterDetails.PinkyARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= PinkyARight_UpDown;
            BoneUpDown2.ValueChanged -= PinkyARight_UpDown;
            BoneUpDown3.ValueChanged -= PinkyARight_UpDown;
        }

        public void PinkyARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PinkyARight);

            //Load Current Values for Slider
            CharacterDetails.PinkyARight_Toggle = true;
        }
        private void PinkyARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.PinkyARight_Rotate = false;
        }
        #endregion
        #region RingALeft
        private void RingALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RingALeft_X.value = (float)quat.X;
            CharacterDetails.RingALeft_Y.value = (float)quat.Y;
            CharacterDetails.RingALeft_Z.value = (float)quat.Z;
            CharacterDetails.RingALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= RingALeft_Slider;
            BoneSlider2.ValueChanged -= RingALeft_Slider;
            BoneSlider3.ValueChanged -= RingALeft_Slider;
        }

        private void RingALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RingALeft_X.value = (float)quat.X;
            CharacterDetails.RingALeft_Y.value = (float)quat.Y;
            CharacterDetails.RingALeft_Z.value = (float)quat.Z;
            CharacterDetails.RingALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= RingALeft_UpDown;
            BoneUpDown2.ValueChanged -= RingALeft_UpDown;
            BoneUpDown3.ValueChanged -= RingALeft_UpDown;
        }

        public void RingALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RingALeft);

            //Load Current Values for Slider
            CharacterDetails.RingALeft_Toggle = true;
        }
        private void RingALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.RingALeft_Rotate = false;
        }
        #endregion
        #region RingARight
        private void RingARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RingARight_X.value = (float)quat.X;
            CharacterDetails.RingARight_Y.value = (float)quat.Y;
            CharacterDetails.RingARight_Z.value = (float)quat.Z;
            CharacterDetails.RingARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= RingARight_Slider;
            BoneSlider2.ValueChanged -= RingARight_Slider;
            BoneSlider3.ValueChanged -= RingARight_Slider;
        }

        private void RingARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RingARight_X.value = (float)quat.X;
            CharacterDetails.RingARight_Y.value = (float)quat.Y;
            CharacterDetails.RingARight_Z.value = (float)quat.Z;
            CharacterDetails.RingARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= RingARight_UpDown;
            BoneUpDown2.ValueChanged -= RingARight_UpDown;
            BoneUpDown3.ValueChanged -= RingARight_UpDown;
        }

        public void RingARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RingARight);

            //Load Current Values for Slider
            CharacterDetails.RingARight_Toggle = true;
        }
        private void RingARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.RingARight_Rotate = false;
        }
        #endregion
        #region MiddleALeft
        private void MiddleALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.MiddleALeft_X.value = (float)quat.X;
            CharacterDetails.MiddleALeft_Y.value = (float)quat.Y;
            CharacterDetails.MiddleALeft_Z.value = (float)quat.Z;
            CharacterDetails.MiddleALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= MiddleALeft_Slider;
            BoneSlider2.ValueChanged -= MiddleALeft_Slider;
            BoneSlider3.ValueChanged -= MiddleALeft_Slider;
        }

        private void MiddleALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.MiddleALeft_X.value = (float)quat.X;
            CharacterDetails.MiddleALeft_Y.value = (float)quat.Y;
            CharacterDetails.MiddleALeft_Z.value = (float)quat.Z;
            CharacterDetails.MiddleALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= MiddleALeft_UpDown;
            BoneUpDown2.ValueChanged -= MiddleALeft_UpDown;
            BoneUpDown3.ValueChanged -= MiddleALeft_UpDown;
        }

        public void MiddleALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(MiddleALeft);

            //Load Current Values for Slider
            CharacterDetails.MiddleALeft_Toggle = true;
        }
        private void MiddleALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.MiddleALeft_Rotate = false;
        }
        #endregion
        #region MiddleARight
        private void MiddleARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.MiddleARight_X.value = (float)quat.X;
            CharacterDetails.MiddleARight_Y.value = (float)quat.Y;
            CharacterDetails.MiddleARight_Z.value = (float)quat.Z;
            CharacterDetails.MiddleARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= MiddleARight_Slider;
            BoneSlider2.ValueChanged -= MiddleARight_Slider;
            BoneSlider3.ValueChanged -= MiddleARight_Slider;
        }

        private void MiddleARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.MiddleARight_X.value = (float)quat.X;
            CharacterDetails.MiddleARight_Y.value = (float)quat.Y;
            CharacterDetails.MiddleARight_Z.value = (float)quat.Z;
            CharacterDetails.MiddleARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= MiddleARight_UpDown;
            BoneUpDown2.ValueChanged -= MiddleARight_UpDown;
            BoneUpDown3.ValueChanged -= MiddleARight_UpDown;
        }

        public void MiddleARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(MiddleARight);

            //Load Current Values for Slider
            CharacterDetails.MiddleARight_Toggle = true;
        }
        private void MiddleARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.MiddleARight_Rotate = false;
        }
        #endregion
        #region ThumbALeft
        private void ThumbALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ThumbALeft_X.value = (float)quat.X;
            CharacterDetails.ThumbALeft_Y.value = (float)quat.Y;
            CharacterDetails.ThumbALeft_Z.value = (float)quat.Z;
            CharacterDetails.ThumbALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ThumbALeft_Slider;
            BoneSlider2.ValueChanged -= ThumbALeft_Slider;
            BoneSlider3.ValueChanged -= ThumbALeft_Slider;
        }

        private void ThumbALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ThumbALeft_X.value = (float)quat.X;
            CharacterDetails.ThumbALeft_Y.value = (float)quat.Y;
            CharacterDetails.ThumbALeft_Z.value = (float)quat.Z;
            CharacterDetails.ThumbALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ThumbALeft_UpDown;
            BoneUpDown2.ValueChanged -= ThumbALeft_UpDown;
            BoneUpDown3.ValueChanged -= ThumbALeft_UpDown;
        }

        public void ThumbALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ThumbALeft);

            //Load Current Values for Slider
            CharacterDetails.ThumbALeft_Toggle = true;
        }
        private void ThumbALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ThumbALeft_Rotate = false;
        }
        #endregion
        #region ThumbARight
        private void ThumbARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ThumbARight_X.value = (float)quat.X;
            CharacterDetails.ThumbARight_Y.value = (float)quat.Y;
            CharacterDetails.ThumbARight_Z.value = (float)quat.Z;
            CharacterDetails.ThumbARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ThumbARight_Slider;
            BoneSlider2.ValueChanged -= ThumbARight_Slider;
            BoneSlider3.ValueChanged -= ThumbARight_Slider;
        }

        private void ThumbARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ThumbARight_X.value = (float)quat.X;
            CharacterDetails.ThumbARight_Y.value = (float)quat.Y;
            CharacterDetails.ThumbARight_Z.value = (float)quat.Z;
            CharacterDetails.ThumbARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ThumbARight_UpDown;
            BoneUpDown2.ValueChanged -= ThumbARight_UpDown;
            BoneUpDown3.ValueChanged -= ThumbARight_UpDown;
        }

        public void ThumbARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ThumbARight);

            //Load Current Values for Slider
            CharacterDetails.ThumbARight_Toggle = true;
        }
        private void ThumbARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ThumbARight_Rotate = false;
        }
        #endregion
        #region WeaponLeft
        private void WeaponLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.WeaponLeft_X.value = (float)quat.X;
            CharacterDetails.WeaponLeft_Y.value = (float)quat.Y;
            CharacterDetails.WeaponLeft_Z.value = (float)quat.Z;
            CharacterDetails.WeaponLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= WeaponLeft_Slider;
            BoneSlider2.ValueChanged -= WeaponLeft_Slider;
            BoneSlider3.ValueChanged -= WeaponLeft_Slider;
        }

        private void WeaponLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.WeaponLeft_X.value = (float)quat.X;
            CharacterDetails.WeaponLeft_Y.value = (float)quat.Y;
            CharacterDetails.WeaponLeft_Z.value = (float)quat.Z;
            CharacterDetails.WeaponLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= WeaponLeft_UpDown;
            BoneUpDown2.ValueChanged -= WeaponLeft_UpDown;
            BoneUpDown3.ValueChanged -= WeaponLeft_UpDown;
        }

        public void WeaponLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(WeaponLeft);

            //Load Current Values for Slider
            CharacterDetails.WeaponLeft_Toggle = true;
        }
        private void WeaponLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.WeaponLeft_Rotate = false;
        }
        #endregion
        #region WeaponRight
        private void WeaponRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.WeaponRight_X.value = (float)quat.X;
            CharacterDetails.WeaponRight_Y.value = (float)quat.Y;
            CharacterDetails.WeaponRight_Z.value = (float)quat.Z;
            CharacterDetails.WeaponRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= WeaponRight_Slider;
            BoneSlider2.ValueChanged -= WeaponRight_Slider;
            BoneSlider3.ValueChanged -= WeaponRight_Slider;
        }

        private void WeaponRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.WeaponRight_X.value = (float)quat.X;
            CharacterDetails.WeaponRight_Y.value = (float)quat.Y;
            CharacterDetails.WeaponRight_Z.value = (float)quat.Z;
            CharacterDetails.WeaponRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= WeaponRight_UpDown;
            BoneUpDown2.ValueChanged -= WeaponRight_UpDown;
            BoneUpDown3.ValueChanged -= WeaponRight_UpDown;
        }

        public void WeaponRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(WeaponRight);

            //Load Current Values for Slider
            CharacterDetails.WeaponRight_Toggle = true;
        }
        private void WeaponRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.WeaponRight_Rotate = false;
        }
        #endregion
        #region EarringBLeft
        private void EarringBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarringBLeft_X.value = (float)quat.X;
            CharacterDetails.EarringBLeft_Y.value = (float)quat.Y;
            CharacterDetails.EarringBLeft_Z.value = (float)quat.Z;
            CharacterDetails.EarringBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EarringBLeft_Slider;
            BoneSlider2.ValueChanged -= EarringBLeft_Slider;
            BoneSlider3.ValueChanged -= EarringBLeft_Slider;
        }

        private void EarringBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarringBLeft_X.value = (float)quat.X;
            CharacterDetails.EarringBLeft_Y.value = (float)quat.Y;
            CharacterDetails.EarringBLeft_Z.value = (float)quat.Z;
            CharacterDetails.EarringBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EarringBLeft_UpDown;
            BoneUpDown2.ValueChanged -= EarringBLeft_UpDown;
            BoneUpDown3.ValueChanged -= EarringBLeft_UpDown;
        }

        public void EarringBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarringBLeft);

            //Load Current Values for Slider
            CharacterDetails.EarringBLeft_Toggle = true;
        }
        private void EarringBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EarringBLeft_Rotate = false;
        }
        #endregion
        #region EarringBRight
        private void EarringBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarringBRight_X.value = (float)quat.X;
            CharacterDetails.EarringBRight_Y.value = (float)quat.Y;
            CharacterDetails.EarringBRight_Z.value = (float)quat.Z;
            CharacterDetails.EarringBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EarringBRight_Slider;
            BoneSlider2.ValueChanged -= EarringBRight_Slider;
            BoneSlider3.ValueChanged -= EarringBRight_Slider;
        }

        private void EarringBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EarringBRight_X.value = (float)quat.X;
            CharacterDetails.EarringBRight_Y.value = (float)quat.Y;
            CharacterDetails.EarringBRight_Z.value = (float)quat.Z;
            CharacterDetails.EarringBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EarringBRight_UpDown;
            BoneUpDown2.ValueChanged -= EarringBRight_UpDown;
            BoneUpDown3.ValueChanged -= EarringBRight_UpDown;
        }

        public void EarringBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarringBRight);

            //Load Current Values for Slider
            CharacterDetails.EarringBRight_Toggle = true;
        }
        private void EarringBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EarringBRight_Rotate = false;
        }
        #endregion
        #region IndexBLeft
        private void IndexBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.IndexBLeft_X.value = (float)quat.X;
            CharacterDetails.IndexBLeft_Y.value = (float)quat.Y;
            CharacterDetails.IndexBLeft_Z.value = (float)quat.Z;
            CharacterDetails.IndexBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= IndexBLeft_Slider;
            BoneSlider2.ValueChanged -= IndexBLeft_Slider;
            BoneSlider3.ValueChanged -= IndexBLeft_Slider;
        }

        private void IndexBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.IndexBLeft_X.value = (float)quat.X;
            CharacterDetails.IndexBLeft_Y.value = (float)quat.Y;
            CharacterDetails.IndexBLeft_Z.value = (float)quat.Z;
            CharacterDetails.IndexBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= IndexBLeft_UpDown;
            BoneUpDown2.ValueChanged -= IndexBLeft_UpDown;
            BoneUpDown3.ValueChanged -= IndexBLeft_UpDown;
        }

        public void IndexBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(IndexBLeft);

            //Load Current Values for Slider
            CharacterDetails.IndexBLeft_Toggle = true;
        }
        private void IndexBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.IndexBLeft_Rotate = false;
        }
        #endregion
        #region IndexBRight
        private void IndexBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.IndexBRight_X.value = (float)quat.X;
            CharacterDetails.IndexBRight_Y.value = (float)quat.Y;
            CharacterDetails.IndexBRight_Z.value = (float)quat.Z;
            CharacterDetails.IndexBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= IndexBRight_Slider;
            BoneSlider2.ValueChanged -= IndexBRight_Slider;
            BoneSlider3.ValueChanged -= IndexBRight_Slider;
        }

        private void IndexBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.IndexBRight_X.value = (float)quat.X;
            CharacterDetails.IndexBRight_Y.value = (float)quat.Y;
            CharacterDetails.IndexBRight_Z.value = (float)quat.Z;
            CharacterDetails.IndexBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= IndexBRight_UpDown;
            BoneUpDown2.ValueChanged -= IndexBRight_UpDown;
            BoneUpDown3.ValueChanged -= IndexBRight_UpDown;
        }

        public void IndexBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(IndexBRight);

            //Load Current Values for Slider
            CharacterDetails.IndexBRight_Toggle = true;
        }
        private void IndexBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.IndexBRight_Rotate = false;
        }
        #endregion
        #region PinkyBLeft
        private void PinkyBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PinkyBLeft_X.value = (float)quat.X;
            CharacterDetails.PinkyBLeft_Y.value = (float)quat.Y;
            CharacterDetails.PinkyBLeft_Z.value = (float)quat.Z;
            CharacterDetails.PinkyBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= PinkyBLeft_Slider;
            BoneSlider2.ValueChanged -= PinkyBLeft_Slider;
            BoneSlider3.ValueChanged -= PinkyBLeft_Slider;
        }

        private void PinkyBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PinkyBLeft_X.value = (float)quat.X;
            CharacterDetails.PinkyBLeft_Y.value = (float)quat.Y;
            CharacterDetails.PinkyBLeft_Z.value = (float)quat.Z;
            CharacterDetails.PinkyBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= PinkyBLeft_UpDown;
            BoneUpDown2.ValueChanged -= PinkyBLeft_UpDown;
            BoneUpDown3.ValueChanged -= PinkyBLeft_UpDown;
        }

        public void PinkyBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PinkyBLeft);

            //Load Current Values for Slider
            CharacterDetails.PinkyBLeft_Toggle = true;
        }
        private void PinkyBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.PinkyBLeft_Rotate = false;
        }
        #endregion
        #region PinkyBRight
        private void PinkyBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PinkyBRight_X.value = (float)quat.X;
            CharacterDetails.PinkyBRight_Y.value = (float)quat.Y;
            CharacterDetails.PinkyBRight_Z.value = (float)quat.Z;
            CharacterDetails.PinkyBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= PinkyBRight_Slider;
            BoneSlider2.ValueChanged -= PinkyBRight_Slider;
            BoneSlider3.ValueChanged -= PinkyBRight_Slider;
        }

        private void PinkyBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.PinkyBRight_X.value = (float)quat.X;
            CharacterDetails.PinkyBRight_Y.value = (float)quat.Y;
            CharacterDetails.PinkyBRight_Z.value = (float)quat.Z;
            CharacterDetails.PinkyBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= PinkyBRight_UpDown;
            BoneUpDown2.ValueChanged -= PinkyBRight_UpDown;
            BoneUpDown3.ValueChanged -= PinkyBRight_UpDown;
        }

        public void PinkyBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PinkyBRight);

            //Load Current Values for Slider
            CharacterDetails.PinkyBRight_Toggle = true;
        }
        private void PinkyBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.PinkyBRight_Rotate = false;
        }
        #endregion
        #region RingBLeft
        private void RingBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RingBLeft_X.value = (float)quat.X;
            CharacterDetails.RingBLeft_Y.value = (float)quat.Y;
            CharacterDetails.RingBLeft_Z.value = (float)quat.Z;
            CharacterDetails.RingBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= RingBLeft_Slider;
            BoneSlider2.ValueChanged -= RingBLeft_Slider;
            BoneSlider3.ValueChanged -= RingBLeft_Slider;
        }

        private void RingBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RingBLeft_X.value = (float)quat.X;
            CharacterDetails.RingBLeft_Y.value = (float)quat.Y;
            CharacterDetails.RingBLeft_Z.value = (float)quat.Z;
            CharacterDetails.RingBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= RingBLeft_UpDown;
            BoneUpDown2.ValueChanged -= RingBLeft_UpDown;
            BoneUpDown3.ValueChanged -= RingBLeft_UpDown;
        }

        public void RingBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RingBLeft);

            //Load Current Values for Slider
            CharacterDetails.RingBLeft_Toggle = true;
        }
        private void RingBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.RingBLeft_Rotate = false;
        }
        #endregion
        #region RingBRight
        private void RingBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RingBRight_X.value = (float)quat.X;
            CharacterDetails.RingBRight_Y.value = (float)quat.Y;
            CharacterDetails.RingBRight_Z.value = (float)quat.Z;
            CharacterDetails.RingBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= RingBRight_Slider;
            BoneSlider2.ValueChanged -= RingBRight_Slider;
            BoneSlider3.ValueChanged -= RingBRight_Slider;
        }

        private void RingBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RingBRight_X.value = (float)quat.X;
            CharacterDetails.RingBRight_Y.value = (float)quat.Y;
            CharacterDetails.RingBRight_Z.value = (float)quat.Z;
            CharacterDetails.RingBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= RingBRight_UpDown;
            BoneUpDown2.ValueChanged -= RingBRight_UpDown;
            BoneUpDown3.ValueChanged -= RingBRight_UpDown;
        }

        public void RingBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RingBRight);

            //Load Current Values for Slider
            CharacterDetails.RingBRight_Toggle = true;
        }
        private void RingBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.RingBRight_Rotate = false;
        }
        #endregion
        #region MiddleBLeft
        private void MiddleBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.MiddleBLeft_X.value = (float)quat.X;
            CharacterDetails.MiddleBLeft_Y.value = (float)quat.Y;
            CharacterDetails.MiddleBLeft_Z.value = (float)quat.Z;
            CharacterDetails.MiddleBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= MiddleBLeft_Slider;
            BoneSlider2.ValueChanged -= MiddleBLeft_Slider;
            BoneSlider3.ValueChanged -= MiddleBLeft_Slider;
        }

        private void MiddleBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.MiddleBLeft_X.value = (float)quat.X;
            CharacterDetails.MiddleBLeft_Y.value = (float)quat.Y;
            CharacterDetails.MiddleBLeft_Z.value = (float)quat.Z;
            CharacterDetails.MiddleBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= MiddleBLeft_UpDown;
            BoneUpDown2.ValueChanged -= MiddleBLeft_UpDown;
            BoneUpDown3.ValueChanged -= MiddleBLeft_UpDown;
        }

        public void MiddleBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(MiddleBLeft);

            //Load Current Values for Slider
            CharacterDetails.MiddleBLeft_Toggle = true;
        }
        private void MiddleBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.MiddleBLeft_Rotate = false;
        }
        #endregion
        #region MiddleBRight
        private void MiddleBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.MiddleBRight_X.value = (float)quat.X;
            CharacterDetails.MiddleBRight_Y.value = (float)quat.Y;
            CharacterDetails.MiddleBRight_Z.value = (float)quat.Z;
            CharacterDetails.MiddleBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= MiddleBRight_Slider;
            BoneSlider2.ValueChanged -= MiddleBRight_Slider;
            BoneSlider3.ValueChanged -= MiddleBRight_Slider;
        }

        private void MiddleBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.MiddleBRight_X.value = (float)quat.X;
            CharacterDetails.MiddleBRight_Y.value = (float)quat.Y;
            CharacterDetails.MiddleBRight_Z.value = (float)quat.Z;
            CharacterDetails.MiddleBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= MiddleBRight_UpDown;
            BoneUpDown2.ValueChanged -= MiddleBRight_UpDown;
            BoneUpDown3.ValueChanged -= MiddleBRight_UpDown;
        }

        public void MiddleBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(MiddleBRight);

            //Load Current Values for Slider
            CharacterDetails.MiddleBRight_Toggle = true;
        }
        private void MiddleBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.MiddleBRight_Rotate = false;
        }
        #endregion
        #region ThumbBLeft
        private void ThumbBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ThumbBLeft_X.value = (float)quat.X;
            CharacterDetails.ThumbBLeft_Y.value = (float)quat.Y;
            CharacterDetails.ThumbBLeft_Z.value = (float)quat.Z;
            CharacterDetails.ThumbBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ThumbBLeft_Slider;
            BoneSlider2.ValueChanged -= ThumbBLeft_Slider;
            BoneSlider3.ValueChanged -= ThumbBLeft_Slider;
        }

        private void ThumbBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ThumbBLeft_X.value = (float)quat.X;
            CharacterDetails.ThumbBLeft_Y.value = (float)quat.Y;
            CharacterDetails.ThumbBLeft_Z.value = (float)quat.Z;
            CharacterDetails.ThumbBLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ThumbBLeft_UpDown;
            BoneUpDown2.ValueChanged -= ThumbBLeft_UpDown;
            BoneUpDown3.ValueChanged -= ThumbBLeft_UpDown;
        }

        public void ThumbBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ThumbBLeft);

            //Load Current Values for Slider
            CharacterDetails.ThumbBLeft_Toggle = true;
        }
        private void ThumbBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ThumbBLeft_Rotate = false;
        }
        #endregion
        #region ThumbBRight
        private void ThumbBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ThumbBRight_X.value = (float)quat.X;
            CharacterDetails.ThumbBRight_Y.value = (float)quat.Y;
            CharacterDetails.ThumbBRight_Z.value = (float)quat.Z;
            CharacterDetails.ThumbBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= ThumbBRight_Slider;
            BoneSlider2.ValueChanged -= ThumbBRight_Slider;
            BoneSlider3.ValueChanged -= ThumbBRight_Slider;
        }

        private void ThumbBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ThumbBRight_X.value = (float)quat.X;
            CharacterDetails.ThumbBRight_Y.value = (float)quat.Y;
            CharacterDetails.ThumbBRight_Z.value = (float)quat.Z;
            CharacterDetails.ThumbBRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= ThumbBRight_UpDown;
            BoneUpDown2.ValueChanged -= ThumbBRight_UpDown;
            BoneUpDown3.ValueChanged -= ThumbBRight_UpDown;
        }

        public void ThumbBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ThumbBRight);

            //Load Current Values for Slider
            CharacterDetails.ThumbBRight_Toggle = true;
        }
        private void ThumbBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ThumbBRight_Rotate = false;
        }
        #endregion
        #region TailA
        private void TailA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailA_X.value = (float)quat.X;
            CharacterDetails.TailA_Y.value = (float)quat.Y;
            CharacterDetails.TailA_Z.value = (float)quat.Z;
            CharacterDetails.TailA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= TailA_Slider;
            BoneSlider2.ValueChanged -= TailA_Slider;
            BoneSlider3.ValueChanged -= TailA_Slider;
        }

        private void TailA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailA_X.value = (float)quat.X;
            CharacterDetails.TailA_Y.value = (float)quat.Y;
            CharacterDetails.TailA_Z.value = (float)quat.Z;
            CharacterDetails.TailA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= TailA_UpDown;
            BoneUpDown2.ValueChanged -= TailA_UpDown;
            BoneUpDown3.ValueChanged -= TailA_UpDown;
        }

        public void TailA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailA);

            //Load Current Values for Slider
            CharacterDetails.TailA_Toggle = true;
        }
        private void TailA_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.TailA_Rotate = false;
        }
        #endregion
        #region TailB
        private void TailB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailB_X.value = (float)quat.X;
            CharacterDetails.TailB_Y.value = (float)quat.Y;
            CharacterDetails.TailB_Z.value = (float)quat.Z;
            CharacterDetails.TailB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= TailB_Slider;
            BoneSlider2.ValueChanged -= TailB_Slider;
            BoneSlider3.ValueChanged -= TailB_Slider;
        }

        private void TailB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailB_X.value = (float)quat.X;
            CharacterDetails.TailB_Y.value = (float)quat.Y;
            CharacterDetails.TailB_Z.value = (float)quat.Z;
            CharacterDetails.TailB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= TailB_UpDown;
            BoneUpDown2.ValueChanged -= TailB_UpDown;
            BoneUpDown3.ValueChanged -= TailB_UpDown;
        }

        public void TailB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailB);

            //Load Current Values for Slider
            CharacterDetails.TailB_Toggle = true;
        }
        private void TailB_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.TailB_Rotate = false;
        }
        #endregion
        #region TailC
        private void TailC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailC_X.value = (float)quat.X;
            CharacterDetails.TailC_Y.value = (float)quat.Y;
            CharacterDetails.TailC_Z.value = (float)quat.Z;
            CharacterDetails.TailC_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= TailC_Slider;
            BoneSlider2.ValueChanged -= TailC_Slider;
            BoneSlider3.ValueChanged -= TailC_Slider;
        }

        private void TailC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailC_X.value = (float)quat.X;
            CharacterDetails.TailC_Y.value = (float)quat.Y;
            CharacterDetails.TailC_Z.value = (float)quat.Z;
            CharacterDetails.TailC_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= TailC_UpDown;
            BoneUpDown2.ValueChanged -= TailC_UpDown;
            BoneUpDown3.ValueChanged -= TailC_UpDown;
        }

        public void TailC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailC);

            //Load Current Values for Slider
            CharacterDetails.TailC_Toggle = true;
        }
        private void TailC_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.TailC_Rotate = false;
        }
        #endregion
        #region TailD
        private void TailD_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailD_X.value = (float)quat.X;
            CharacterDetails.TailD_Y.value = (float)quat.Y;
            CharacterDetails.TailD_Z.value = (float)quat.Z;
            CharacterDetails.TailD_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= TailD_Slider;
            BoneSlider2.ValueChanged -= TailD_Slider;
            BoneSlider3.ValueChanged -= TailD_Slider;
        }

        private void TailD_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailD_X.value = (float)quat.X;
            CharacterDetails.TailD_Y.value = (float)quat.Y;
            CharacterDetails.TailD_Z.value = (float)quat.Z;
            CharacterDetails.TailD_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= TailD_UpDown;
            BoneUpDown2.ValueChanged -= TailD_UpDown;
            BoneUpDown3.ValueChanged -= TailD_UpDown;
        }

        public void TailD_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailD);

            //Load Current Values for Slider
            CharacterDetails.TailD_Toggle = true;
        }
        private void TailD_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.TailD_Rotate = false;
        }
        #endregion
        #region TailE
        private void TailE_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailE_X.value = (float)quat.X;
            CharacterDetails.TailE_Y.value = (float)quat.Y;
            CharacterDetails.TailE_Z.value = (float)quat.Z;
            CharacterDetails.TailE_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= TailE_Slider;
            BoneSlider2.ValueChanged -= TailE_Slider;
            BoneSlider3.ValueChanged -= TailE_Slider;
        }

        private void TailE_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.TailE_X.value = (float)quat.X;
            CharacterDetails.TailE_Y.value = (float)quat.Y;
            CharacterDetails.TailE_Z.value = (float)quat.Z;
            CharacterDetails.TailE_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= TailE_UpDown;
            BoneUpDown2.ValueChanged -= TailE_UpDown;
            BoneUpDown3.ValueChanged -= TailE_UpDown;
        }

        public void TailE_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailE);

            //Load Current Values for Slider
            CharacterDetails.TailE_Toggle = true;
        }
        private void TailE_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.TailE_Rotate = false;
        }
        #endregion

        #region RootHead
        private void RootHead_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RootHead_X.value = (float)quat.X;
            CharacterDetails.RootHead_Y.value = (float)quat.Y;
            CharacterDetails.RootHead_Z.value = (float)quat.Z;
            CharacterDetails.RootHead_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= RootHead_Slider;
            BoneSlider2.ValueChanged -= RootHead_Slider;
            BoneSlider3.ValueChanged -= RootHead_Slider;
        }

        private void RootHead_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.RootHead_X.value = (float)quat.X;
            CharacterDetails.RootHead_Y.value = (float)quat.Y;
            CharacterDetails.RootHead_Z.value = (float)quat.Z;
            CharacterDetails.RootHead_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= RootHead_UpDown;
            BoneUpDown2.ValueChanged -= RootHead_UpDown;
            BoneUpDown3.ValueChanged -= RootHead_UpDown;
        }

        public void RootHead_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RootHead);

            //Load Current Values for Slider
            CharacterDetails.RootHead_Toggle = true;
        }
        private void RootHead_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.RootHead_Rotate = false;
        }
        #endregion
        #region Jaw
        private void Jaw_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Jaw_X.value = (float)quat.X;
            CharacterDetails.Jaw_Y.value = (float)quat.Y;
            CharacterDetails.Jaw_Z.value = (float)quat.Z;
            CharacterDetails.Jaw_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Jaw_Slider;
            BoneSlider2.ValueChanged -= Jaw_Slider;
            BoneSlider3.ValueChanged -= Jaw_Slider;
        }

        private void Jaw_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Jaw_X.value = (float)quat.X;
            CharacterDetails.Jaw_Y.value = (float)quat.Y;
            CharacterDetails.Jaw_Z.value = (float)quat.Z;
            CharacterDetails.Jaw_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Jaw_UpDown;
            BoneUpDown2.ValueChanged -= Jaw_UpDown;
            BoneUpDown3.ValueChanged -= Jaw_UpDown;
        }

        public void Jaw_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Jaw);

            //Load Current Values for Slider
            CharacterDetails.Jaw_Toggle = true;
        }
        private void Jaw_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Jaw_Rotate = false;
        }
        #endregion
        #region EyelidLowerLeft
        private void EyelidLowerLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyelidLowerLeft_X.value = (float)quat.X;
            CharacterDetails.EyelidLowerLeft_Y.value = (float)quat.Y;
            CharacterDetails.EyelidLowerLeft_Z.value = (float)quat.Z;
            CharacterDetails.EyelidLowerLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EyelidLowerLeft_Slider;
            BoneSlider2.ValueChanged -= EyelidLowerLeft_Slider;
            BoneSlider3.ValueChanged -= EyelidLowerLeft_Slider;
        }

        private void EyelidLowerLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyelidLowerLeft_X.value = (float)quat.X;
            CharacterDetails.EyelidLowerLeft_Y.value = (float)quat.Y;
            CharacterDetails.EyelidLowerLeft_Z.value = (float)quat.Z;
            CharacterDetails.EyelidLowerLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EyelidLowerLeft_UpDown;
            BoneUpDown2.ValueChanged -= EyelidLowerLeft_UpDown;
            BoneUpDown3.ValueChanged -= EyelidLowerLeft_UpDown;
        }

        public void EyelidLowerLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyelidLowerLeft);

            //Load Current Values for Slider
            CharacterDetails.EyelidLowerLeft_Toggle = true;
        }
        private void EyelidLowerLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EyelidLowerLeft_Rotate = false;
        }
        #endregion
        #region EyelidLowerRight
        private void EyelidLowerRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyelidLowerRight_X.value = (float)quat.X;
            CharacterDetails.EyelidLowerRight_Y.value = (float)quat.Y;
            CharacterDetails.EyelidLowerRight_Z.value = (float)quat.Z;
            CharacterDetails.EyelidLowerRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EyelidLowerRight_Slider;
            BoneSlider2.ValueChanged -= EyelidLowerRight_Slider;
            BoneSlider3.ValueChanged -= EyelidLowerRight_Slider;
        }

        private void EyelidLowerRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyelidLowerRight_X.value = (float)quat.X;
            CharacterDetails.EyelidLowerRight_Y.value = (float)quat.Y;
            CharacterDetails.EyelidLowerRight_Z.value = (float)quat.Z;
            CharacterDetails.EyelidLowerRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EyelidLowerRight_UpDown;
            BoneUpDown2.ValueChanged -= EyelidLowerRight_UpDown;
            BoneUpDown3.ValueChanged -= EyelidLowerRight_UpDown;
        }

        public void EyelidLowerRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyelidLowerRight);

            //Load Current Values for Slider
            CharacterDetails.EyelidLowerRight_Toggle = true;
        }
        private void EyelidLowerRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EyelidLowerRight_Rotate = false;
        }
        #endregion
        #region EyeLeft
        private void EyeLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyeLeft_X.value = (float)quat.X;
            CharacterDetails.EyeLeft_Y.value = (float)quat.Y;
            CharacterDetails.EyeLeft_Z.value = (float)quat.Z;
            CharacterDetails.EyeLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EyeLeft_Slider;
            BoneSlider2.ValueChanged -= EyeLeft_Slider;
            BoneSlider3.ValueChanged -= EyeLeft_Slider;
        }

        private void EyeLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyeLeft_X.value = (float)quat.X;
            CharacterDetails.EyeLeft_Y.value = (float)quat.Y;
            CharacterDetails.EyeLeft_Z.value = (float)quat.Z;
            CharacterDetails.EyeLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EyeLeft_UpDown;
            BoneUpDown2.ValueChanged -= EyeLeft_UpDown;
            BoneUpDown3.ValueChanged -= EyeLeft_UpDown;
        }

        public void EyeLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyeLeft);

            //Load Current Values for Slider
            CharacterDetails.EyeLeft_Toggle = true;
        }
        private void EyeLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EyeLeft_Rotate = false;
        }
        #endregion
        #region EyeRight
        private void EyeRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyeRight_X.value = (float)quat.X;
            CharacterDetails.EyeRight_Y.value = (float)quat.Y;
            CharacterDetails.EyeRight_Z.value = (float)quat.Z;
            CharacterDetails.EyeRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EyeRight_Slider;
            BoneSlider2.ValueChanged -= EyeRight_Slider;
            BoneSlider3.ValueChanged -= EyeRight_Slider;
        }

        private void EyeRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyeRight_X.value = (float)quat.X;
            CharacterDetails.EyeRight_Y.value = (float)quat.Y;
            CharacterDetails.EyeRight_Z.value = (float)quat.Z;
            CharacterDetails.EyeRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EyeRight_UpDown;
            BoneUpDown2.ValueChanged -= EyeRight_UpDown;
            BoneUpDown3.ValueChanged -= EyeRight_UpDown;
        }

        public void EyeRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyeRight);

            //Load Current Values for Slider
            CharacterDetails.EyeRight_Toggle = true;
        }
        private void EyeRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EyeRight_Rotate = false;
        }
        #endregion
        #region Nose
        private void Nose_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Nose_X.value = (float)quat.X;
            CharacterDetails.Nose_Y.value = (float)quat.Y;
            CharacterDetails.Nose_Z.value = (float)quat.Z;
            CharacterDetails.Nose_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Nose_Slider;
            BoneSlider2.ValueChanged -= Nose_Slider;
            BoneSlider3.ValueChanged -= Nose_Slider;
        }

        private void Nose_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Nose_X.value = (float)quat.X;
            CharacterDetails.Nose_Y.value = (float)quat.Y;
            CharacterDetails.Nose_Z.value = (float)quat.Z;
            CharacterDetails.Nose_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Nose_UpDown;
            BoneUpDown2.ValueChanged -= Nose_UpDown;
            BoneUpDown3.ValueChanged -= Nose_UpDown;
        }

        public void Nose_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Nose);

            //Load Current Values for Slider
            CharacterDetails.Nose_Toggle = true;
        }
        private void Nose_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Nose_Rotate = false;
        }
        #endregion
        #region CheekLeft / HrothLipUpperLeft
        private void CheekLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CheekLeft_X.value = (float)quat.X;
            CharacterDetails.CheekLeft_Y.value = (float)quat.Y;
            CharacterDetails.CheekLeft_Z.value = (float)quat.Z;
            CharacterDetails.CheekLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= CheekLeft_Slider;
            BoneSlider2.ValueChanged -= CheekLeft_Slider;
            BoneSlider3.ValueChanged -= CheekLeft_Slider;
        }

        private void CheekLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CheekLeft_X.value = (float)quat.X;
            CharacterDetails.CheekLeft_Y.value = (float)quat.Y;
            CharacterDetails.CheekLeft_Z.value = (float)quat.Z;
            CharacterDetails.CheekLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= CheekLeft_UpDown;
            BoneUpDown2.ValueChanged -= CheekLeft_UpDown;
            BoneUpDown3.ValueChanged -= CheekLeft_UpDown;
        }

        private void HrothLipUpperLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipUpperLeft_X.value = (float)quat.X;
            CharacterDetails.HrothLipUpperLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipUpperLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipUpperLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothLipUpperLeft_Slider;
            BoneSlider2.ValueChanged -= HrothLipUpperLeft_Slider;
            BoneSlider3.ValueChanged -= HrothLipUpperLeft_Slider;
        }

        private void HrothLipUpperLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipUpperLeft_X.value = (float)quat.X;
            CharacterDetails.HrothLipUpperLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipUpperLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipUpperLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothLipUpperLeft_UpDown;
            BoneUpDown2.ValueChanged -= HrothLipUpperLeft_UpDown;
            BoneUpDown3.ValueChanged -= HrothLipUpperLeft_UpDown;
        }

        public void CheekLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CheekLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.CheekLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipUpperLeft_Toggle = true;
        }
        private void CheekLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.CheekLeft_Rotate = false;
            CharacterDetails.HrothLipUpperLeft_Rotate = false;
        }
        #endregion
        #region CheekRight / HrothLipUpperRight
        private void CheekRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CheekRight_X.value = (float)quat.X;
            CharacterDetails.CheekRight_Y.value = (float)quat.Y;
            CharacterDetails.CheekRight_Z.value = (float)quat.Z;
            CharacterDetails.CheekRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= CheekRight_Slider;
            BoneSlider2.ValueChanged -= CheekRight_Slider;
            BoneSlider3.ValueChanged -= CheekRight_Slider;
        }

        private void CheekRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.CheekRight_X.value = (float)quat.X;
            CharacterDetails.CheekRight_Y.value = (float)quat.Y;
            CharacterDetails.CheekRight_Z.value = (float)quat.Z;
            CharacterDetails.CheekRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= CheekRight_UpDown;
            BoneUpDown2.ValueChanged -= CheekRight_UpDown;
            BoneUpDown3.ValueChanged -= CheekRight_UpDown;
        }

        private void HrothLipUpperRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipUpperRight_X.value = (float)quat.X;
            CharacterDetails.HrothLipUpperRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipUpperRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipUpperRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothLipUpperRight_Slider;
            BoneSlider2.ValueChanged -= HrothLipUpperRight_Slider;
            BoneSlider3.ValueChanged -= HrothLipUpperRight_Slider;
        }

        private void HrothLipUpperRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipUpperRight_X.value = (float)quat.X;
            CharacterDetails.HrothLipUpperRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipUpperRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipUpperRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothLipUpperRight_UpDown;
            BoneUpDown2.ValueChanged -= HrothLipUpperRight_UpDown;
            BoneUpDown3.ValueChanged -= HrothLipUpperRight_UpDown;
        }

        public void CheekRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CheekRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.CheekRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipUpperRight_Toggle = true;
        }
        private void CheekRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.CheekRight_Rotate = false;
            CharacterDetails.HrothLipUpperRight_Rotate = false;
        }
        #endregion
        #region LipsLeft / HrothLipsLeft
        private void LipsLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipsLeft_X.value = (float)quat.X;
            CharacterDetails.LipsLeft_Y.value = (float)quat.Y;
            CharacterDetails.LipsLeft_Z.value = (float)quat.Z;
            CharacterDetails.LipsLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= LipsLeft_Slider;
            BoneSlider2.ValueChanged -= LipsLeft_Slider;
            BoneSlider3.ValueChanged -= LipsLeft_Slider;
        }

        private void LipsLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipsLeft_X.value = (float)quat.X;
            CharacterDetails.LipsLeft_Y.value = (float)quat.Y;
            CharacterDetails.LipsLeft_Z.value = (float)quat.Z;
            CharacterDetails.LipsLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= LipsLeft_UpDown;
            BoneUpDown2.ValueChanged -= LipsLeft_UpDown;
            BoneUpDown3.ValueChanged -= LipsLeft_UpDown;
        }

        private void HrothLipsLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipsLeft_X.value = (float)quat.X;
            CharacterDetails.HrothLipsLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipsLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipsLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothLipsLeft_Slider;
            BoneSlider2.ValueChanged -= HrothLipsLeft_Slider;
            BoneSlider3.ValueChanged -= HrothLipsLeft_Slider;
        }

        private void HrothLipsLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipsLeft_X.value = (float)quat.X;
            CharacterDetails.HrothLipsLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipsLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipsLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothLipsLeft_UpDown;
            BoneUpDown2.ValueChanged -= HrothLipsLeft_UpDown;
            BoneUpDown3.ValueChanged -= HrothLipsLeft_UpDown;
        }

        public void LipsLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipsLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.LipsLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipsLeft_Toggle = true;
        }
        private void LipsLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.LipsLeft_Rotate = false;
            CharacterDetails.HrothLipsLeft_Rotate = false;
        }
        #endregion
        #region LipsRight / HrothLipsRight
        private void LipsRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipsRight_X.value = (float)quat.X;
            CharacterDetails.LipsRight_Y.value = (float)quat.Y;
            CharacterDetails.LipsRight_Z.value = (float)quat.Z;
            CharacterDetails.LipsRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= LipsRight_Slider;
            BoneSlider2.ValueChanged -= LipsRight_Slider;
            BoneSlider3.ValueChanged -= LipsRight_Slider;
        }

        private void LipsRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipsRight_X.value = (float)quat.X;
            CharacterDetails.LipsRight_Y.value = (float)quat.Y;
            CharacterDetails.LipsRight_Z.value = (float)quat.Z;
            CharacterDetails.LipsRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= LipsRight_UpDown;
            BoneUpDown2.ValueChanged -= LipsRight_UpDown;
            BoneUpDown3.ValueChanged -= LipsRight_UpDown;
        }

        private void HrothLipsRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipsRight_X.value = (float)quat.X;
            CharacterDetails.HrothLipsRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipsRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipsRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothLipsRight_Slider;
            BoneSlider2.ValueChanged -= HrothLipsRight_Slider;
            BoneSlider3.ValueChanged -= HrothLipsRight_Slider;
        }

        private void HrothLipsRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipsRight_X.value = (float)quat.X;
            CharacterDetails.HrothLipsRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipsRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipsRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothLipsRight_UpDown;
            BoneUpDown2.ValueChanged -= HrothLipsRight_UpDown;
            BoneUpDown3.ValueChanged -= HrothLipsRight_UpDown;
        }

        public void LipsRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipsRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.LipsRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipsRight_Toggle = true;
        }
        private void LipsRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.LipsRight_Rotate = false;
            CharacterDetails.HrothLipsRight_Rotate = false;
        }
        #endregion
        #region EyebrowLeft / HrothEyebrowLeft
        private void EyebrowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyebrowLeft_X.value = (float)quat.X;
            CharacterDetails.EyebrowLeft_Y.value = (float)quat.Y;
            CharacterDetails.EyebrowLeft_Z.value = (float)quat.Z;
            CharacterDetails.EyebrowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EyebrowLeft_Slider;
            BoneSlider2.ValueChanged -= EyebrowLeft_Slider;
            BoneSlider3.ValueChanged -= EyebrowLeft_Slider;
        }

        private void EyebrowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyebrowLeft_X.value = (float)quat.X;
            CharacterDetails.EyebrowLeft_Y.value = (float)quat.Y;
            CharacterDetails.EyebrowLeft_Z.value = (float)quat.Z;
            CharacterDetails.EyebrowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EyebrowLeft_UpDown;
            BoneUpDown2.ValueChanged -= EyebrowLeft_UpDown;
            BoneUpDown3.ValueChanged -= EyebrowLeft_UpDown;
        }

        private void HrothEyebrowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothEyebrowLeft_X.value = (float)quat.X;
            CharacterDetails.HrothEyebrowLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothEyebrowLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothEyebrowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothEyebrowLeft_Slider;
            BoneSlider2.ValueChanged -= HrothEyebrowLeft_Slider;
            BoneSlider3.ValueChanged -= HrothEyebrowLeft_Slider;
        }

        private void HrothEyebrowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothEyebrowLeft_X.value = (float)quat.X;
            CharacterDetails.HrothEyebrowLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothEyebrowLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothEyebrowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothEyebrowLeft_UpDown;
            BoneUpDown2.ValueChanged -= HrothEyebrowLeft_UpDown;
            BoneUpDown3.ValueChanged -= HrothEyebrowLeft_UpDown;
        }

        public void EyebrowLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyebrowLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.EyebrowLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothEyebrowLeft_Toggle = true;
        }
        private void EyebrowLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EyebrowLeft_Rotate = false;
            CharacterDetails.HrothEyebrowLeft_Rotate = false;
        }
        #endregion
        #region EyebrowRight / HrothEyebrowRight
        private void EyebrowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyebrowRight_X.value = (float)quat.X;
            CharacterDetails.EyebrowRight_Y.value = (float)quat.Y;
            CharacterDetails.EyebrowRight_Z.value = (float)quat.Z;
            CharacterDetails.EyebrowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EyebrowRight_Slider;
            BoneSlider2.ValueChanged -= EyebrowRight_Slider;
            BoneSlider3.ValueChanged -= EyebrowRight_Slider;
        }

        private void EyebrowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyebrowRight_X.value = (float)quat.X;
            CharacterDetails.EyebrowRight_Y.value = (float)quat.Y;
            CharacterDetails.EyebrowRight_Z.value = (float)quat.Z;
            CharacterDetails.EyebrowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EyebrowRight_UpDown;
            BoneUpDown2.ValueChanged -= EyebrowRight_UpDown;
            BoneUpDown3.ValueChanged -= EyebrowRight_UpDown;
        }

        private void HrothEyebrowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothEyebrowRight_X.value = (float)quat.X;
            CharacterDetails.HrothEyebrowRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothEyebrowRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothEyebrowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothEyebrowRight_Slider;
            BoneSlider2.ValueChanged -= HrothEyebrowRight_Slider;
            BoneSlider3.ValueChanged -= HrothEyebrowRight_Slider;
        }

        private void HrothEyebrowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothEyebrowRight_X.value = (float)quat.X;
            CharacterDetails.HrothEyebrowRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothEyebrowRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothEyebrowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothEyebrowRight_UpDown;
            BoneUpDown2.ValueChanged -= HrothEyebrowRight_UpDown;
            BoneUpDown3.ValueChanged -= HrothEyebrowRight_UpDown;
        }

        public void EyebrowRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyebrowRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.EyebrowRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothEyebrowRight_Toggle = true;
        }
        private void EyebrowRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EyebrowRight_Rotate = false;
            CharacterDetails.HrothEyebrowRight_Rotate = false;
        }
        #endregion
        #region Bridge / HrothBridge
        private void Bridge_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Bridge_X.value = (float)quat.X;
            CharacterDetails.Bridge_Y.value = (float)quat.Y;
            CharacterDetails.Bridge_Z.value = (float)quat.Z;
            CharacterDetails.Bridge_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= Bridge_Slider;
            BoneSlider2.ValueChanged -= Bridge_Slider;
            BoneSlider3.ValueChanged -= Bridge_Slider;
        }

        private void Bridge_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.Bridge_X.value = (float)quat.X;
            CharacterDetails.Bridge_Y.value = (float)quat.Y;
            CharacterDetails.Bridge_Z.value = (float)quat.Z;
            CharacterDetails.Bridge_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= Bridge_UpDown;
            BoneUpDown2.ValueChanged -= Bridge_UpDown;
            BoneUpDown3.ValueChanged -= Bridge_UpDown;
        }

        private void HrothBridge_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothBridge_X.value = (float)quat.X;
            CharacterDetails.HrothBridge_Y.value = (float)quat.Y;
            CharacterDetails.HrothBridge_Z.value = (float)quat.Z;
            CharacterDetails.HrothBridge_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothBridge_Slider;
            BoneSlider2.ValueChanged -= HrothBridge_Slider;
            BoneSlider3.ValueChanged -= HrothBridge_Slider;
        }

        private void HrothBridge_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothBridge_X.value = (float)quat.X;
            CharacterDetails.HrothBridge_Y.value = (float)quat.Y;
            CharacterDetails.HrothBridge_Z.value = (float)quat.Z;
            CharacterDetails.HrothBridge_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothBridge_UpDown;
            BoneUpDown2.ValueChanged -= HrothBridge_UpDown;
            BoneUpDown3.ValueChanged -= HrothBridge_UpDown;
        }

        public void Bridge_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Bridge);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.Bridge_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothBridge_Toggle = true;
        }
        private void Bridge_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.Bridge_Rotate = false;
            CharacterDetails.HrothBridge_Rotate = false;
        }
        #endregion
        #region BrowLeft / HrothBrowLeft
        private void BrowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.BrowLeft_X.value = (float)quat.X;
            CharacterDetails.BrowLeft_Y.value = (float)quat.Y;
            CharacterDetails.BrowLeft_Z.value = (float)quat.Z;
            CharacterDetails.BrowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= BrowLeft_Slider;
            BoneSlider2.ValueChanged -= BrowLeft_Slider;
            BoneSlider3.ValueChanged -= BrowLeft_Slider;
        }

        private void BrowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.BrowLeft_X.value = (float)quat.X;
            CharacterDetails.BrowLeft_Y.value = (float)quat.Y;
            CharacterDetails.BrowLeft_Z.value = (float)quat.Z;
            CharacterDetails.BrowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= BrowLeft_UpDown;
            BoneUpDown2.ValueChanged -= BrowLeft_UpDown;
            BoneUpDown3.ValueChanged -= BrowLeft_UpDown;
        }

        private void HrothBrowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothBrowLeft_X.value = (float)quat.X;
            CharacterDetails.HrothBrowLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothBrowLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothBrowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothBrowLeft_Slider;
            BoneSlider2.ValueChanged -= HrothBrowLeft_Slider;
            BoneSlider3.ValueChanged -= HrothBrowLeft_Slider;
        }

        private void HrothBrowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothBrowLeft_X.value = (float)quat.X;
            CharacterDetails.HrothBrowLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothBrowLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothBrowLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothBrowLeft_UpDown;
            BoneUpDown2.ValueChanged -= HrothBrowLeft_UpDown;
            BoneUpDown3.ValueChanged -= HrothBrowLeft_UpDown;
        }

        public void BrowLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(BrowLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.BrowLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothBrowLeft_Toggle = true;
        }
        private void BrowLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.BrowLeft_Rotate = false;
            CharacterDetails.HrothBrowLeft_Rotate = false;
        }
        #endregion
        #region BrowRight / HrothBrowRight
        private void BrowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.BrowRight_X.value = (float)quat.X;
            CharacterDetails.BrowRight_Y.value = (float)quat.Y;
            CharacterDetails.BrowRight_Z.value = (float)quat.Z;
            CharacterDetails.BrowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= BrowRight_Slider;
            BoneSlider2.ValueChanged -= BrowRight_Slider;
            BoneSlider3.ValueChanged -= BrowRight_Slider;
        }

        private void BrowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.BrowRight_X.value = (float)quat.X;
            CharacterDetails.BrowRight_Y.value = (float)quat.Y;
            CharacterDetails.BrowRight_Z.value = (float)quat.Z;
            CharacterDetails.BrowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= BrowRight_UpDown;
            BoneUpDown2.ValueChanged -= BrowRight_UpDown;
            BoneUpDown3.ValueChanged -= BrowRight_UpDown;
        }

        private void HrothBrowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothBrowRight_X.value = (float)quat.X;
            CharacterDetails.HrothBrowRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothBrowRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothBrowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothBrowRight_Slider;
            BoneSlider2.ValueChanged -= HrothBrowRight_Slider;
            BoneSlider3.ValueChanged -= HrothBrowRight_Slider;
        }

        private void HrothBrowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothBrowRight_X.value = (float)quat.X;
            CharacterDetails.HrothBrowRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothBrowRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothBrowRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothBrowRight_UpDown;
            BoneUpDown2.ValueChanged -= HrothBrowRight_UpDown;
            BoneUpDown3.ValueChanged -= HrothBrowRight_UpDown;
        }

        public void BrowRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(BrowRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.BrowRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothBrowRight_Toggle = true;
        }
        private void BrowRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.BrowRight_Rotate = false;
            CharacterDetails.HrothBrowRight_Rotate = false;
        }
        #endregion
        #region LipUpperA / HrothLipUpper
        private void LipUpperA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipUpperA_X.value = (float)quat.X;
            CharacterDetails.LipUpperA_Y.value = (float)quat.Y;
            CharacterDetails.LipUpperA_Z.value = (float)quat.Z;
            CharacterDetails.LipUpperA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= LipUpperA_Slider;
            BoneSlider2.ValueChanged -= LipUpperA_Slider;
            BoneSlider3.ValueChanged -= LipUpperA_Slider;
        }

        private void LipUpperA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipUpperA_X.value = (float)quat.X;
            CharacterDetails.LipUpperA_Y.value = (float)quat.Y;
            CharacterDetails.LipUpperA_Z.value = (float)quat.Z;
            CharacterDetails.LipUpperA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= LipUpperA_UpDown;
            BoneUpDown2.ValueChanged -= LipUpperA_UpDown;
            BoneUpDown3.ValueChanged -= LipUpperA_UpDown;
        }

        private void HrothLipUpper_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipUpper_X.value = (float)quat.X;
            CharacterDetails.HrothLipUpper_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipUpper_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipUpper_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothLipUpper_Slider;
            BoneSlider2.ValueChanged -= HrothLipUpper_Slider;
            BoneSlider3.ValueChanged -= HrothLipUpper_Slider;
        }

        private void HrothLipUpper_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipUpper_X.value = (float)quat.X;
            CharacterDetails.HrothLipUpper_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipUpper_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipUpper_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothLipUpper_UpDown;
            BoneUpDown2.ValueChanged -= HrothLipUpper_UpDown;
            BoneUpDown3.ValueChanged -= HrothLipUpper_UpDown;
        }

        public void LipUpperA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipUpperA);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.LipUpperA_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipUpper_Toggle = true;
        }
        private void LipUpperA_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.LipUpperA_Rotate = false;
            CharacterDetails.HrothLipUpper_Rotate = false;
        }
        #endregion
        #region EyelidUpperLeft / HrothEyelidUpperLeft
        private void EyelidUpperLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyelidUpperLeft_X.value = (float)quat.X;
            CharacterDetails.EyelidUpperLeft_Y.value = (float)quat.Y;
            CharacterDetails.EyelidUpperLeft_Z.value = (float)quat.Z;
            CharacterDetails.EyelidUpperLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EyelidUpperLeft_Slider;
            BoneSlider2.ValueChanged -= EyelidUpperLeft_Slider;
            BoneSlider3.ValueChanged -= EyelidUpperLeft_Slider;
        }

        private void EyelidUpperLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyelidUpperLeft_X.value = (float)quat.X;
            CharacterDetails.EyelidUpperLeft_Y.value = (float)quat.Y;
            CharacterDetails.EyelidUpperLeft_Z.value = (float)quat.Z;
            CharacterDetails.EyelidUpperLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EyelidUpperLeft_UpDown;
            BoneUpDown2.ValueChanged -= EyelidUpperLeft_UpDown;
            BoneUpDown3.ValueChanged -= EyelidUpperLeft_UpDown;
        }

        private void HrothEyelidUpperLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothEyelidUpperLeft_X.value = (float)quat.X;
            CharacterDetails.HrothEyelidUpperLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothEyelidUpperLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothEyelidUpperLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothEyelidUpperLeft_Slider;
            BoneSlider2.ValueChanged -= HrothEyelidUpperLeft_Slider;
            BoneSlider3.ValueChanged -= HrothEyelidUpperLeft_Slider;
        }

        private void HrothEyelidUpperLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothEyelidUpperLeft_X.value = (float)quat.X;
            CharacterDetails.HrothEyelidUpperLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothEyelidUpperLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothEyelidUpperLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothEyelidUpperLeft_UpDown;
            BoneUpDown2.ValueChanged -= HrothEyelidUpperLeft_UpDown;
            BoneUpDown3.ValueChanged -= HrothEyelidUpperLeft_UpDown;
        }

        public void EyelidUpperLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyelidUpperLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.EyelidUpperLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothEyelidUpperLeft_Toggle = true;
        }
        private void EyelidUpperLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EyelidUpperLeft_Rotate = false;
            CharacterDetails.HrothEyelidUpperLeft_Rotate = false;
        }
        #endregion
        #region EyelidUpperRight / HrothEyelidUpperRight
        private void EyelidUpperRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyelidUpperRight_X.value = (float)quat.X;
            CharacterDetails.EyelidUpperRight_Y.value = (float)quat.Y;
            CharacterDetails.EyelidUpperRight_Z.value = (float)quat.Z;
            CharacterDetails.EyelidUpperRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= EyelidUpperRight_Slider;
            BoneSlider2.ValueChanged -= EyelidUpperRight_Slider;
            BoneSlider3.ValueChanged -= EyelidUpperRight_Slider;
        }

        private void EyelidUpperRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.EyelidUpperRight_X.value = (float)quat.X;
            CharacterDetails.EyelidUpperRight_Y.value = (float)quat.Y;
            CharacterDetails.EyelidUpperRight_Z.value = (float)quat.Z;
            CharacterDetails.EyelidUpperRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= EyelidUpperRight_UpDown;
            BoneUpDown2.ValueChanged -= EyelidUpperRight_UpDown;
            BoneUpDown3.ValueChanged -= EyelidUpperRight_UpDown;
        }

        private void HrothEyelidUpperRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothEyelidUpperRight_X.value = (float)quat.X;
            CharacterDetails.HrothEyelidUpperRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothEyelidUpperRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothEyelidUpperRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothEyelidUpperRight_Slider;
            BoneSlider2.ValueChanged -= HrothEyelidUpperRight_Slider;
            BoneSlider3.ValueChanged -= HrothEyelidUpperRight_Slider;
        }

        private void HrothEyelidUpperRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothEyelidUpperRight_X.value = (float)quat.X;
            CharacterDetails.HrothEyelidUpperRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothEyelidUpperRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothEyelidUpperRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothEyelidUpperRight_UpDown;
            BoneUpDown2.ValueChanged -= HrothEyelidUpperRight_UpDown;
            BoneUpDown3.ValueChanged -= HrothEyelidUpperRight_UpDown;
        }

        public void EyelidUpperRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyelidUpperRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.EyelidUpperRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothEyelidUpperRight_Toggle = true;
        }
        private void EyelidUpperRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.EyelidUpperRight_Rotate = false;
            CharacterDetails.HrothEyelidUpperRight_Rotate = false;
        }
        #endregion
        #region LipLowerA / HrothLipLower / VieraLipLowerA
        private void LipLowerA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipLowerA_X.value = (float)quat.X;
            CharacterDetails.LipLowerA_Y.value = (float)quat.Y;
            CharacterDetails.LipLowerA_Z.value = (float)quat.Z;
            CharacterDetails.LipLowerA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= LipLowerA_Slider;
            BoneSlider2.ValueChanged -= LipLowerA_Slider;
            BoneSlider3.ValueChanged -= LipLowerA_Slider;
        }

        private void LipLowerA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipLowerA_X.value = (float)quat.X;
            CharacterDetails.LipLowerA_Y.value = (float)quat.Y;
            CharacterDetails.LipLowerA_Z.value = (float)quat.Z;
            CharacterDetails.LipLowerA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= LipLowerA_UpDown;
            BoneUpDown2.ValueChanged -= LipLowerA_UpDown;
            BoneUpDown3.ValueChanged -= LipLowerA_UpDown;
        }

        private void HrothLipLower_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipLower_X.value = (float)quat.X;
            CharacterDetails.HrothLipLower_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipLower_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipLower_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothLipLower_Slider;
            BoneSlider2.ValueChanged -= HrothLipLower_Slider;
            BoneSlider3.ValueChanged -= HrothLipLower_Slider;
        }

        private void HrothLipLower_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothLipLower_X.value = (float)quat.X;
            CharacterDetails.HrothLipLower_Y.value = (float)quat.Y;
            CharacterDetails.HrothLipLower_Z.value = (float)quat.Z;
            CharacterDetails.HrothLipLower_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothLipLower_UpDown;
            BoneUpDown2.ValueChanged -= HrothLipLower_UpDown;
            BoneUpDown3.ValueChanged -= HrothLipLower_UpDown;
        }

        private void VieraLipLowerA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraLipLowerA_X.value = (float)quat.X;
            CharacterDetails.VieraLipLowerA_Y.value = (float)quat.Y;
            CharacterDetails.VieraLipLowerA_Z.value = (float)quat.Z;
            CharacterDetails.VieraLipLowerA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraLipLowerA_Slider;
            BoneSlider2.ValueChanged -= VieraLipLowerA_Slider;
            BoneSlider3.ValueChanged -= VieraLipLowerA_Slider;
        }

        private void VieraLipLowerA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraLipLowerA_X.value = (float)quat.X;
            CharacterDetails.VieraLipLowerA_Y.value = (float)quat.Y;
            CharacterDetails.VieraLipLowerA_Z.value = (float)quat.Z;
            CharacterDetails.VieraLipLowerA_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraLipLowerA_UpDown;
            BoneUpDown2.ValueChanged -= VieraLipLowerA_UpDown;
            BoneUpDown3.ValueChanged -= VieraLipLowerA_UpDown;
        }

        public void LipLowerA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipLowerA);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value < 7) CharacterDetails.LipLowerA_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipLower_Toggle = true;
            if (CharacterDetails.Race.value == 8) CharacterDetails.VieraLipLowerA_Toggle = true;
        }
        private void LipLowerA_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.LipLowerA_Rotate = false;
            CharacterDetails.HrothLipLower_Rotate = false;
            CharacterDetails.VieraLipLowerA_Rotate = false;
        }
        #endregion
        #region LipUpperB / HrothJawUpper / VieraLipUpperB
        private void LipUpperB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipUpperB_X.value = (float)quat.X;
            CharacterDetails.LipUpperB_Y.value = (float)quat.Y;
            CharacterDetails.LipUpperB_Z.value = (float)quat.Z;
            CharacterDetails.LipUpperB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= LipUpperB_Slider;
            BoneSlider2.ValueChanged -= LipUpperB_Slider;
            BoneSlider3.ValueChanged -= LipUpperB_Slider;
        }

        private void LipUpperB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipUpperB_X.value = (float)quat.X;
            CharacterDetails.LipUpperB_Y.value = (float)quat.Y;
            CharacterDetails.LipUpperB_Z.value = (float)quat.Z;
            CharacterDetails.LipUpperB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= LipUpperB_UpDown;
            BoneUpDown2.ValueChanged -= LipUpperB_UpDown;
            BoneUpDown3.ValueChanged -= LipUpperB_UpDown;
        }

        private void HrothJawUpper_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothJawUpper_X.value = (float)quat.X;
            CharacterDetails.HrothJawUpper_Y.value = (float)quat.Y;
            CharacterDetails.HrothJawUpper_Z.value = (float)quat.Z;
            CharacterDetails.HrothJawUpper_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothJawUpper_Slider;
            BoneSlider2.ValueChanged -= HrothJawUpper_Slider;
            BoneSlider3.ValueChanged -= HrothJawUpper_Slider;
        }

        private void HrothJawUpper_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothJawUpper_X.value = (float)quat.X;
            CharacterDetails.HrothJawUpper_Y.value = (float)quat.Y;
            CharacterDetails.HrothJawUpper_Z.value = (float)quat.Z;
            CharacterDetails.HrothJawUpper_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothJawUpper_UpDown;
            BoneUpDown2.ValueChanged -= HrothJawUpper_UpDown;
            BoneUpDown3.ValueChanged -= HrothJawUpper_UpDown;
        }

        private void VieraLipUpperB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraLipUpperB_X.value = (float)quat.X;
            CharacterDetails.VieraLipUpperB_Y.value = (float)quat.Y;
            CharacterDetails.VieraLipUpperB_Z.value = (float)quat.Z;
            CharacterDetails.VieraLipUpperB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraLipUpperB_Slider;
            BoneSlider2.ValueChanged -= VieraLipUpperB_Slider;
            BoneSlider3.ValueChanged -= VieraLipUpperB_Slider;
        }

        private void VieraLipUpperB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraLipUpperB_X.value = (float)quat.X;
            CharacterDetails.VieraLipUpperB_Y.value = (float)quat.Y;
            CharacterDetails.VieraLipUpperB_Z.value = (float)quat.Z;
            CharacterDetails.VieraLipUpperB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraLipUpperB_UpDown;
            BoneUpDown2.ValueChanged -= VieraLipUpperB_UpDown;
            BoneUpDown3.ValueChanged -= VieraLipUpperB_UpDown;
        }

        public void LipUpperB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipUpperB);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value < 7) CharacterDetails.LipUpperB_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothJawUpper_Toggle = true;
            if (CharacterDetails.Race.value == 8) CharacterDetails.VieraLipUpperB_Toggle = true;
        }
        private void LipUpperB_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.LipUpperB_Rotate = false;
            CharacterDetails.HrothJawUpper_Rotate = false;
            CharacterDetails.VieraLipUpperB_Rotate = false;
        }
        #endregion
        #region LipLowerB / VieraLipLowerB
        private void LipLowerB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipLowerB_X.value = (float)quat.X;
            CharacterDetails.LipLowerB_Y.value = (float)quat.Y;
            CharacterDetails.LipLowerB_Z.value = (float)quat.Z;
            CharacterDetails.LipLowerB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= LipLowerB_Slider;
            BoneSlider2.ValueChanged -= LipLowerB_Slider;
            BoneSlider3.ValueChanged -= LipLowerB_Slider;
        }

        private void LipLowerB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.LipLowerB_X.value = (float)quat.X;
            CharacterDetails.LipLowerB_Y.value = (float)quat.Y;
            CharacterDetails.LipLowerB_Z.value = (float)quat.Z;
            CharacterDetails.LipLowerB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= LipLowerB_UpDown;
            BoneUpDown2.ValueChanged -= LipLowerB_UpDown;
            BoneUpDown3.ValueChanged -= LipLowerB_UpDown;
        }

        private void VieraLipLowerB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraLipLowerB_X.value = (float)quat.X;
            CharacterDetails.VieraLipLowerB_Y.value = (float)quat.Y;
            CharacterDetails.VieraLipLowerB_Z.value = (float)quat.Z;
            CharacterDetails.VieraLipLowerB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraLipLowerB_Slider;
            BoneSlider2.ValueChanged -= VieraLipLowerB_Slider;
            BoneSlider3.ValueChanged -= VieraLipLowerB_Slider;
        }

        private void VieraLipLowerB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraLipLowerB_X.value = (float)quat.X;
            CharacterDetails.VieraLipLowerB_Y.value = (float)quat.Y;
            CharacterDetails.VieraLipLowerB_Z.value = (float)quat.Z;
            CharacterDetails.VieraLipLowerB_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraLipLowerB_UpDown;
            BoneUpDown2.ValueChanged -= VieraLipLowerB_UpDown;
            BoneUpDown3.ValueChanged -= VieraLipLowerB_UpDown;
        }

        public void LipLowerB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipLowerB);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 8) CharacterDetails.LipLowerB_Toggle = true;
            if (CharacterDetails.Race.value == 8) CharacterDetails.VieraLipLowerB_Toggle = true;
        }
        private void LipLowerB_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.LipLowerB_Rotate = false;
            CharacterDetails.VieraLipLowerB_Rotate = false;
        }
        #endregion
        #region HrothWhiskersLeft
        private void HrothWhiskersLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothWhiskersLeft_X.value = (float)quat.X;
            CharacterDetails.HrothWhiskersLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothWhiskersLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothWhiskersLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothWhiskersLeft_Slider;
            BoneSlider2.ValueChanged -= HrothWhiskersLeft_Slider;
            BoneSlider3.ValueChanged -= HrothWhiskersLeft_Slider;
        }

        private void HrothWhiskersLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothWhiskersLeft_X.value = (float)quat.X;
            CharacterDetails.HrothWhiskersLeft_Y.value = (float)quat.Y;
            CharacterDetails.HrothWhiskersLeft_Z.value = (float)quat.Z;
            CharacterDetails.HrothWhiskersLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothWhiskersLeft_UpDown;
            BoneUpDown2.ValueChanged -= HrothWhiskersLeft_UpDown;
            BoneUpDown3.ValueChanged -= HrothWhiskersLeft_UpDown;
        }

        public void HrothWhiskersLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HrothWhiskersLeft);

            //Load Current Values for Slider
            CharacterDetails.HrothWhiskersLeft_Toggle = true;
        }
        private void HrothWhiskersLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HrothWhiskersLeft_Rotate = false;
        }
        #endregion
        #region HrothWhiskersRight
        private void HrothWhiskersRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothWhiskersRight_X.value = (float)quat.X;
            CharacterDetails.HrothWhiskersRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothWhiskersRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothWhiskersRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= HrothWhiskersRight_Slider;
            BoneSlider2.ValueChanged -= HrothWhiskersRight_Slider;
            BoneSlider3.ValueChanged -= HrothWhiskersRight_Slider;
        }

        private void HrothWhiskersRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.HrothWhiskersRight_X.value = (float)quat.X;
            CharacterDetails.HrothWhiskersRight_Y.value = (float)quat.Y;
            CharacterDetails.HrothWhiskersRight_Z.value = (float)quat.Z;
            CharacterDetails.HrothWhiskersRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= HrothWhiskersRight_UpDown;
            BoneUpDown2.ValueChanged -= HrothWhiskersRight_UpDown;
            BoneUpDown3.ValueChanged -= HrothWhiskersRight_UpDown;
        }

        public void HrothWhiskersRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HrothWhiskersRight);

            //Load Current Values for Slider
            CharacterDetails.HrothWhiskersRight_Toggle = true;
        }
        private void HrothWhiskersRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.HrothWhiskersRight_Rotate = false;
        }
        #endregion
        #region VieraEarALeft
        private void VieraEar01ALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar01ALeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar01ALeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar01ALeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar01ALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar01ALeft_Slider;
            BoneSlider2.ValueChanged -= VieraEar01ALeft_Slider;
            BoneSlider3.ValueChanged -= VieraEar01ALeft_Slider;
        }

        private void VieraEar01ALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar01ALeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar01ALeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar01ALeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar01ALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar01ALeft_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar01ALeft_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar01ALeft_UpDown;
        }

        private void VieraEar02ALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar02ALeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar02ALeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar02ALeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar02ALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar02ALeft_Slider;
            BoneSlider2.ValueChanged -= VieraEar02ALeft_Slider;
            BoneSlider3.ValueChanged -= VieraEar02ALeft_Slider;
        }

        private void VieraEar02ALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar02ALeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar02ALeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar02ALeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar02ALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar02ALeft_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar02ALeft_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar02ALeft_UpDown;
        }

        private void VieraEar03ALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar03ALeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar03ALeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar03ALeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar03ALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar03ALeft_Slider;
            BoneSlider2.ValueChanged -= VieraEar03ALeft_Slider;
            BoneSlider3.ValueChanged -= VieraEar03ALeft_Slider;
        }

        private void VieraEar03ALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar03ALeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar03ALeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar03ALeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar03ALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar03ALeft_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar03ALeft_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar03ALeft_UpDown;
        }

        private void VieraEar04ALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar04ALeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar04ALeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar04ALeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar04ALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar04ALeft_Slider;
            BoneSlider2.ValueChanged -= VieraEar04ALeft_Slider;
            BoneSlider3.ValueChanged -= VieraEar04ALeft_Slider;
        }

        private void VieraEar04ALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar04ALeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar04ALeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar04ALeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar04ALeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar04ALeft_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar04ALeft_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar04ALeft_UpDown;
        }

        public void VieraEarALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(VieraEarALeft);

            //Load Current Values for Slider
            if (CharacterDetails.TailType.value == 0) CharacterDetails.VieraEar01ALeft_Toggle = true;
            if (CharacterDetails.TailType.value == 1) CharacterDetails.VieraEar01ALeft_Toggle = true;
            if (CharacterDetails.TailType.value == 2) CharacterDetails.VieraEar02ALeft_Toggle = true;
            if (CharacterDetails.TailType.value == 3) CharacterDetails.VieraEar03ALeft_Toggle = true;
            if (CharacterDetails.TailType.value == 4) CharacterDetails.VieraEar04ALeft_Toggle = true;
        }
        private void VieraEarALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.VieraEar01ALeft_Rotate = false;
            CharacterDetails.VieraEar02ALeft_Rotate = false;
            CharacterDetails.VieraEar03ALeft_Rotate = false;
            CharacterDetails.VieraEar04ALeft_Rotate = false;
        }
        #endregion
        #region VieraEarARight
        private void VieraEar01ARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar01ARight_X.value = (float)quat.X;
            CharacterDetails.VieraEar01ARight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar01ARight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar01ARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar01ARight_Slider;
            BoneSlider2.ValueChanged -= VieraEar01ARight_Slider;
            BoneSlider3.ValueChanged -= VieraEar01ARight_Slider;
        }

        private void VieraEar01ARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar01ARight_X.value = (float)quat.X;
            CharacterDetails.VieraEar01ARight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar01ARight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar01ARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar01ARight_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar01ARight_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar01ARight_UpDown;
        }

        private void VieraEar02ARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar02ARight_X.value = (float)quat.X;
            CharacterDetails.VieraEar02ARight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar02ARight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar02ARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar02ARight_Slider;
            BoneSlider2.ValueChanged -= VieraEar02ARight_Slider;
            BoneSlider3.ValueChanged -= VieraEar02ARight_Slider;
        }

        private void VieraEar02ARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar02ARight_X.value = (float)quat.X;
            CharacterDetails.VieraEar02ARight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar02ARight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar02ARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar02ARight_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar02ARight_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar02ARight_UpDown;
        }

        private void VieraEar03ARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar03ARight_X.value = (float)quat.X;
            CharacterDetails.VieraEar03ARight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar03ARight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar03ARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar03ARight_Slider;
            BoneSlider2.ValueChanged -= VieraEar03ARight_Slider;
            BoneSlider3.ValueChanged -= VieraEar03ARight_Slider;
        }

        private void VieraEar03ARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar03ARight_X.value = (float)quat.X;
            CharacterDetails.VieraEar03ARight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar03ARight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar03ARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar03ARight_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar03ARight_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar03ARight_UpDown;
        }

        private void VieraEar04ARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar04ARight_X.value = (float)quat.X;
            CharacterDetails.VieraEar04ARight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar04ARight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar04ARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar04ARight_Slider;
            BoneSlider2.ValueChanged -= VieraEar04ARight_Slider;
            BoneSlider3.ValueChanged -= VieraEar04ARight_Slider;
        }

        private void VieraEar04ARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar04ARight_X.value = (float)quat.X;
            CharacterDetails.VieraEar04ARight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar04ARight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar04ARight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar04ARight_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar04ARight_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar04ARight_UpDown;
        }

        public void VieraEarARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(VieraEarARight);

            //Load Current Values for Slider
            if (CharacterDetails.TailType.value == 0) CharacterDetails.VieraEar01ARight_Toggle = true;
            if (CharacterDetails.TailType.value == 1) CharacterDetails.VieraEar01ARight_Toggle = true;
            if (CharacterDetails.TailType.value == 2) CharacterDetails.VieraEar02ARight_Toggle = true;
            if (CharacterDetails.TailType.value == 3) CharacterDetails.VieraEar03ARight_Toggle = true;
            if (CharacterDetails.TailType.value == 4) CharacterDetails.VieraEar04ARight_Toggle = true;
        }
        private void VieraEarARight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.VieraEar01ARight_Rotate = false;
            CharacterDetails.VieraEar02ARight_Rotate = false;
            CharacterDetails.VieraEar03ARight_Rotate = false;
            CharacterDetails.VieraEar04ARight_Rotate = false;
        }
        #endregion
        #region VieraEarBLeft
        private void VieraEar01BLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar01BLeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar01BLeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar01BLeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar01BLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar01BLeft_Slider;
            BoneSlider2.ValueChanged -= VieraEar01BLeft_Slider;
            BoneSlider3.ValueChanged -= VieraEar01BLeft_Slider;
        }

        private void VieraEar01BLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar01BLeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar01BLeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar01BLeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar01BLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar01BLeft_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar01BLeft_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar01BLeft_UpDown;
        }

        private void VieraEar02BLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar02BLeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar02BLeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar02BLeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar02BLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar02BLeft_Slider;
            BoneSlider2.ValueChanged -= VieraEar02BLeft_Slider;
            BoneSlider3.ValueChanged -= VieraEar02BLeft_Slider;
        }

        private void VieraEar02BLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar02BLeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar02BLeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar02BLeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar02BLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar02BLeft_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar02BLeft_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar02BLeft_UpDown;
        }

        private void VieraEar03BLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar03BLeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar03BLeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar03BLeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar03BLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar03BLeft_Slider;
            BoneSlider2.ValueChanged -= VieraEar03BLeft_Slider;
            BoneSlider3.ValueChanged -= VieraEar03BLeft_Slider;
        }

        private void VieraEar03BLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar03BLeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar03BLeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar03BLeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar03BLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar03BLeft_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar03BLeft_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar03BLeft_UpDown;
        }

        private void VieraEar04BLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar04BLeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar04BLeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar04BLeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar04BLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar04BLeft_Slider;
            BoneSlider2.ValueChanged -= VieraEar04BLeft_Slider;
            BoneSlider3.ValueChanged -= VieraEar04BLeft_Slider;
        }

        private void VieraEar04BLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar04BLeft_X.value = (float)quat.X;
            CharacterDetails.VieraEar04BLeft_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar04BLeft_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar04BLeft_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar04BLeft_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar04BLeft_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar04BLeft_UpDown;
        }

        public void VieraEarBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(VieraEarBLeft);

            //Load Current Values for Slider
            if (CharacterDetails.TailType.value == 0) CharacterDetails.VieraEar01BLeft_Toggle = true;
            if (CharacterDetails.TailType.value == 1) CharacterDetails.VieraEar01BLeft_Toggle = true;
            if (CharacterDetails.TailType.value == 2) CharacterDetails.VieraEar02BLeft_Toggle = true;
            if (CharacterDetails.TailType.value == 3) CharacterDetails.VieraEar03BLeft_Toggle = true;
            if (CharacterDetails.TailType.value == 4) CharacterDetails.VieraEar04BLeft_Toggle = true;
        }
        private void VieraEarBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.VieraEar01BLeft_Rotate = false;
            CharacterDetails.VieraEar02BLeft_Rotate = false;
            CharacterDetails.VieraEar03BLeft_Rotate = false;
            CharacterDetails.VieraEar04BLeft_Rotate = false;
        }
        #endregion
        #region VieraEarBRight
        private void VieraEar01BRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar01BRight_X.value = (float)quat.X;
            CharacterDetails.VieraEar01BRight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar01BRight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar01BRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar01BRight_Slider;
            BoneSlider2.ValueChanged -= VieraEar01BRight_Slider;
            BoneSlider3.ValueChanged -= VieraEar01BRight_Slider;
        }

        private void VieraEar01BRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar01BRight_X.value = (float)quat.X;
            CharacterDetails.VieraEar01BRight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar01BRight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar01BRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar01BRight_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar01BRight_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar01BRight_UpDown;
        }

        private void VieraEar02BRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar02BRight_X.value = (float)quat.X;
            CharacterDetails.VieraEar02BRight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar02BRight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar02BRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar02BRight_Slider;
            BoneSlider2.ValueChanged -= VieraEar02BRight_Slider;
            BoneSlider3.ValueChanged -= VieraEar02BRight_Slider;
        }

        private void VieraEar02BRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar02BRight_X.value = (float)quat.X;
            CharacterDetails.VieraEar02BRight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar02BRight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar02BRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar02BRight_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar02BRight_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar02BRight_UpDown;
        }

        private void VieraEar03BRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar03BRight_X.value = (float)quat.X;
            CharacterDetails.VieraEar03BRight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar03BRight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar03BRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar03BRight_Slider;
            BoneSlider2.ValueChanged -= VieraEar03BRight_Slider;
            BoneSlider3.ValueChanged -= VieraEar03BRight_Slider;
        }

        private void VieraEar03BRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar03BRight_X.value = (float)quat.X;
            CharacterDetails.VieraEar03BRight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar03BRight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar03BRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar03BRight_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar03BRight_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar03BRight_UpDown;
        }

        private void VieraEar04BRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar04BRight_X.value = (float)quat.X;
            CharacterDetails.VieraEar04BRight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar04BRight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar04BRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneSlider.ValueChanged -= VieraEar04BRight_Slider;
            BoneSlider2.ValueChanged -= VieraEar04BRight_Slider;
            BoneSlider3.ValueChanged -= VieraEar04BRight_Slider;
        }

        private void VieraEar04BRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.VieraEar04BRight_X.value = (float)quat.X;
            CharacterDetails.VieraEar04BRight_Y.value = (float)quat.Y;
            CharacterDetails.VieraEar04BRight_Z.value = (float)quat.Z;
            CharacterDetails.VieraEar04BRight_W.value = (float)quat.W;
            // Remove listeners for value changed.
            BoneUpDown.ValueChanged -= VieraEar04BRight_UpDown;
            BoneUpDown2.ValueChanged -= VieraEar04BRight_UpDown;
            BoneUpDown3.ValueChanged -= VieraEar04BRight_UpDown;
        }

        public void VieraEarBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(VieraEarBRight);

            //Load Current Values for Slider
            if (CharacterDetails.TailType.value == 0) CharacterDetails.VieraEar01BRight_Toggle = true;
            if (CharacterDetails.TailType.value == 1) CharacterDetails.VieraEar01BRight_Toggle = true;
            if (CharacterDetails.TailType.value == 2) CharacterDetails.VieraEar02BRight_Toggle = true;
            if (CharacterDetails.TailType.value == 3) CharacterDetails.VieraEar03BRight_Toggle = true;
            if (CharacterDetails.TailType.value == 4) CharacterDetails.VieraEar04BRight_Toggle = true;
        }
        private void VieraEarBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.VieraEar01BRight_Rotate = false;
            CharacterDetails.VieraEar02BRight_Rotate = false;
            CharacterDetails.VieraEar03BRight_Rotate = false;
            CharacterDetails.VieraEar04BRight_Rotate = false;
        }
        #endregion

        #region ExHairA
        private void ExHairA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairA_X.value = (float)quat.X;
            CharacterDetails.ExHairA_Y.value = (float)quat.Y;
            CharacterDetails.ExHairA_Z.value = (float)quat.Z;
            CharacterDetails.ExHairA_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairA_Slider;
            BoneSlider2.ValueChanged -= ExHairA_Slider;
            BoneSlider3.ValueChanged -= ExHairA_Slider;
        }

        private void ExHairA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairA_X.value = (float)quat.X;
            CharacterDetails.ExHairA_Y.value = (float)quat.Y;
            CharacterDetails.ExHairA_Z.value = (float)quat.Z;
            CharacterDetails.ExHairA_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairA_UpDown;
            BoneUpDown2.ValueChanged -= ExHairA_UpDown;
            BoneUpDown3.ValueChanged -= ExHairA_UpDown;
        }

        public void ExHairA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairA);

            //Load Current Values for Slider
            CharacterDetails.ExHairA_Toggle = true;
        }
        private void ExHairA_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairA_Rotate = false;
        }
        #endregion
        #region ExHairB
        private void ExHairB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairB_X.value = (float)quat.X;
            CharacterDetails.ExHairB_Y.value = (float)quat.Y;
            CharacterDetails.ExHairB_Z.value = (float)quat.Z;
            CharacterDetails.ExHairB_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairB_Slider;
            BoneSlider2.ValueChanged -= ExHairB_Slider;
            BoneSlider3.ValueChanged -= ExHairB_Slider;
        }

        private void ExHairB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairB_X.value = (float)quat.X;
            CharacterDetails.ExHairB_Y.value = (float)quat.Y;
            CharacterDetails.ExHairB_Z.value = (float)quat.Z;
            CharacterDetails.ExHairB_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairB_UpDown;
            BoneUpDown2.ValueChanged -= ExHairB_UpDown;
            BoneUpDown3.ValueChanged -= ExHairB_UpDown;
        }

        public void ExHairB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairB);

            //Load Current Values for Slider
            CharacterDetails.ExHairB_Toggle = true;
        }
        private void ExHairB_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairB_Rotate = false;
        }
        #endregion
        #region ExHairC
        private void ExHairC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairC_X.value = (float)quat.X;
            CharacterDetails.ExHairC_Y.value = (float)quat.Y;
            CharacterDetails.ExHairC_Z.value = (float)quat.Z;
            CharacterDetails.ExHairC_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairC_Slider;
            BoneSlider2.ValueChanged -= ExHairC_Slider;
            BoneSlider3.ValueChanged -= ExHairC_Slider;
        }

        private void ExHairC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairC_X.value = (float)quat.X;
            CharacterDetails.ExHairC_Y.value = (float)quat.Y;
            CharacterDetails.ExHairC_Z.value = (float)quat.Z;
            CharacterDetails.ExHairC_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairC_UpDown;
            BoneUpDown2.ValueChanged -= ExHairC_UpDown;
            BoneUpDown3.ValueChanged -= ExHairC_UpDown;
        }

        public void ExHairC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairC);

            //Load Current Values for Slider
            CharacterDetails.ExHairC_Toggle = true;
        }
        private void ExHairC_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairC_Rotate = false;
        }
        #endregion
        #region ExHairD
        private void ExHairD_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairD_X.value = (float)quat.X;
            CharacterDetails.ExHairD_Y.value = (float)quat.Y;
            CharacterDetails.ExHairD_Z.value = (float)quat.Z;
            CharacterDetails.ExHairD_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairD_Slider;
            BoneSlider2.ValueChanged -= ExHairD_Slider;
            BoneSlider3.ValueChanged -= ExHairD_Slider;
        }

        private void ExHairD_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairD_X.value = (float)quat.X;
            CharacterDetails.ExHairD_Y.value = (float)quat.Y;
            CharacterDetails.ExHairD_Z.value = (float)quat.Z;
            CharacterDetails.ExHairD_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairD_UpDown;
            BoneUpDown2.ValueChanged -= ExHairD_UpDown;
            BoneUpDown3.ValueChanged -= ExHairD_UpDown;
        }

        public void ExHairD_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairD);

            //Load Current Values for Slider
            CharacterDetails.ExHairD_Toggle = true;
        }
        private void ExHairD_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairD_Rotate = false;
        }
        #endregion
        #region ExHairE
        private void ExHairE_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairE_X.value = (float)quat.X;
            CharacterDetails.ExHairE_Y.value = (float)quat.Y;
            CharacterDetails.ExHairE_Z.value = (float)quat.Z;
            CharacterDetails.ExHairE_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairE_Slider;
            BoneSlider2.ValueChanged -= ExHairE_Slider;
            BoneSlider3.ValueChanged -= ExHairE_Slider;
        }

        private void ExHairE_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairE_X.value = (float)quat.X;
            CharacterDetails.ExHairE_Y.value = (float)quat.Y;
            CharacterDetails.ExHairE_Z.value = (float)quat.Z;
            CharacterDetails.ExHairE_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairE_UpDown;
            BoneUpDown2.ValueChanged -= ExHairE_UpDown;
            BoneUpDown3.ValueChanged -= ExHairE_UpDown;
        }

        public void ExHairE_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairE);

            //Load Current Values for Slider
            CharacterDetails.ExHairE_Toggle = true;
        }
        private void ExHairE_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairE_Rotate = false;
        }
        #endregion
        #region ExHairF
        private void ExHairF_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairF_X.value = (float)quat.X;
            CharacterDetails.ExHairF_Y.value = (float)quat.Y;
            CharacterDetails.ExHairF_Z.value = (float)quat.Z;
            CharacterDetails.ExHairF_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairF_Slider;
            BoneSlider2.ValueChanged -= ExHairF_Slider;
            BoneSlider3.ValueChanged -= ExHairF_Slider;
        }

        private void ExHairF_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairF_X.value = (float)quat.X;
            CharacterDetails.ExHairF_Y.value = (float)quat.Y;
            CharacterDetails.ExHairF_Z.value = (float)quat.Z;
            CharacterDetails.ExHairF_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairF_UpDown;
            BoneUpDown2.ValueChanged -= ExHairF_UpDown;
            BoneUpDown3.ValueChanged -= ExHairF_UpDown;
        }

        public void ExHairF_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairF);

            //Load Current Values for Slider
            CharacterDetails.ExHairF_Toggle = true;
        }
        private void ExHairF_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairF_Rotate = false;
        }
        #endregion
        #region ExHairG
        private void ExHairG_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairG_X.value = (float)quat.X;
            CharacterDetails.ExHairG_Y.value = (float)quat.Y;
            CharacterDetails.ExHairG_Z.value = (float)quat.Z;
            CharacterDetails.ExHairG_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairG_Slider;
            BoneSlider2.ValueChanged -= ExHairG_Slider;
            BoneSlider3.ValueChanged -= ExHairG_Slider;
        }

        private void ExHairG_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairG_X.value = (float)quat.X;
            CharacterDetails.ExHairG_Y.value = (float)quat.Y;
            CharacterDetails.ExHairG_Z.value = (float)quat.Z;
            CharacterDetails.ExHairG_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairG_UpDown;
            BoneUpDown2.ValueChanged -= ExHairG_UpDown;
            BoneUpDown3.ValueChanged -= ExHairG_UpDown;
        }

        public void ExHairG_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairG);

            //Load Current Values for Slider
            CharacterDetails.ExHairG_Toggle = true;
        }
        private void ExHairG_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairG_Rotate = false;
        }
        #endregion
        #region ExHairH
        private void ExHairH_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairH_X.value = (float)quat.X;
            CharacterDetails.ExHairH_Y.value = (float)quat.Y;
            CharacterDetails.ExHairH_Z.value = (float)quat.Z;
            CharacterDetails.ExHairH_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairH_Slider;
            BoneSlider2.ValueChanged -= ExHairH_Slider;
            BoneSlider3.ValueChanged -= ExHairH_Slider;
        }

        private void ExHairH_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairH_X.value = (float)quat.X;
            CharacterDetails.ExHairH_Y.value = (float)quat.Y;
            CharacterDetails.ExHairH_Z.value = (float)quat.Z;
            CharacterDetails.ExHairH_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairH_UpDown;
            BoneUpDown2.ValueChanged -= ExHairH_UpDown;
            BoneUpDown3.ValueChanged -= ExHairH_UpDown;
        }

        public void ExHairH_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairH);

            //Load Current Values for Slider
            CharacterDetails.ExHairH_Toggle = true;
        }
        private void ExHairH_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairH_Rotate = false;
        }
        #endregion
        #region ExHairI
        private void ExHairI_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairI_X.value = (float)quat.X;
            CharacterDetails.ExHairI_Y.value = (float)quat.Y;
            CharacterDetails.ExHairI_Z.value = (float)quat.Z;
            CharacterDetails.ExHairI_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairI_Slider;
            BoneSlider2.ValueChanged -= ExHairI_Slider;
            BoneSlider3.ValueChanged -= ExHairI_Slider;
        }

        private void ExHairI_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairI_X.value = (float)quat.X;
            CharacterDetails.ExHairI_Y.value = (float)quat.Y;
            CharacterDetails.ExHairI_Z.value = (float)quat.Z;
            CharacterDetails.ExHairI_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairI_UpDown;
            BoneUpDown2.ValueChanged -= ExHairI_UpDown;
            BoneUpDown3.ValueChanged -= ExHairI_UpDown;
        }

        public void ExHairI_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairI);

            //Load Current Values for Slider
            CharacterDetails.ExHairI_Toggle = true;
        }
        private void ExHairI_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairI_Rotate = false;
        }
        #endregion
        #region ExHairJ
        private void ExHairJ_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairJ_X.value = (float)quat.X;
            CharacterDetails.ExHairJ_Y.value = (float)quat.Y;
            CharacterDetails.ExHairJ_Z.value = (float)quat.Z;
            CharacterDetails.ExHairJ_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairJ_Slider;
            BoneSlider2.ValueChanged -= ExHairJ_Slider;
            BoneSlider3.ValueChanged -= ExHairJ_Slider;
        }

        private void ExHairJ_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairJ_X.value = (float)quat.X;
            CharacterDetails.ExHairJ_Y.value = (float)quat.Y;
            CharacterDetails.ExHairJ_Z.value = (float)quat.Z;
            CharacterDetails.ExHairJ_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairJ_UpDown;
            BoneUpDown2.ValueChanged -= ExHairJ_UpDown;
            BoneUpDown3.ValueChanged -= ExHairJ_UpDown;
        }

        public void ExHairJ_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairJ);

            //Load Current Values for Slider
            CharacterDetails.ExHairJ_Toggle = true;
        }
        private void ExHairJ_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairJ_Rotate = false;
        }
        #endregion
        #region ExHairK
        private void ExHairK_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairK_X.value = (float)quat.X;
            CharacterDetails.ExHairK_Y.value = (float)quat.Y;
            CharacterDetails.ExHairK_Z.value = (float)quat.Z;
            CharacterDetails.ExHairK_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairK_Slider;
            BoneSlider2.ValueChanged -= ExHairK_Slider;
            BoneSlider3.ValueChanged -= ExHairK_Slider;
        }

        private void ExHairK_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairK_X.value = (float)quat.X;
            CharacterDetails.ExHairK_Y.value = (float)quat.Y;
            CharacterDetails.ExHairK_Z.value = (float)quat.Z;
            CharacterDetails.ExHairK_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairK_UpDown;
            BoneUpDown2.ValueChanged -= ExHairK_UpDown;
            BoneUpDown3.ValueChanged -= ExHairK_UpDown;
        }

        public void ExHairK_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairK);

            //Load Current Values for Slider
            CharacterDetails.ExHairK_Toggle = true;
        }
        private void ExHairK_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairK_Rotate = false;
        }
        #endregion
        #region ExHairL
        private void ExHairL_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairL_X.value = (float)quat.X;
            CharacterDetails.ExHairL_Y.value = (float)quat.Y;
            CharacterDetails.ExHairL_Z.value = (float)quat.Z;
            CharacterDetails.ExHairL_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExHairL_Slider;
            BoneSlider2.ValueChanged -= ExHairL_Slider;
            BoneSlider3.ValueChanged -= ExHairL_Slider;
        }

        private void ExHairL_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExHairL_X.value = (float)quat.X;
            CharacterDetails.ExHairL_Y.value = (float)quat.Y;
            CharacterDetails.ExHairL_Z.value = (float)quat.Z;
            CharacterDetails.ExHairL_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExHairL_UpDown;
            BoneUpDown2.ValueChanged -= ExHairL_UpDown;
            BoneUpDown3.ValueChanged -= ExHairL_UpDown;
        }

        public void ExHairL_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairL);

            //Load Current Values for Slider
            CharacterDetails.ExHairL_Toggle = true;
        }
        private void ExHairL_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExHairL_Rotate = false;
        }
        #endregion

        #region ExMetA
        private void ExMetA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetA_X.value = (float)quat.X;
            CharacterDetails.ExMetA_Y.value = (float)quat.Y;
            CharacterDetails.ExMetA_Z.value = (float)quat.Z;
            CharacterDetails.ExMetA_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetA_Slider;
            BoneSlider2.ValueChanged -= ExMetA_Slider;
            BoneSlider3.ValueChanged -= ExMetA_Slider;
        }

        private void ExMetA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetA_X.value = (float)quat.X;
            CharacterDetails.ExMetA_Y.value = (float)quat.Y;
            CharacterDetails.ExMetA_Z.value = (float)quat.Z;
            CharacterDetails.ExMetA_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetA_UpDown;
            BoneUpDown2.ValueChanged -= ExMetA_UpDown;
            BoneUpDown3.ValueChanged -= ExMetA_UpDown;
        }

        public void ExMetA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetA);

            //Load Current Values for Slider
            CharacterDetails.ExMetA_Toggle = true;
        }
        private void ExMetA_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetA_Rotate = false;
        }
        #endregion
        #region ExMetB
        private void ExMetB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetB_X.value = (float)quat.X;
            CharacterDetails.ExMetB_Y.value = (float)quat.Y;
            CharacterDetails.ExMetB_Z.value = (float)quat.Z;
            CharacterDetails.ExMetB_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetB_Slider;
            BoneSlider2.ValueChanged -= ExMetB_Slider;
            BoneSlider3.ValueChanged -= ExMetB_Slider;
        }

        private void ExMetB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetB_X.value = (float)quat.X;
            CharacterDetails.ExMetB_Y.value = (float)quat.Y;
            CharacterDetails.ExMetB_Z.value = (float)quat.Z;
            CharacterDetails.ExMetB_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetB_UpDown;
            BoneUpDown2.ValueChanged -= ExMetB_UpDown;
            BoneUpDown3.ValueChanged -= ExMetB_UpDown;
        }

        public void ExMetB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetB);

            //Load Current Values for Slider
            CharacterDetails.ExMetB_Toggle = true;
        }
        private void ExMetB_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetB_Rotate = false;
        }
        #endregion
        #region ExMetC
        private void ExMetC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetC_X.value = (float)quat.X;
            CharacterDetails.ExMetC_Y.value = (float)quat.Y;
            CharacterDetails.ExMetC_Z.value = (float)quat.Z;
            CharacterDetails.ExMetC_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetC_Slider;
            BoneSlider2.ValueChanged -= ExMetC_Slider;
            BoneSlider3.ValueChanged -= ExMetC_Slider;
        }

        private void ExMetC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetC_X.value = (float)quat.X;
            CharacterDetails.ExMetC_Y.value = (float)quat.Y;
            CharacterDetails.ExMetC_Z.value = (float)quat.Z;
            CharacterDetails.ExMetC_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetC_UpDown;
            BoneUpDown2.ValueChanged -= ExMetC_UpDown;
            BoneUpDown3.ValueChanged -= ExMetC_UpDown;
        }

        public void ExMetC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetC);

            //Load Current Values for Slider
            CharacterDetails.ExMetC_Toggle = true;
        }
        private void ExMetC_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetC_Rotate = false;
        }
        #endregion
        #region ExMetD
        private void ExMetD_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetD_X.value = (float)quat.X;
            CharacterDetails.ExMetD_Y.value = (float)quat.Y;
            CharacterDetails.ExMetD_Z.value = (float)quat.Z;
            CharacterDetails.ExMetD_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetD_Slider;
            BoneSlider2.ValueChanged -= ExMetD_Slider;
            BoneSlider3.ValueChanged -= ExMetD_Slider;
        }

        private void ExMetD_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetD_X.value = (float)quat.X;
            CharacterDetails.ExMetD_Y.value = (float)quat.Y;
            CharacterDetails.ExMetD_Z.value = (float)quat.Z;
            CharacterDetails.ExMetD_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetD_UpDown;
            BoneUpDown2.ValueChanged -= ExMetD_UpDown;
            BoneUpDown3.ValueChanged -= ExMetD_UpDown;
        }

        public void ExMetD_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetD);

            //Load Current Values for Slider
            CharacterDetails.ExMetD_Toggle = true;
        }
        private void ExMetD_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetD_Rotate = false;
        }
        #endregion
        #region ExMetE
        private void ExMetE_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetE_X.value = (float)quat.X;
            CharacterDetails.ExMetE_Y.value = (float)quat.Y;
            CharacterDetails.ExMetE_Z.value = (float)quat.Z;
            CharacterDetails.ExMetE_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetE_Slider;
            BoneSlider2.ValueChanged -= ExMetE_Slider;
            BoneSlider3.ValueChanged -= ExMetE_Slider;
        }

        private void ExMetE_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetE_X.value = (float)quat.X;
            CharacterDetails.ExMetE_Y.value = (float)quat.Y;
            CharacterDetails.ExMetE_Z.value = (float)quat.Z;
            CharacterDetails.ExMetE_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetE_UpDown;
            BoneUpDown2.ValueChanged -= ExMetE_UpDown;
            BoneUpDown3.ValueChanged -= ExMetE_UpDown;
        }

        public void ExMetE_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetE);

            //Load Current Values for Slider
            CharacterDetails.ExMetE_Toggle = true;
        }
        private void ExMetE_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetE_Rotate = false;
        }
        #endregion
        #region ExMetF
        private void ExMetF_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetF_X.value = (float)quat.X;
            CharacterDetails.ExMetF_Y.value = (float)quat.Y;
            CharacterDetails.ExMetF_Z.value = (float)quat.Z;
            CharacterDetails.ExMetF_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetF_Slider;
            BoneSlider2.ValueChanged -= ExMetF_Slider;
            BoneSlider3.ValueChanged -= ExMetF_Slider;
        }

        private void ExMetF_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetF_X.value = (float)quat.X;
            CharacterDetails.ExMetF_Y.value = (float)quat.Y;
            CharacterDetails.ExMetF_Z.value = (float)quat.Z;
            CharacterDetails.ExMetF_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetF_UpDown;
            BoneUpDown2.ValueChanged -= ExMetF_UpDown;
            BoneUpDown3.ValueChanged -= ExMetF_UpDown;
        }

        public void ExMetF_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetF);

            //Load Current Values for Slider
            CharacterDetails.ExMetF_Toggle = true;
        }
        private void ExMetF_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetF_Rotate = false;
        }
        #endregion
        #region ExMetG
        private void ExMetG_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetG_X.value = (float)quat.X;
            CharacterDetails.ExMetG_Y.value = (float)quat.Y;
            CharacterDetails.ExMetG_Z.value = (float)quat.Z;
            CharacterDetails.ExMetG_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetG_Slider;
            BoneSlider2.ValueChanged -= ExMetG_Slider;
            BoneSlider3.ValueChanged -= ExMetG_Slider;
        }

        private void ExMetG_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetG_X.value = (float)quat.X;
            CharacterDetails.ExMetG_Y.value = (float)quat.Y;
            CharacterDetails.ExMetG_Z.value = (float)quat.Z;
            CharacterDetails.ExMetG_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetG_UpDown;
            BoneUpDown2.ValueChanged -= ExMetG_UpDown;
            BoneUpDown3.ValueChanged -= ExMetG_UpDown;
        }

        public void ExMetG_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetG);

            //Load Current Values for Slider
            CharacterDetails.ExMetG_Toggle = true;
        }
        private void ExMetG_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetG_Rotate = false;
        }
        #endregion
        #region ExMetH
        private void ExMetH_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetH_X.value = (float)quat.X;
            CharacterDetails.ExMetH_Y.value = (float)quat.Y;
            CharacterDetails.ExMetH_Z.value = (float)quat.Z;
            CharacterDetails.ExMetH_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetH_Slider;
            BoneSlider2.ValueChanged -= ExMetH_Slider;
            BoneSlider3.ValueChanged -= ExMetH_Slider;
        }

        private void ExMetH_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetH_X.value = (float)quat.X;
            CharacterDetails.ExMetH_Y.value = (float)quat.Y;
            CharacterDetails.ExMetH_Z.value = (float)quat.Z;
            CharacterDetails.ExMetH_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetH_UpDown;
            BoneUpDown2.ValueChanged -= ExMetH_UpDown;
            BoneUpDown3.ValueChanged -= ExMetH_UpDown;
        }

        public void ExMetH_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetH);

            //Load Current Values for Slider
            CharacterDetails.ExMetH_Toggle = true;
        }
        private void ExMetH_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetH_Rotate = false;
        }
        #endregion
        #region ExMetI
        private void ExMetI_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetI_X.value = (float)quat.X;
            CharacterDetails.ExMetI_Y.value = (float)quat.Y;
            CharacterDetails.ExMetI_Z.value = (float)quat.Z;
            CharacterDetails.ExMetI_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetI_Slider;
            BoneSlider2.ValueChanged -= ExMetI_Slider;
            BoneSlider3.ValueChanged -= ExMetI_Slider;
        }

        private void ExMetI_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetI_X.value = (float)quat.X;
            CharacterDetails.ExMetI_Y.value = (float)quat.Y;
            CharacterDetails.ExMetI_Z.value = (float)quat.Z;
            CharacterDetails.ExMetI_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetI_UpDown;
            BoneUpDown2.ValueChanged -= ExMetI_UpDown;
            BoneUpDown3.ValueChanged -= ExMetI_UpDown;
        }

        public void ExMetI_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetI);

            //Load Current Values for Slider
            CharacterDetails.ExMetI_Toggle = true;
        }
        private void ExMetI_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetI_Rotate = false;
        }
        #endregion
        #region ExMetJ
        private void ExMetJ_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetJ_X.value = (float)quat.X;
            CharacterDetails.ExMetJ_Y.value = (float)quat.Y;
            CharacterDetails.ExMetJ_Z.value = (float)quat.Z;
            CharacterDetails.ExMetJ_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetJ_Slider;
            BoneSlider2.ValueChanged -= ExMetJ_Slider;
            BoneSlider3.ValueChanged -= ExMetJ_Slider;
        }

        private void ExMetJ_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetJ_X.value = (float)quat.X;
            CharacterDetails.ExMetJ_Y.value = (float)quat.Y;
            CharacterDetails.ExMetJ_Z.value = (float)quat.Z;
            CharacterDetails.ExMetJ_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetJ_UpDown;
            BoneUpDown2.ValueChanged -= ExMetJ_UpDown;
            BoneUpDown3.ValueChanged -= ExMetJ_UpDown;
        }

        public void ExMetJ_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetJ);

            //Load Current Values for Slider
            CharacterDetails.ExMetJ_Toggle = true;
        }
        private void ExMetJ_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetJ_Rotate = false;
        }
        #endregion
        #region ExMetK
        private void ExMetK_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetK_X.value = (float)quat.X;
            CharacterDetails.ExMetK_Y.value = (float)quat.Y;
            CharacterDetails.ExMetK_Z.value = (float)quat.Z;
            CharacterDetails.ExMetK_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetK_Slider;
            BoneSlider2.ValueChanged -= ExMetK_Slider;
            BoneSlider3.ValueChanged -= ExMetK_Slider;
        }

        private void ExMetK_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetK_X.value = (float)quat.X;
            CharacterDetails.ExMetK_Y.value = (float)quat.Y;
            CharacterDetails.ExMetK_Z.value = (float)quat.Z;
            CharacterDetails.ExMetK_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetK_UpDown;
            BoneUpDown2.ValueChanged -= ExMetK_UpDown;
            BoneUpDown3.ValueChanged -= ExMetK_UpDown;
        }

        public void ExMetK_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetK);

            //Load Current Values for Slider
            CharacterDetails.ExMetK_Toggle = true;
        }
        private void ExMetK_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetK_Rotate = false;
        }
        #endregion
        #region ExMetL
        private void ExMetL_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetL_X.value = (float)quat.X;
            CharacterDetails.ExMetL_Y.value = (float)quat.Y;
            CharacterDetails.ExMetL_Z.value = (float)quat.Z;
            CharacterDetails.ExMetL_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetL_Slider;
            BoneSlider2.ValueChanged -= ExMetL_Slider;
            BoneSlider3.ValueChanged -= ExMetL_Slider;
        }

        private void ExMetL_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetL_X.value = (float)quat.X;
            CharacterDetails.ExMetL_Y.value = (float)quat.Y;
            CharacterDetails.ExMetL_Z.value = (float)quat.Z;
            CharacterDetails.ExMetL_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetL_UpDown;
            BoneUpDown2.ValueChanged -= ExMetL_UpDown;
            BoneUpDown3.ValueChanged -= ExMetL_UpDown;
        }

        public void ExMetL_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetL);

            //Load Current Values for Slider
            CharacterDetails.ExMetL_Toggle = true;
        }
        private void ExMetL_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetL_Rotate = false;
        }
        #endregion
        #region ExMetM
        private void ExMetM_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetM_X.value = (float)quat.X;
            CharacterDetails.ExMetM_Y.value = (float)quat.Y;
            CharacterDetails.ExMetM_Z.value = (float)quat.Z;
            CharacterDetails.ExMetM_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetM_Slider;
            BoneSlider2.ValueChanged -= ExMetM_Slider;
            BoneSlider3.ValueChanged -= ExMetM_Slider;
        }

        private void ExMetM_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetM_X.value = (float)quat.X;
            CharacterDetails.ExMetM_Y.value = (float)quat.Y;
            CharacterDetails.ExMetM_Z.value = (float)quat.Z;
            CharacterDetails.ExMetM_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetM_UpDown;
            BoneUpDown2.ValueChanged -= ExMetM_UpDown;
            BoneUpDown3.ValueChanged -= ExMetM_UpDown;
        }

        public void ExMetM_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetM);

            //Load Current Values for Slider
            CharacterDetails.ExMetM_Toggle = true;
        }
        private void ExMetM_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetM_Rotate = false;
        }
        #endregion
        #region ExMetN
        private void ExMetN_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetN_X.value = (float)quat.X;
            CharacterDetails.ExMetN_Y.value = (float)quat.Y;
            CharacterDetails.ExMetN_Z.value = (float)quat.Z;
            CharacterDetails.ExMetN_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetN_Slider;
            BoneSlider2.ValueChanged -= ExMetN_Slider;
            BoneSlider3.ValueChanged -= ExMetN_Slider;
        }

        private void ExMetN_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetN_X.value = (float)quat.X;
            CharacterDetails.ExMetN_Y.value = (float)quat.Y;
            CharacterDetails.ExMetN_Z.value = (float)quat.Z;
            CharacterDetails.ExMetN_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetN_UpDown;
            BoneUpDown2.ValueChanged -= ExMetN_UpDown;
            BoneUpDown3.ValueChanged -= ExMetN_UpDown;
        }

        public void ExMetN_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetN);

            //Load Current Values for Slider
            CharacterDetails.ExMetN_Toggle = true;
        }
        private void ExMetN_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetN_Rotate = false;
        }
        #endregion
        #region ExMetO
        private void ExMetO_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetO_X.value = (float)quat.X;
            CharacterDetails.ExMetO_Y.value = (float)quat.Y;
            CharacterDetails.ExMetO_Z.value = (float)quat.Z;
            CharacterDetails.ExMetO_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetO_Slider;
            BoneSlider2.ValueChanged -= ExMetO_Slider;
            BoneSlider3.ValueChanged -= ExMetO_Slider;
        }

        private void ExMetO_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetO_X.value = (float)quat.X;
            CharacterDetails.ExMetO_Y.value = (float)quat.Y;
            CharacterDetails.ExMetO_Z.value = (float)quat.Z;
            CharacterDetails.ExMetO_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetO_UpDown;
            BoneUpDown2.ValueChanged -= ExMetO_UpDown;
            BoneUpDown3.ValueChanged -= ExMetO_UpDown;
        }

        public void ExMetO_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetO);

            //Load Current Values for Slider
            CharacterDetails.ExMetO_Toggle = true;
        }
        private void ExMetO_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetO_Rotate = false;
        }
        #endregion
        #region ExMetP
        private void ExMetP_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetP_X.value = (float)quat.X;
            CharacterDetails.ExMetP_Y.value = (float)quat.Y;
            CharacterDetails.ExMetP_Z.value = (float)quat.Z;
            CharacterDetails.ExMetP_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetP_Slider;
            BoneSlider2.ValueChanged -= ExMetP_Slider;
            BoneSlider3.ValueChanged -= ExMetP_Slider;
        }

        private void ExMetP_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetP_X.value = (float)quat.X;
            CharacterDetails.ExMetP_Y.value = (float)quat.Y;
            CharacterDetails.ExMetP_Z.value = (float)quat.Z;
            CharacterDetails.ExMetP_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetP_UpDown;
            BoneUpDown2.ValueChanged -= ExMetP_UpDown;
            BoneUpDown3.ValueChanged -= ExMetP_UpDown;
        }

        public void ExMetP_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetP);

            //Load Current Values for Slider
            CharacterDetails.ExMetP_Toggle = true;
        }
        private void ExMetP_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetP_Rotate = false;
        }
        #endregion
        #region ExMetQ
        private void ExMetQ_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetQ_X.value = (float)quat.X;
            CharacterDetails.ExMetQ_Y.value = (float)quat.Y;
            CharacterDetails.ExMetQ_Z.value = (float)quat.Z;
            CharacterDetails.ExMetQ_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetQ_Slider;
            BoneSlider2.ValueChanged -= ExMetQ_Slider;
            BoneSlider3.ValueChanged -= ExMetQ_Slider;
        }

        private void ExMetQ_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetQ_X.value = (float)quat.X;
            CharacterDetails.ExMetQ_Y.value = (float)quat.Y;
            CharacterDetails.ExMetQ_Z.value = (float)quat.Z;
            CharacterDetails.ExMetQ_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetQ_UpDown;
            BoneUpDown2.ValueChanged -= ExMetQ_UpDown;
            BoneUpDown3.ValueChanged -= ExMetQ_UpDown;
        }

        public void ExMetQ_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetQ);

            //Load Current Values for Slider
            CharacterDetails.ExMetQ_Toggle = true;
        }
        private void ExMetQ_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetQ_Rotate = false;
        }
        #endregion
        #region ExMetR
        private void ExMetR_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetR_X.value = (float)quat.X;
            CharacterDetails.ExMetR_Y.value = (float)quat.Y;
            CharacterDetails.ExMetR_Z.value = (float)quat.Z;
            CharacterDetails.ExMetR_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExMetR_Slider;
            BoneSlider2.ValueChanged -= ExMetR_Slider;
            BoneSlider3.ValueChanged -= ExMetR_Slider;
        }

        private void ExMetR_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExMetR_X.value = (float)quat.X;
            CharacterDetails.ExMetR_Y.value = (float)quat.Y;
            CharacterDetails.ExMetR_Z.value = (float)quat.Z;
            CharacterDetails.ExMetR_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExMetR_UpDown;
            BoneUpDown2.ValueChanged -= ExMetR_UpDown;
            BoneUpDown3.ValueChanged -= ExMetR_UpDown;
        }

        public void ExMetR_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetR);

            //Load Current Values for Slider
            CharacterDetails.ExMetR_Toggle = true;
        }
        private void ExMetR_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExMetR_Rotate = false;
        }
        #endregion

        #region ExTopA
        private void ExTopA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopA_X.value = (float)quat.X;
            CharacterDetails.ExTopA_Y.value = (float)quat.Y;
            CharacterDetails.ExTopA_Z.value = (float)quat.Z;
            CharacterDetails.ExTopA_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopA_Slider;
            BoneSlider2.ValueChanged -= ExTopA_Slider;
            BoneSlider3.ValueChanged -= ExTopA_Slider;
        }

        private void ExTopA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopA_X.value = (float)quat.X;
            CharacterDetails.ExTopA_Y.value = (float)quat.Y;
            CharacterDetails.ExTopA_Z.value = (float)quat.Z;
            CharacterDetails.ExTopA_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopA_UpDown;
            BoneUpDown2.ValueChanged -= ExTopA_UpDown;
            BoneUpDown3.ValueChanged -= ExTopA_UpDown;
        }

        public void ExTopA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopA);

            //Load Current Values for Slider
            CharacterDetails.ExTopA_Toggle = true;
        }
        private void ExTopA_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopA_Rotate = false;
        }
        #endregion
        #region ExTopB
        private void ExTopB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopB_X.value = (float)quat.X;
            CharacterDetails.ExTopB_Y.value = (float)quat.Y;
            CharacterDetails.ExTopB_Z.value = (float)quat.Z;
            CharacterDetails.ExTopB_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopB_Slider;
            BoneSlider2.ValueChanged -= ExTopB_Slider;
            BoneSlider3.ValueChanged -= ExTopB_Slider;
        }

        private void ExTopB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopB_X.value = (float)quat.X;
            CharacterDetails.ExTopB_Y.value = (float)quat.Y;
            CharacterDetails.ExTopB_Z.value = (float)quat.Z;
            CharacterDetails.ExTopB_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopB_UpDown;
            BoneUpDown2.ValueChanged -= ExTopB_UpDown;
            BoneUpDown3.ValueChanged -= ExTopB_UpDown;
        }

        public void ExTopB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopB);

            //Load Current Values for Slider
            CharacterDetails.ExTopB_Toggle = true;
        }
        private void ExTopB_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopB_Rotate = false;
        }
        #endregion
        #region ExTopC
        private void ExTopC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopC_X.value = (float)quat.X;
            CharacterDetails.ExTopC_Y.value = (float)quat.Y;
            CharacterDetails.ExTopC_Z.value = (float)quat.Z;
            CharacterDetails.ExTopC_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopC_Slider;
            BoneSlider2.ValueChanged -= ExTopC_Slider;
            BoneSlider3.ValueChanged -= ExTopC_Slider;
        }

        private void ExTopC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopC_X.value = (float)quat.X;
            CharacterDetails.ExTopC_Y.value = (float)quat.Y;
            CharacterDetails.ExTopC_Z.value = (float)quat.Z;
            CharacterDetails.ExTopC_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopC_UpDown;
            BoneUpDown2.ValueChanged -= ExTopC_UpDown;
            BoneUpDown3.ValueChanged -= ExTopC_UpDown;
        }

        public void ExTopC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopC);

            //Load Current Values for Slider
            CharacterDetails.ExTopC_Toggle = true;
        }
        private void ExTopC_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopC_Rotate = false;
        }
        #endregion
        #region ExTopD
        private void ExTopD_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopD_X.value = (float)quat.X;
            CharacterDetails.ExTopD_Y.value = (float)quat.Y;
            CharacterDetails.ExTopD_Z.value = (float)quat.Z;
            CharacterDetails.ExTopD_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopD_Slider;
            BoneSlider2.ValueChanged -= ExTopD_Slider;
            BoneSlider3.ValueChanged -= ExTopD_Slider;
        }

        private void ExTopD_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopD_X.value = (float)quat.X;
            CharacterDetails.ExTopD_Y.value = (float)quat.Y;
            CharacterDetails.ExTopD_Z.value = (float)quat.Z;
            CharacterDetails.ExTopD_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopD_UpDown;
            BoneUpDown2.ValueChanged -= ExTopD_UpDown;
            BoneUpDown3.ValueChanged -= ExTopD_UpDown;
        }

        public void ExTopD_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopD);

            //Load Current Values for Slider
            CharacterDetails.ExTopD_Toggle = true;
        }
        private void ExTopD_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopD_Rotate = false;
        }
        #endregion
        #region ExTopE
        private void ExTopE_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopE_X.value = (float)quat.X;
            CharacterDetails.ExTopE_Y.value = (float)quat.Y;
            CharacterDetails.ExTopE_Z.value = (float)quat.Z;
            CharacterDetails.ExTopE_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopE_Slider;
            BoneSlider2.ValueChanged -= ExTopE_Slider;
            BoneSlider3.ValueChanged -= ExTopE_Slider;
        }

        private void ExTopE_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopE_X.value = (float)quat.X;
            CharacterDetails.ExTopE_Y.value = (float)quat.Y;
            CharacterDetails.ExTopE_Z.value = (float)quat.Z;
            CharacterDetails.ExTopE_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopE_UpDown;
            BoneUpDown2.ValueChanged -= ExTopE_UpDown;
            BoneUpDown3.ValueChanged -= ExTopE_UpDown;
        }

        public void ExTopE_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopE);

            //Load Current Values for Slider
            CharacterDetails.ExTopE_Toggle = true;
        }
        private void ExTopE_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopE_Rotate = false;
        }
        #endregion
        #region ExTopF
        private void ExTopF_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopF_X.value = (float)quat.X;
            CharacterDetails.ExTopF_Y.value = (float)quat.Y;
            CharacterDetails.ExTopF_Z.value = (float)quat.Z;
            CharacterDetails.ExTopF_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopF_Slider;
            BoneSlider2.ValueChanged -= ExTopF_Slider;
            BoneSlider3.ValueChanged -= ExTopF_Slider;
        }

        private void ExTopF_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopF_X.value = (float)quat.X;
            CharacterDetails.ExTopF_Y.value = (float)quat.Y;
            CharacterDetails.ExTopF_Z.value = (float)quat.Z;
            CharacterDetails.ExTopF_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopF_UpDown;
            BoneUpDown2.ValueChanged -= ExTopF_UpDown;
            BoneUpDown3.ValueChanged -= ExTopF_UpDown;
        }

        public void ExTopF_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopF);

            //Load Current Values for Slider
            CharacterDetails.ExTopF_Toggle = true;
        }
        private void ExTopF_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopF_Rotate = false;
        }
        #endregion
        #region ExTopG
        private void ExTopG_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopG_X.value = (float)quat.X;
            CharacterDetails.ExTopG_Y.value = (float)quat.Y;
            CharacterDetails.ExTopG_Z.value = (float)quat.Z;
            CharacterDetails.ExTopG_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopG_Slider;
            BoneSlider2.ValueChanged -= ExTopG_Slider;
            BoneSlider3.ValueChanged -= ExTopG_Slider;
        }

        private void ExTopG_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopG_X.value = (float)quat.X;
            CharacterDetails.ExTopG_Y.value = (float)quat.Y;
            CharacterDetails.ExTopG_Z.value = (float)quat.Z;
            CharacterDetails.ExTopG_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopG_UpDown;
            BoneUpDown2.ValueChanged -= ExTopG_UpDown;
            BoneUpDown3.ValueChanged -= ExTopG_UpDown;
        }

        public void ExTopG_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopG);

            //Load Current Values for Slider
            CharacterDetails.ExTopG_Toggle = true;
        }
        private void ExTopG_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopG_Rotate = false;
        }
        #endregion
        #region ExTopH
        private void ExTopH_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopH_X.value = (float)quat.X;
            CharacterDetails.ExTopH_Y.value = (float)quat.Y;
            CharacterDetails.ExTopH_Z.value = (float)quat.Z;
            CharacterDetails.ExTopH_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopH_Slider;
            BoneSlider2.ValueChanged -= ExTopH_Slider;
            BoneSlider3.ValueChanged -= ExTopH_Slider;
        }

        private void ExTopH_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopH_X.value = (float)quat.X;
            CharacterDetails.ExTopH_Y.value = (float)quat.Y;
            CharacterDetails.ExTopH_Z.value = (float)quat.Z;
            CharacterDetails.ExTopH_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopH_UpDown;
            BoneUpDown2.ValueChanged -= ExTopH_UpDown;
            BoneUpDown3.ValueChanged -= ExTopH_UpDown;
        }

        public void ExTopH_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopH);

            //Load Current Values for Slider
            CharacterDetails.ExTopH_Toggle = true;
        }
        private void ExTopH_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopH_Rotate = false;
        }
        #endregion
        #region ExTopI
        private void ExTopI_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopI_X.value = (float)quat.X;
            CharacterDetails.ExTopI_Y.value = (float)quat.Y;
            CharacterDetails.ExTopI_Z.value = (float)quat.Z;
            CharacterDetails.ExTopI_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneSlider.ValueChanged -= ExTopI_Slider;
            BoneSlider2.ValueChanged -= ExTopI_Slider;
            BoneSlider3.ValueChanged -= ExTopI_Slider;
        }

        private void ExTopI_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            // Get the euler angles from UI.
            var quat = GetEulerAngles().ToQuaternion();

            CharacterDetails.ExTopI_X.value = (float)quat.X;
            CharacterDetails.ExTopI_Y.value = (float)quat.Y;
            CharacterDetails.ExTopI_Z.value = (float)quat.Z;
            CharacterDetails.ExTopI_W.value = (float)quat.W;
            // Remove listeners for value changed.	
            BoneUpDown.ValueChanged -= ExTopI_UpDown;
            BoneUpDown2.ValueChanged -= ExTopI_UpDown;
            BoneUpDown3.ValueChanged -= ExTopI_UpDown;
        }

        public void ExTopI_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopI);

            //Load Current Values for Slider
            CharacterDetails.ExTopI_Toggle = true;
        }
        private void ExTopI_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.ExTopI_Rotate = false;
        }
        #endregion

        private void EditModeButton_Checked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.BoneEditMode = true;
            EnableAll();

            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress, "bytes", "0x90 0x90 0x90 0x90 0x90 0x90");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress2, "bytes", "0x90 0x90 0x90 0x90 0x90 0x90");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress3, "bytes", "0x90 0x90 0x90 0x90");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress, "bytes", "0x90 0x90 0x90 0x90");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress2, "bytes", "0x90 0x90 0x90");

            //Enable State Loading if a Save exists.
            if (HeadSaved01 == true) LoadstateHead01.IsEnabled = true;
            if (HeadSaved02 == true) LoadstateHead02.IsEnabled = true;
            if (HairSaved01 == true) LoadstateHair01.IsEnabled = true;
            if (HairSaved02 == true) LoadstateHair02.IsEnabled = true;
            if (EarringsSaved01 == true) LoadstateEarrings01.IsEnabled = true;
            if (EarringsSaved02 == true) LoadstateEarrings02.IsEnabled = true;
            if (BodySaved01 == true) LoadstateBody01.IsEnabled = true;
            if (BodySaved02 == true) LoadstateBody02.IsEnabled = true;
            if (LeftArmSaved01 == true) LoadstateLeftArm01.IsEnabled = true;
            if (LeftArmSaved02 == true) LoadstateLeftArm02.IsEnabled = true;
            if (RightArmSaved01 == true) LoadstateRightArm01.IsEnabled = true;
            if (RightArmSaved02 == true) LoadstateRightArm02.IsEnabled = true;
            if (ClothesSaved01 == true) LoadstateClothes01.IsEnabled = true;
            if (ClothesSaved02 == true) LoadstateClothes02.IsEnabled = true;
            if (WeaponsSaved01 == true) LoadstateWeapons01.IsEnabled = true;
            if (WeaponsSaved02 == true) LoadstateWeapons02.IsEnabled = true;
            if (LeftHandSaved01 == true) LoadstateLeftHand01.IsEnabled = true;
            if (LeftHandSaved02 == true) LoadstateLeftHand02.IsEnabled = true;
            if (RightHandSaved01 == true) LoadstateRightHand01.IsEnabled = true;
            if (RightHandSaved02 == true) LoadstateRightHand02.IsEnabled = true;
            if (WaistSaved01 == true) LoadstateWaist01.IsEnabled = true;
            if (WaistSaved02 == true) LoadstateWaist02.IsEnabled = true;
            if (LeftLegSaved01 == true) LoadstateLeftLeg01.IsEnabled = true;
            if (LeftLegSaved02 == true) LoadstateLeftLeg02.IsEnabled = true;
            if (RightLegSaved01 == true) LoadstateRightLeg01.IsEnabled = true;
            if (RightLegSaved02 == true) LoadstateRightLeg02.IsEnabled = true;
            if (HelmSaved01 == true) LoadstateHelm01.IsEnabled = true;
            if (HelmSaved02 == true) LoadstateHelm02.IsEnabled = true;
            if (TopSaved01 == true) LoadstateTop01.IsEnabled = true;
            if (TopSaved02 == true) LoadstateTop02.IsEnabled = true;
        }
     private void EditModeButton_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.BoneEditMode = false;
            PhysicsButton.IsChecked = false;
            UncheckAll();
            DisableAll();

            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress, "bytes", "0x41 0x0F 0x29 0x5C 0x12 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress2, "bytes", "0x43 0x0F 0x29 0x5C 0x18 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress3, "bytes", "0x0F 0x29 0x5E 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress, "bytes", "0x0F 0x29 0x48 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress2, "bytes", "0x0F 0x29 0x00");

            //Clear Slider Values
            CharacterDetails.BoneX = 0;
            CharacterDetails.BoneY = 0;
            CharacterDetails.BoneZ = 0;

            //Disable State Loading
            LoadstateHead01.IsEnabled = false;
            LoadstateHead02.IsEnabled = false;
            LoadstateHair01.IsEnabled = false;
            LoadstateHair02.IsEnabled = false;
            LoadstateEarrings01.IsEnabled = false;
            LoadstateEarrings02.IsEnabled = false;
            LoadstateBody01.IsEnabled = false;
            LoadstateBody02.IsEnabled = false;
            LoadstateLeftArm01.IsEnabled = false;
            LoadstateLeftArm02.IsEnabled = false;
            LoadstateRightArm01.IsEnabled = false;
            LoadstateRightArm02.IsEnabled = false;
            LoadstateClothes01.IsEnabled = false;
            LoadstateClothes02.IsEnabled = false;
            LoadstateWeapons01.IsEnabled = false;
            LoadstateWeapons02.IsEnabled = false;
            LoadstateLeftHand01.IsEnabled = false;
            LoadstateLeftHand02.IsEnabled = false;
            LoadstateRightHand01.IsEnabled = false;
            LoadstateRightHand02.IsEnabled = false;
            LoadstateWaist01.IsEnabled = false;
            LoadstateWaist02.IsEnabled = false;
            LoadstateLeftLeg01.IsEnabled = false;
            LoadstateLeftLeg02.IsEnabled = false;
            LoadstateRightLeg01.IsEnabled = false;
            LoadstateRightLeg02.IsEnabled = false;
            LoadstateHelm01.IsEnabled = false;
            LoadstateHelm02.IsEnabled = false;
            LoadstateTop01.IsEnabled = false;
            LoadstateTop02.IsEnabled = false;
        }

        private void PhysicsButton_Checked(object sender, RoutedEventArgs e)
        {
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress, "bytes", "0x0F 0x29 0x48 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress2, "bytes", "0x0F 0x29 0x00");
        }
        private void PhysicsButton_Unchecked(object sender, RoutedEventArgs e)
        {
            if (CharacterDetails.BoneEditMode)
            {
                MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress, "bytes", "0x90 0x90 0x90 0x90");
                MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress2, "bytes", "0x90 0x90 0x90");
            }
        }

        #region Savestate\Loadstate Head
        private void SavestateHead01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveHead01 = true;
            HeadSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateHead01.IsEnabled = true;
        }
        private void SavestateHead02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveHead02 = true;
            HeadSaved02 = true;

            if (CharacterDetails.BoneEditMode) SavestateHead02.IsEnabled = true;
        }
        private void LoadstateHead01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteHead = true;

            CharacterDetails.Head_X.value = Head_X_Sav01;
            CharacterDetails.Head_Y.value = Head_Y_Sav01;
            CharacterDetails.Head_Z.value = Head_Z_Sav01;
            CharacterDetails.Head_W.value = Head_W_Sav01;
            CharacterDetails.EarLeft_X.value = EarLeft_X_Sav01;
            CharacterDetails.EarLeft_Y.value = EarLeft_Y_Sav01;
            CharacterDetails.EarLeft_Z.value = EarLeft_Z_Sav01;
            CharacterDetails.EarLeft_W.value = EarLeft_W_Sav01;
            CharacterDetails.EarRight_X.value = EarRight_X_Sav01;
            CharacterDetails.EarRight_Y.value = EarRight_Y_Sav01;
            CharacterDetails.EarRight_Z.value = EarRight_Z_Sav01;
            CharacterDetails.EarRight_W.value = EarRight_W_Sav01;
            CharacterDetails.Jaw_X.value = Jaw_X_Sav01;
            CharacterDetails.Jaw_Y.value = Jaw_Y_Sav01;
            CharacterDetails.Jaw_Z.value = Jaw_Z_Sav01;
            CharacterDetails.Jaw_W.value = Jaw_W_Sav01;
            CharacterDetails.EyelidLowerLeft_X.value = EyelidLowerLeft_X_Sav01;
            CharacterDetails.EyelidLowerLeft_Y.value = EyelidLowerLeft_Y_Sav01;
            CharacterDetails.EyelidLowerLeft_Z.value = EyelidLowerLeft_Z_Sav01;
            CharacterDetails.EyelidLowerLeft_W.value = EyelidLowerLeft_W_Sav01;
            CharacterDetails.EyelidLowerRight_X.value = EyelidLowerRight_X_Sav01;
            CharacterDetails.EyelidLowerRight_Y.value = EyelidLowerRight_Y_Sav01;
            CharacterDetails.EyelidLowerRight_Z.value = EyelidLowerRight_Z_Sav01;
            CharacterDetails.EyelidLowerRight_W.value = EyelidLowerRight_W_Sav01;
            CharacterDetails.EyeLeft_X.value = EyeLeft_X_Sav01;
            CharacterDetails.EyeLeft_Y.value = EyeLeft_Y_Sav01;
            CharacterDetails.EyeLeft_Z.value = EyeLeft_Z_Sav01;
            CharacterDetails.EyeLeft_W.value = EyeLeft_W_Sav01;
            CharacterDetails.EyeRight_X.value = EyeRight_X_Sav01;
            CharacterDetails.EyeRight_Y.value = EyeRight_Y_Sav01;
            CharacterDetails.EyeRight_Z.value = EyeRight_Z_Sav01;
            CharacterDetails.EyeRight_W.value = EyeRight_W_Sav01;
            CharacterDetails.Nose_X.value = Nose_X_Sav01;
            CharacterDetails.Nose_Y.value = Nose_Y_Sav01;
            CharacterDetails.Nose_Z.value = Nose_Z_Sav01;
            CharacterDetails.Nose_W.value = Nose_W_Sav01;
            CharacterDetails.CheekLeft_X.value = CheekLeft_X_Sav01;
            CharacterDetails.CheekLeft_Y.value = CheekLeft_Y_Sav01;
            CharacterDetails.CheekLeft_Z.value = CheekLeft_Z_Sav01;
            CharacterDetails.CheekLeft_W.value = CheekLeft_W_Sav01;
            CharacterDetails.HrothWhiskersLeft_X.value = HrothWhiskersLeft_X_Sav01;
            CharacterDetails.HrothWhiskersLeft_Y.value = HrothWhiskersLeft_Y_Sav01;
            CharacterDetails.HrothWhiskersLeft_Z.value = HrothWhiskersLeft_Z_Sav01;
            CharacterDetails.HrothWhiskersLeft_W.value = HrothWhiskersLeft_W_Sav01;
            CharacterDetails.CheekRight_X.value = CheekRight_X_Sav01;
            CharacterDetails.CheekRight_Y.value = CheekRight_Y_Sav01;
            CharacterDetails.CheekRight_Z.value = CheekRight_Z_Sav01;
            CharacterDetails.CheekRight_W.value = CheekRight_W_Sav01;
            CharacterDetails.HrothWhiskersRight_X.value = HrothWhiskersRight_X_Sav01;
            CharacterDetails.HrothWhiskersRight_Y.value = HrothWhiskersRight_Y_Sav01;
            CharacterDetails.HrothWhiskersRight_Z.value = HrothWhiskersRight_Z_Sav01;
            CharacterDetails.HrothWhiskersRight_W.value = HrothWhiskersRight_W_Sav01;
            CharacterDetails.LipsLeft_X.value = LipsLeft_X_Sav01;
            CharacterDetails.LipsLeft_Y.value = LipsLeft_Y_Sav01;
            CharacterDetails.LipsLeft_Z.value = LipsLeft_Z_Sav01;
            CharacterDetails.LipsLeft_W.value = LipsLeft_W_Sav01;
            CharacterDetails.HrothEyebrowLeft_X.value = HrothEyebrowLeft_X_Sav01;
            CharacterDetails.HrothEyebrowLeft_Y.value = HrothEyebrowLeft_Y_Sav01;
            CharacterDetails.HrothEyebrowLeft_Z.value = HrothEyebrowLeft_Z_Sav01;
            CharacterDetails.HrothEyebrowLeft_W.value = HrothEyebrowLeft_W_Sav01;
            CharacterDetails.LipsRight_X.value = LipsRight_X_Sav01;
            CharacterDetails.LipsRight_Y.value = LipsRight_Y_Sav01;
            CharacterDetails.LipsRight_Z.value = LipsRight_Z_Sav01;
            CharacterDetails.LipsRight_W.value = LipsRight_W_Sav01;
            CharacterDetails.HrothEyebrowRight_X.value = HrothEyebrowRight_X_Sav01;
            CharacterDetails.HrothEyebrowRight_Y.value = HrothEyebrowRight_Y_Sav01;
            CharacterDetails.HrothEyebrowRight_Z.value = HrothEyebrowRight_Z_Sav01;
            CharacterDetails.HrothEyebrowRight_W.value = HrothEyebrowRight_W_Sav01;
            CharacterDetails.EyebrowLeft_X.value = EyebrowLeft_X_Sav01;
            CharacterDetails.EyebrowLeft_Y.value = EyebrowLeft_Y_Sav01;
            CharacterDetails.EyebrowLeft_Z.value = EyebrowLeft_Z_Sav01;
            CharacterDetails.EyebrowLeft_W.value = EyebrowLeft_W_Sav01;
            CharacterDetails.HrothBridge_X.value = HrothBridge_X_Sav01;
            CharacterDetails.HrothBridge_Y.value = HrothBridge_Y_Sav01;
            CharacterDetails.HrothBridge_Z.value = HrothBridge_Z_Sav01;
            CharacterDetails.HrothBridge_W.value = HrothBridge_W_Sav01;
            CharacterDetails.EyebrowRight_X.value = EyebrowRight_X_Sav01;
            CharacterDetails.EyebrowRight_Y.value = EyebrowRight_Y_Sav01;
            CharacterDetails.EyebrowRight_Z.value = EyebrowRight_Z_Sav01;
            CharacterDetails.EyebrowRight_W.value = EyebrowRight_W_Sav01;
            CharacterDetails.HrothBrowLeft_X.value = HrothBrowLeft_X_Sav01;
            CharacterDetails.HrothBrowLeft_Y.value = HrothBrowLeft_Y_Sav01;
            CharacterDetails.HrothBrowLeft_Z.value = HrothBrowLeft_Z_Sav01;
            CharacterDetails.HrothBrowLeft_W.value = HrothBrowLeft_W_Sav01;
            CharacterDetails.Bridge_X.value = Bridge_X_Sav01;
            CharacterDetails.Bridge_Y.value = Bridge_Y_Sav01;
            CharacterDetails.Bridge_Z.value = Bridge_Z_Sav01;
            CharacterDetails.Bridge_W.value = Bridge_W_Sav01;
            CharacterDetails.HrothBrowRight_X.value = HrothBrowRight_X_Sav01;
            CharacterDetails.HrothBrowRight_Y.value = HrothBrowRight_Y_Sav01;
            CharacterDetails.HrothBrowRight_Z.value = HrothBrowRight_Z_Sav01;
            CharacterDetails.HrothBrowRight_W.value = HrothBrowRight_W_Sav01;
            CharacterDetails.BrowLeft_X.value = BrowLeft_X_Sav01;
            CharacterDetails.BrowLeft_Y.value = BrowLeft_Y_Sav01;
            CharacterDetails.BrowLeft_Z.value = BrowLeft_Z_Sav01;
            CharacterDetails.BrowLeft_W.value = BrowLeft_W_Sav01;
            CharacterDetails.HrothJawUpper_X.value = HrothJawUpper_X_Sav01;
            CharacterDetails.HrothJawUpper_Y.value = HrothJawUpper_Y_Sav01;
            CharacterDetails.HrothJawUpper_Z.value = HrothJawUpper_Z_Sav01;
            CharacterDetails.HrothJawUpper_W.value = HrothJawUpper_W_Sav01;
            CharacterDetails.BrowRight_X.value = BrowRight_X_Sav01;
            CharacterDetails.BrowRight_Y.value = BrowRight_Y_Sav01;
            CharacterDetails.BrowRight_Z.value = BrowRight_Z_Sav01;
            CharacterDetails.BrowRight_W.value = BrowRight_W_Sav01;
            CharacterDetails.HrothLipUpper_X.value = HrothLipUpper_X_Sav01;
            CharacterDetails.HrothLipUpper_Y.value = HrothLipUpper_Y_Sav01;
            CharacterDetails.HrothLipUpper_Z.value = HrothLipUpper_Z_Sav01;
            CharacterDetails.HrothLipUpper_W.value = HrothLipUpper_W_Sav01;
            CharacterDetails.LipUpperA_X.value = LipUpperA_X_Sav01;
            CharacterDetails.LipUpperA_Y.value = LipUpperA_Y_Sav01;
            CharacterDetails.LipUpperA_Z.value = LipUpperA_Z_Sav01;
            CharacterDetails.LipUpperA_W.value = LipUpperA_W_Sav01;
            CharacterDetails.HrothEyelidUpperLeft_X.value = HrothEyelidUpperLeft_X_Sav01;
            CharacterDetails.HrothEyelidUpperLeft_Y.value = HrothEyelidUpperLeft_Y_Sav01;
            CharacterDetails.HrothEyelidUpperLeft_Z.value = HrothEyelidUpperLeft_Z_Sav01;
            CharacterDetails.HrothEyelidUpperLeft_W.value = HrothEyelidUpperLeft_W_Sav01;
            CharacterDetails.EyelidUpperLeft_X.value = EyelidUpperLeft_X_Sav01;
            CharacterDetails.EyelidUpperLeft_Y.value = EyelidUpperLeft_Y_Sav01;
            CharacterDetails.EyelidUpperLeft_Z.value = EyelidUpperLeft_Z_Sav01;
            CharacterDetails.EyelidUpperLeft_W.value = EyelidUpperLeft_W_Sav01;
            CharacterDetails.HrothEyelidUpperRight_X.value = HrothEyelidUpperRight_X_Sav01;
            CharacterDetails.HrothEyelidUpperRight_Y.value = HrothEyelidUpperRight_Y_Sav01;
            CharacterDetails.HrothEyelidUpperRight_Z.value = HrothEyelidUpperRight_Z_Sav01;
            CharacterDetails.HrothEyelidUpperRight_W.value = HrothEyelidUpperRight_W_Sav01;
            CharacterDetails.EyelidUpperRight_X.value = EyelidUpperRight_X_Sav01;
            CharacterDetails.EyelidUpperRight_Y.value = EyelidUpperRight_Y_Sav01;
            CharacterDetails.EyelidUpperRight_Z.value = EyelidUpperRight_Z_Sav01;
            CharacterDetails.EyelidUpperRight_W.value = EyelidUpperRight_W_Sav01;
            CharacterDetails.HrothLipsLeft_X.value = HrothLipsLeft_X_Sav01;
            CharacterDetails.HrothLipsLeft_Y.value = HrothLipsLeft_Y_Sav01;
            CharacterDetails.HrothLipsLeft_Z.value = HrothLipsLeft_Z_Sav01;
            CharacterDetails.HrothLipsLeft_W.value = HrothLipsLeft_W_Sav01;
            CharacterDetails.LipLowerA_X.value = LipLowerA_X_Sav01;
            CharacterDetails.LipLowerA_Y.value = LipLowerA_Y_Sav01;
            CharacterDetails.LipLowerA_Z.value = LipLowerA_Z_Sav01;
            CharacterDetails.LipLowerA_W.value = LipLowerA_W_Sav01;
            CharacterDetails.HrothLipsRight_X.value = HrothLipsRight_X_Sav01;
            CharacterDetails.HrothLipsRight_Y.value = HrothLipsRight_Y_Sav01;
            CharacterDetails.HrothLipsRight_Z.value = HrothLipsRight_Z_Sav01;
            CharacterDetails.HrothLipsRight_W.value = HrothLipsRight_W_Sav01;
            CharacterDetails.VieraEar01ALeft_X.value = VieraEar01ALeft_X_Sav01;
            CharacterDetails.VieraEar01ALeft_Y.value = VieraEar01ALeft_Y_Sav01;
            CharacterDetails.VieraEar01ALeft_Z.value = VieraEar01ALeft_Z_Sav01;
            CharacterDetails.VieraEar01ALeft_W.value = VieraEar01ALeft_W_Sav01;
            CharacterDetails.LipUpperB_X.value = LipUpperB_X_Sav01;
            CharacterDetails.LipUpperB_Y.value = LipUpperB_Y_Sav01;
            CharacterDetails.LipUpperB_Z.value = LipUpperB_Z_Sav01;
            CharacterDetails.LipUpperB_W.value = LipUpperB_W_Sav01;
            CharacterDetails.HrothLipUpperLeft_X.value = HrothLipUpperLeft_X_Sav01;
            CharacterDetails.HrothLipUpperLeft_Y.value = HrothLipUpperLeft_Y_Sav01;
            CharacterDetails.HrothLipUpperLeft_Z.value = HrothLipUpperLeft_Z_Sav01;
            CharacterDetails.HrothLipUpperLeft_W.value = HrothLipUpperLeft_W_Sav01;
            CharacterDetails.VieraEar01ARight_X.value = VieraEar01ARight_X_Sav01;
            CharacterDetails.VieraEar01ARight_Y.value = VieraEar01ARight_Y_Sav01;
            CharacterDetails.VieraEar01ARight_Z.value = VieraEar01ARight_Z_Sav01;
            CharacterDetails.VieraEar01ARight_W.value = VieraEar01ARight_W_Sav01;
            CharacterDetails.LipLowerB_X.value = LipLowerB_X_Sav01;
            CharacterDetails.LipLowerB_Y.value = LipLowerB_Y_Sav01;
            CharacterDetails.LipLowerB_Z.value = LipLowerB_Z_Sav01;
            CharacterDetails.LipLowerB_W.value = LipLowerB_W_Sav01;
            CharacterDetails.HrothLipUpperRight_X.value = HrothLipUpperRight_X_Sav01;
            CharacterDetails.HrothLipUpperRight_Y.value = HrothLipUpperRight_Y_Sav01;
            CharacterDetails.HrothLipUpperRight_Z.value = HrothLipUpperRight_Z_Sav01;
            CharacterDetails.HrothLipUpperRight_W.value = HrothLipUpperRight_W_Sav01;
            CharacterDetails.VieraEar02ALeft_X.value = VieraEar02ALeft_X_Sav01;
            CharacterDetails.VieraEar02ALeft_Y.value = VieraEar02ALeft_Y_Sav01;
            CharacterDetails.VieraEar02ALeft_Z.value = VieraEar02ALeft_Z_Sav01;
            CharacterDetails.VieraEar02ALeft_W.value = VieraEar02ALeft_W_Sav01;
            CharacterDetails.HrothLipLower_X.value = HrothLipLower_X_Sav01;
            CharacterDetails.HrothLipLower_Y.value = HrothLipLower_Y_Sav01;
            CharacterDetails.HrothLipLower_Z.value = HrothLipLower_Z_Sav01;
            CharacterDetails.HrothLipLower_W.value = HrothLipLower_W_Sav01;
            CharacterDetails.VieraEar02ARight_X.value = VieraEar02ARight_X_Sav01;
            CharacterDetails.VieraEar02ARight_Y.value = VieraEar02ARight_Y_Sav01;
            CharacterDetails.VieraEar02ARight_Z.value = VieraEar02ARight_Z_Sav01;
            CharacterDetails.VieraEar02ARight_W.value = VieraEar02ARight_W_Sav01;
            CharacterDetails.VieraEar03ALeft_X.value = VieraEar03ALeft_X_Sav01;
            CharacterDetails.VieraEar03ALeft_Y.value = VieraEar03ALeft_Y_Sav01;
            CharacterDetails.VieraEar03ALeft_Z.value = VieraEar03ALeft_Z_Sav01;
            CharacterDetails.VieraEar03ALeft_W.value = VieraEar03ALeft_W_Sav01;
            CharacterDetails.VieraEar03ARight_X.value = VieraEar03ARight_X_Sav01;
            CharacterDetails.VieraEar03ARight_Y.value = VieraEar03ARight_Y_Sav01;
            CharacterDetails.VieraEar03ARight_Z.value = VieraEar03ARight_Z_Sav01;
            CharacterDetails.VieraEar03ARight_W.value = VieraEar03ARight_W_Sav01;
            CharacterDetails.VieraEar04ALeft_X.value = VieraEar04ALeft_X_Sav01;
            CharacterDetails.VieraEar04ALeft_Y.value = VieraEar04ALeft_Y_Sav01;
            CharacterDetails.VieraEar04ALeft_Z.value = VieraEar04ALeft_Z_Sav01;
            CharacterDetails.VieraEar04ALeft_W.value = VieraEar04ALeft_W_Sav01;
            CharacterDetails.VieraEar04ARight_X.value = VieraEar04ARight_X_Sav01;
            CharacterDetails.VieraEar04ARight_Y.value = VieraEar04ARight_Y_Sav01;
            CharacterDetails.VieraEar04ARight_Z.value = VieraEar04ARight_Z_Sav01;
            CharacterDetails.VieraEar04ARight_W.value = VieraEar04ARight_W_Sav01;
            CharacterDetails.VieraLipLowerA_X.value = VieraLipLowerA_X_Sav01;
            CharacterDetails.VieraLipLowerA_Y.value = VieraLipLowerA_Y_Sav01;
            CharacterDetails.VieraLipLowerA_Z.value = VieraLipLowerA_Z_Sav01;
            CharacterDetails.VieraLipLowerA_W.value = VieraLipLowerA_W_Sav01;
            CharacterDetails.VieraLipUpperB_X.value = VieraLipUpperB_X_Sav01;
            CharacterDetails.VieraLipUpperB_Y.value = VieraLipUpperB_Y_Sav01;
            CharacterDetails.VieraLipUpperB_Z.value = VieraLipUpperB_Z_Sav01;
            CharacterDetails.VieraLipUpperB_W.value = VieraLipUpperB_W_Sav01;
            CharacterDetails.VieraEar01BLeft_X.value = VieraEar01BLeft_X_Sav01;
            CharacterDetails.VieraEar01BLeft_Y.value = VieraEar01BLeft_Y_Sav01;
            CharacterDetails.VieraEar01BLeft_Z.value = VieraEar01BLeft_Z_Sav01;
            CharacterDetails.VieraEar01BLeft_W.value = VieraEar01BLeft_W_Sav01;
            CharacterDetails.VieraEar01BRight_X.value = VieraEar01BRight_X_Sav01;
            CharacterDetails.VieraEar01BRight_Y.value = VieraEar01BRight_Y_Sav01;
            CharacterDetails.VieraEar01BRight_Z.value = VieraEar01BRight_Z_Sav01;
            CharacterDetails.VieraEar01BRight_W.value = VieraEar01BRight_W_Sav01;
            CharacterDetails.VieraEar02BLeft_X.value = VieraEar02BLeft_X_Sav01;
            CharacterDetails.VieraEar02BLeft_Y.value = VieraEar02BLeft_Y_Sav01;
            CharacterDetails.VieraEar02BLeft_Z.value = VieraEar02BLeft_Z_Sav01;
            CharacterDetails.VieraEar02BLeft_W.value = VieraEar02BLeft_W_Sav01;
            CharacterDetails.VieraEar02BRight_X.value = VieraEar02BRight_X_Sav01;
            CharacterDetails.VieraEar02BRight_Y.value = VieraEar02BRight_Y_Sav01;
            CharacterDetails.VieraEar02BRight_Z.value = VieraEar02BRight_Z_Sav01;
            CharacterDetails.VieraEar02BRight_W.value = VieraEar02BRight_W_Sav01;
            CharacterDetails.VieraEar03BLeft_X.value = VieraEar03BLeft_X_Sav01;
            CharacterDetails.VieraEar03BLeft_Y.value = VieraEar03BLeft_Y_Sav01;
            CharacterDetails.VieraEar03BLeft_Z.value = VieraEar03BLeft_Z_Sav01;
            CharacterDetails.VieraEar03BLeft_W.value = VieraEar03BLeft_W_Sav01;
            CharacterDetails.VieraEar03BRight_X.value = VieraEar03BRight_X_Sav01;
            CharacterDetails.VieraEar03BRight_Y.value = VieraEar03BRight_Y_Sav01;
            CharacterDetails.VieraEar03BRight_Z.value = VieraEar03BRight_Z_Sav01;
            CharacterDetails.VieraEar03BRight_W.value = VieraEar03BRight_W_Sav01;
            CharacterDetails.VieraEar04BLeft_X.value = VieraEar04BLeft_X_Sav01;
            CharacterDetails.VieraEar04BLeft_Y.value = VieraEar04BLeft_Y_Sav01;
            CharacterDetails.VieraEar04BLeft_Z.value = VieraEar04BLeft_Z_Sav01;
            CharacterDetails.VieraEar04BLeft_W.value = VieraEar04BLeft_W_Sav01;
            CharacterDetails.VieraEar04BRight_X.value = VieraEar04BRight_X_Sav01;
            CharacterDetails.VieraEar04BRight_Y.value = VieraEar04BRight_Y_Sav01;
            CharacterDetails.VieraEar04BRight_Z.value = VieraEar04BRight_Z_Sav01;
            CharacterDetails.VieraEar04BRight_W.value = VieraEar04BRight_W_Sav01;
            CharacterDetails.VieraLipLowerB_X.value = VieraLipLowerB_X_Sav01;
            CharacterDetails.VieraLipLowerB_Y.value = VieraLipLowerB_Y_Sav01;
            CharacterDetails.VieraLipLowerB_Z.value = VieraLipLowerB_Z_Sav01;
            CharacterDetails.VieraLipLowerB_W.value = VieraLipLowerB_W_Sav01;
        }
        private void LoadstateHead02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteHead = true;

            CharacterDetails.Head_X.value = Head_X_Sav02;
            CharacterDetails.Head_Y.value = Head_Y_Sav02;
            CharacterDetails.Head_Z.value = Head_Z_Sav02;
            CharacterDetails.Head_W.value = Head_W_Sav02;
            CharacterDetails.EarLeft_X.value = EarLeft_X_Sav02;
            CharacterDetails.EarLeft_Y.value = EarLeft_Y_Sav02;
            CharacterDetails.EarLeft_Z.value = EarLeft_Z_Sav02;
            CharacterDetails.EarLeft_W.value = EarLeft_W_Sav02;
            CharacterDetails.EarRight_X.value = EarRight_X_Sav02;
            CharacterDetails.EarRight_Y.value = EarRight_Y_Sav02;
            CharacterDetails.EarRight_Z.value = EarRight_Z_Sav02;
            CharacterDetails.EarRight_W.value = EarRight_W_Sav02;
            CharacterDetails.Jaw_X.value = Jaw_X_Sav02;
            CharacterDetails.Jaw_Y.value = Jaw_Y_Sav02;
            CharacterDetails.Jaw_Z.value = Jaw_Z_Sav02;
            CharacterDetails.Jaw_W.value = Jaw_W_Sav02;
            CharacterDetails.EyelidLowerLeft_X.value = EyelidLowerLeft_X_Sav02;
            CharacterDetails.EyelidLowerLeft_Y.value = EyelidLowerLeft_Y_Sav02;
            CharacterDetails.EyelidLowerLeft_Z.value = EyelidLowerLeft_Z_Sav02;
            CharacterDetails.EyelidLowerLeft_W.value = EyelidLowerLeft_W_Sav02;
            CharacterDetails.EyelidLowerRight_X.value = EyelidLowerRight_X_Sav02;
            CharacterDetails.EyelidLowerRight_Y.value = EyelidLowerRight_Y_Sav02;
            CharacterDetails.EyelidLowerRight_Z.value = EyelidLowerRight_Z_Sav02;
            CharacterDetails.EyelidLowerRight_W.value = EyelidLowerRight_W_Sav02;
            CharacterDetails.EyeLeft_X.value = EyeLeft_X_Sav02;
            CharacterDetails.EyeLeft_Y.value = EyeLeft_Y_Sav02;
            CharacterDetails.EyeLeft_Z.value = EyeLeft_Z_Sav02;
            CharacterDetails.EyeLeft_W.value = EyeLeft_W_Sav02;
            CharacterDetails.EyeRight_X.value = EyeRight_X_Sav02;
            CharacterDetails.EyeRight_Y.value = EyeRight_Y_Sav02;
            CharacterDetails.EyeRight_Z.value = EyeRight_Z_Sav02;
            CharacterDetails.EyeRight_W.value = EyeRight_W_Sav02;
            CharacterDetails.Nose_X.value = Nose_X_Sav02;
            CharacterDetails.Nose_Y.value = Nose_Y_Sav02;
            CharacterDetails.Nose_Z.value = Nose_Z_Sav02;
            CharacterDetails.Nose_W.value = Nose_W_Sav02;
            CharacterDetails.HrothWhiskersLeft_X.value = HrothWhiskersLeft_X_Sav02;
            CharacterDetails.HrothWhiskersLeft_Y.value = HrothWhiskersLeft_Y_Sav02;
            CharacterDetails.HrothWhiskersLeft_Z.value = HrothWhiskersLeft_Z_Sav02;
            CharacterDetails.HrothWhiskersLeft_W.value = HrothWhiskersLeft_W_Sav02;
            CharacterDetails.CheekRight_X.value = CheekRight_X_Sav02;
            CharacterDetails.CheekRight_Y.value = CheekRight_Y_Sav02;
            CharacterDetails.CheekRight_Z.value = CheekRight_Z_Sav02;
            CharacterDetails.CheekRight_W.value = CheekRight_W_Sav02;
            CharacterDetails.HrothWhiskersRight_X.value = HrothWhiskersRight_X_Sav02;
            CharacterDetails.HrothWhiskersRight_Y.value = HrothWhiskersRight_Y_Sav02;
            CharacterDetails.HrothWhiskersRight_Z.value = HrothWhiskersRight_Z_Sav02;
            CharacterDetails.HrothWhiskersRight_W.value = HrothWhiskersRight_W_Sav02;
            CharacterDetails.LipsLeft_X.value = LipsLeft_X_Sav02;
            CharacterDetails.LipsLeft_Y.value = LipsLeft_Y_Sav02;
            CharacterDetails.LipsLeft_Z.value = LipsLeft_Z_Sav02;
            CharacterDetails.LipsLeft_W.value = LipsLeft_W_Sav02;
            CharacterDetails.HrothEyebrowLeft_X.value = HrothEyebrowLeft_X_Sav02;
            CharacterDetails.HrothEyebrowLeft_Y.value = HrothEyebrowLeft_Y_Sav02;
            CharacterDetails.HrothEyebrowLeft_Z.value = HrothEyebrowLeft_Z_Sav02;
            CharacterDetails.HrothEyebrowLeft_W.value = HrothEyebrowLeft_W_Sav02;
            CharacterDetails.LipsRight_X.value = LipsRight_X_Sav02;
            CharacterDetails.LipsRight_Y.value = LipsRight_Y_Sav02;
            CharacterDetails.LipsRight_Z.value = LipsRight_Z_Sav02;
            CharacterDetails.LipsRight_W.value = LipsRight_W_Sav02;
            CharacterDetails.HrothEyebrowRight_X.value = HrothEyebrowRight_X_Sav02;
            CharacterDetails.HrothEyebrowRight_Y.value = HrothEyebrowRight_Y_Sav02;
            CharacterDetails.HrothEyebrowRight_Z.value = HrothEyebrowRight_Z_Sav02;
            CharacterDetails.HrothEyebrowRight_W.value = HrothEyebrowRight_W_Sav02;
            CharacterDetails.EyebrowLeft_X.value = EyebrowLeft_X_Sav02;
            CharacterDetails.EyebrowLeft_Y.value = EyebrowLeft_Y_Sav02;
            CharacterDetails.EyebrowLeft_Z.value = EyebrowLeft_Z_Sav02;
            CharacterDetails.EyebrowLeft_W.value = EyebrowLeft_W_Sav02;
            CharacterDetails.HrothBridge_X.value = HrothBridge_X_Sav02;
            CharacterDetails.HrothBridge_Y.value = HrothBridge_Y_Sav02;
            CharacterDetails.HrothBridge_Z.value = HrothBridge_Z_Sav02;
            CharacterDetails.HrothBridge_W.value = HrothBridge_W_Sav02;
            CharacterDetails.EyebrowRight_X.value = EyebrowRight_X_Sav02;
            CharacterDetails.EyebrowRight_Y.value = EyebrowRight_Y_Sav02;
            CharacterDetails.EyebrowRight_Z.value = EyebrowRight_Z_Sav02;
            CharacterDetails.EyebrowRight_W.value = EyebrowRight_W_Sav02;
            CharacterDetails.HrothBrowLeft_X.value = HrothBrowLeft_X_Sav02;
            CharacterDetails.HrothBrowLeft_Y.value = HrothBrowLeft_Y_Sav02;
            CharacterDetails.HrothBrowLeft_Z.value = HrothBrowLeft_Z_Sav02;
            CharacterDetails.HrothBrowLeft_W.value = HrothBrowLeft_W_Sav02;
            CharacterDetails.Bridge_X.value = Bridge_X_Sav02;
            CharacterDetails.Bridge_Y.value = Bridge_Y_Sav02;
            CharacterDetails.Bridge_Z.value = Bridge_Z_Sav02;
            CharacterDetails.Bridge_W.value = Bridge_W_Sav02;
            CharacterDetails.HrothBrowRight_X.value = HrothBrowRight_X_Sav02;
            CharacterDetails.HrothBrowRight_Y.value = HrothBrowRight_Y_Sav02;
            CharacterDetails.HrothBrowRight_Z.value = HrothBrowRight_Z_Sav02;
            CharacterDetails.HrothBrowRight_W.value = HrothBrowRight_W_Sav02;
            CharacterDetails.BrowLeft_X.value = BrowLeft_X_Sav02;
            CharacterDetails.BrowLeft_Y.value = BrowLeft_Y_Sav02;
            CharacterDetails.BrowLeft_Z.value = BrowLeft_Z_Sav02;
            CharacterDetails.BrowLeft_W.value = BrowLeft_W_Sav02;
            CharacterDetails.HrothJawUpper_X.value = HrothJawUpper_X_Sav02;
            CharacterDetails.HrothJawUpper_Y.value = HrothJawUpper_Y_Sav02;
            CharacterDetails.HrothJawUpper_Z.value = HrothJawUpper_Z_Sav02;
            CharacterDetails.HrothJawUpper_W.value = HrothJawUpper_W_Sav02;
            CharacterDetails.BrowRight_X.value = BrowRight_X_Sav02;
            CharacterDetails.BrowRight_Y.value = BrowRight_Y_Sav02;
            CharacterDetails.BrowRight_Z.value = BrowRight_Z_Sav02;
            CharacterDetails.BrowRight_W.value = BrowRight_W_Sav02;
            CharacterDetails.HrothLipUpper_X.value = HrothLipUpper_X_Sav02;
            CharacterDetails.HrothLipUpper_Y.value = HrothLipUpper_Y_Sav02;
            CharacterDetails.HrothLipUpper_Z.value = HrothLipUpper_Z_Sav02;
            CharacterDetails.HrothLipUpper_W.value = HrothLipUpper_W_Sav02;
            CharacterDetails.LipUpperA_X.value = LipUpperA_X_Sav02;
            CharacterDetails.LipUpperA_Y.value = LipUpperA_Y_Sav02;
            CharacterDetails.LipUpperA_Z.value = LipUpperA_Z_Sav02;
            CharacterDetails.LipUpperA_W.value = LipUpperA_W_Sav02;
            CharacterDetails.HrothEyelidUpperLeft_X.value = HrothEyelidUpperLeft_X_Sav02;
            CharacterDetails.HrothEyelidUpperLeft_Y.value = HrothEyelidUpperLeft_Y_Sav02;
            CharacterDetails.HrothEyelidUpperLeft_Z.value = HrothEyelidUpperLeft_Z_Sav02;
            CharacterDetails.HrothEyelidUpperLeft_W.value = HrothEyelidUpperLeft_W_Sav02;
            CharacterDetails.EyelidUpperLeft_X.value = EyelidUpperLeft_X_Sav02;
            CharacterDetails.EyelidUpperLeft_Y.value = EyelidUpperLeft_Y_Sav02;
            CharacterDetails.EyelidUpperLeft_Z.value = EyelidUpperLeft_Z_Sav02;
            CharacterDetails.EyelidUpperLeft_W.value = EyelidUpperLeft_W_Sav02;
            CharacterDetails.HrothEyelidUpperRight_X.value = HrothEyelidUpperRight_X_Sav02;
            CharacterDetails.HrothEyelidUpperRight_Y.value = HrothEyelidUpperRight_Y_Sav02;
            CharacterDetails.HrothEyelidUpperRight_Z.value = HrothEyelidUpperRight_Z_Sav02;
            CharacterDetails.HrothEyelidUpperRight_W.value = HrothEyelidUpperRight_W_Sav02;
            CharacterDetails.EyelidUpperRight_X.value = EyelidUpperRight_X_Sav02;
            CharacterDetails.EyelidUpperRight_Y.value = EyelidUpperRight_Y_Sav02;
            CharacterDetails.EyelidUpperRight_Z.value = EyelidUpperRight_Z_Sav02;
            CharacterDetails.EyelidUpperRight_W.value = EyelidUpperRight_W_Sav02;
            CharacterDetails.HrothLipsLeft_X.value = HrothLipsLeft_X_Sav02;
            CharacterDetails.HrothLipsLeft_Y.value = HrothLipsLeft_Y_Sav02;
            CharacterDetails.HrothLipsLeft_Z.value = HrothLipsLeft_Z_Sav02;
            CharacterDetails.HrothLipsLeft_W.value = HrothLipsLeft_W_Sav02;
            CharacterDetails.LipLowerA_X.value = LipLowerA_X_Sav02;
            CharacterDetails.LipLowerA_Y.value = LipLowerA_Y_Sav02;
            CharacterDetails.LipLowerA_Z.value = LipLowerA_Z_Sav02;
            CharacterDetails.LipLowerA_W.value = LipLowerA_W_Sav02;
            CharacterDetails.HrothLipsRight_X.value = HrothLipsRight_X_Sav02;
            CharacterDetails.HrothLipsRight_Y.value = HrothLipsRight_Y_Sav02;
            CharacterDetails.HrothLipsRight_Z.value = HrothLipsRight_Z_Sav02;
            CharacterDetails.HrothLipsRight_W.value = HrothLipsRight_W_Sav02;
            CharacterDetails.VieraEar01ALeft_X.value = VieraEar01ALeft_X_Sav02;
            CharacterDetails.VieraEar01ALeft_Y.value = VieraEar01ALeft_Y_Sav02;
            CharacterDetails.VieraEar01ALeft_Z.value = VieraEar01ALeft_Z_Sav02;
            CharacterDetails.VieraEar01ALeft_W.value = VieraEar01ALeft_W_Sav02;
            CharacterDetails.LipUpperB_X.value = LipUpperB_X_Sav02;
            CharacterDetails.LipUpperB_Y.value = LipUpperB_Y_Sav02;
            CharacterDetails.LipUpperB_Z.value = LipUpperB_Z_Sav02;
            CharacterDetails.LipUpperB_W.value = LipUpperB_W_Sav02;
            CharacterDetails.HrothLipUpperLeft_X.value = HrothLipUpperLeft_X_Sav02;
            CharacterDetails.HrothLipUpperLeft_Y.value = HrothLipUpperLeft_Y_Sav02;
            CharacterDetails.HrothLipUpperLeft_Z.value = HrothLipUpperLeft_Z_Sav02;
            CharacterDetails.HrothLipUpperLeft_W.value = HrothLipUpperLeft_W_Sav02;
            CharacterDetails.VieraEar01ARight_X.value = VieraEar01ARight_X_Sav02;
            CharacterDetails.VieraEar01ARight_Y.value = VieraEar01ARight_Y_Sav02;
            CharacterDetails.VieraEar01ARight_Z.value = VieraEar01ARight_Z_Sav02;
            CharacterDetails.VieraEar01ARight_W.value = VieraEar01ARight_W_Sav02;
            CharacterDetails.LipLowerB_X.value = LipLowerB_X_Sav02;
            CharacterDetails.LipLowerB_Y.value = LipLowerB_Y_Sav02;
            CharacterDetails.LipLowerB_Z.value = LipLowerB_Z_Sav02;
            CharacterDetails.LipLowerB_W.value = LipLowerB_W_Sav02;
            CharacterDetails.HrothLipUpperRight_X.value = HrothLipUpperRight_X_Sav02;
            CharacterDetails.HrothLipUpperRight_Y.value = HrothLipUpperRight_Y_Sav02;
            CharacterDetails.HrothLipUpperRight_Z.value = HrothLipUpperRight_Z_Sav02;
            CharacterDetails.HrothLipUpperRight_W.value = HrothLipUpperRight_W_Sav02;
            CharacterDetails.VieraEar02ALeft_X.value = VieraEar02ALeft_X_Sav02;
            CharacterDetails.VieraEar02ALeft_Y.value = VieraEar02ALeft_Y_Sav02;
            CharacterDetails.VieraEar02ALeft_Z.value = VieraEar02ALeft_Z_Sav02;
            CharacterDetails.VieraEar02ALeft_W.value = VieraEar02ALeft_W_Sav02;
            CharacterDetails.HrothLipLower_X.value = HrothLipLower_X_Sav02;
            CharacterDetails.HrothLipLower_Y.value = HrothLipLower_Y_Sav02;
            CharacterDetails.HrothLipLower_Z.value = HrothLipLower_Z_Sav02;
            CharacterDetails.HrothLipLower_W.value = HrothLipLower_W_Sav02;
            CharacterDetails.VieraEar02ARight_X.value = VieraEar02ARight_X_Sav02;
            CharacterDetails.VieraEar02ARight_Y.value = VieraEar02ARight_Y_Sav02;
            CharacterDetails.VieraEar02ARight_Z.value = VieraEar02ARight_Z_Sav02;
            CharacterDetails.VieraEar02ARight_W.value = VieraEar02ARight_W_Sav02;
            CharacterDetails.VieraEar03ALeft_X.value = VieraEar03ALeft_X_Sav02;
            CharacterDetails.VieraEar03ALeft_Y.value = VieraEar03ALeft_Y_Sav02;
            CharacterDetails.VieraEar03ALeft_Z.value = VieraEar03ALeft_Z_Sav02;
            CharacterDetails.VieraEar03ALeft_W.value = VieraEar03ALeft_W_Sav02;
            CharacterDetails.VieraEar03ARight_X.value = VieraEar03ARight_X_Sav02;
            CharacterDetails.VieraEar03ARight_Y.value = VieraEar03ARight_Y_Sav02;
            CharacterDetails.VieraEar03ARight_Z.value = VieraEar03ARight_Z_Sav02;
            CharacterDetails.VieraEar03ARight_W.value = VieraEar03ARight_W_Sav02;
            CharacterDetails.VieraEar04ALeft_X.value = VieraEar04ALeft_X_Sav02;
            CharacterDetails.VieraEar04ALeft_Y.value = VieraEar04ALeft_Y_Sav02;
            CharacterDetails.VieraEar04ALeft_Z.value = VieraEar04ALeft_Z_Sav02;
            CharacterDetails.VieraEar04ALeft_W.value = VieraEar04ALeft_W_Sav02;
            CharacterDetails.VieraEar04ARight_X.value = VieraEar04ARight_X_Sav02;
            CharacterDetails.VieraEar04ARight_Y.value = VieraEar04ARight_Y_Sav02;
            CharacterDetails.VieraEar04ARight_Z.value = VieraEar04ARight_Z_Sav02;
            CharacterDetails.VieraEar04ARight_W.value = VieraEar04ARight_W_Sav02;
            CharacterDetails.VieraLipLowerA_X.value = VieraLipLowerA_X_Sav02;
            CharacterDetails.VieraLipLowerA_Y.value = VieraLipLowerA_Y_Sav02;
            CharacterDetails.VieraLipLowerA_Z.value = VieraLipLowerA_Z_Sav02;
            CharacterDetails.VieraLipLowerA_W.value = VieraLipLowerA_W_Sav02;
            CharacterDetails.VieraLipUpperB_X.value = VieraLipUpperB_X_Sav02;
            CharacterDetails.VieraLipUpperB_Y.value = VieraLipUpperB_Y_Sav02;
            CharacterDetails.VieraLipUpperB_Z.value = VieraLipUpperB_Z_Sav02;
            CharacterDetails.VieraLipUpperB_W.value = VieraLipUpperB_W_Sav02;
            CharacterDetails.VieraEar01BLeft_X.value = VieraEar01BLeft_X_Sav02;
            CharacterDetails.VieraEar01BLeft_Y.value = VieraEar01BLeft_Y_Sav02;
            CharacterDetails.VieraEar01BLeft_Z.value = VieraEar01BLeft_Z_Sav02;
            CharacterDetails.VieraEar01BLeft_W.value = VieraEar01BLeft_W_Sav02;
            CharacterDetails.VieraEar01BRight_X.value = VieraEar01BRight_X_Sav02;
            CharacterDetails.VieraEar01BRight_Y.value = VieraEar01BRight_Y_Sav02;
            CharacterDetails.VieraEar01BRight_Z.value = VieraEar01BRight_Z_Sav02;
            CharacterDetails.VieraEar01BRight_W.value = VieraEar01BRight_W_Sav02;
            CharacterDetails.VieraEar02BLeft_X.value = VieraEar02BLeft_X_Sav02;
            CharacterDetails.VieraEar02BLeft_Y.value = VieraEar02BLeft_Y_Sav02;
            CharacterDetails.VieraEar02BLeft_Z.value = VieraEar02BLeft_Z_Sav02;
            CharacterDetails.VieraEar02BLeft_W.value = VieraEar02BLeft_W_Sav02;
            CharacterDetails.VieraEar02BRight_X.value = VieraEar02BRight_X_Sav02;
            CharacterDetails.VieraEar02BRight_Y.value = VieraEar02BRight_Y_Sav02;
            CharacterDetails.VieraEar02BRight_Z.value = VieraEar02BRight_Z_Sav02;
            CharacterDetails.VieraEar02BRight_W.value = VieraEar02BRight_W_Sav02;
            CharacterDetails.VieraEar03BLeft_X.value = VieraEar03BLeft_X_Sav02;
            CharacterDetails.VieraEar03BLeft_Y.value = VieraEar03BLeft_Y_Sav02;
            CharacterDetails.VieraEar03BLeft_Z.value = VieraEar03BLeft_Z_Sav02;
            CharacterDetails.VieraEar03BLeft_W.value = VieraEar03BLeft_W_Sav02;
            CharacterDetails.VieraEar03BRight_X.value = VieraEar03BRight_X_Sav02;
            CharacterDetails.VieraEar03BRight_Y.value = VieraEar03BRight_Y_Sav02;
            CharacterDetails.VieraEar03BRight_Z.value = VieraEar03BRight_Z_Sav02;
            CharacterDetails.VieraEar03BRight_W.value = VieraEar03BRight_W_Sav02;
            CharacterDetails.VieraEar04BLeft_X.value = VieraEar04BLeft_X_Sav02;
            CharacterDetails.VieraEar04BLeft_Y.value = VieraEar04BLeft_Y_Sav02;
            CharacterDetails.VieraEar04BLeft_Z.value = VieraEar04BLeft_Z_Sav02;
            CharacterDetails.VieraEar04BLeft_W.value = VieraEar04BLeft_W_Sav02;
            CharacterDetails.VieraEar04BRight_X.value = VieraEar04BRight_X_Sav02;
            CharacterDetails.VieraEar04BRight_Y.value = VieraEar04BRight_Y_Sav02;
            CharacterDetails.VieraEar04BRight_Z.value = VieraEar04BRight_Z_Sav02;
            CharacterDetails.VieraEar04BRight_W.value = VieraEar04BRight_W_Sav02;
            CharacterDetails.VieraLipLowerB_X.value = VieraLipLowerB_X_Sav02;
            CharacterDetails.VieraLipLowerB_Y.value = VieraLipLowerB_Y_Sav02;
            CharacterDetails.VieraLipLowerB_Z.value = VieraLipLowerB_Z_Sav02;
            CharacterDetails.VieraLipLowerB_W.value = VieraLipLowerB_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate Hair
        private void SavestateHair01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveHair01 = true;
            HairSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateHair01.IsEnabled = true;
        }
        private void SavestateHair02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveHair02 = true;
            HairSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateHair02.IsEnabled = true;
        }
        private void LoadstateHair01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteHair = true;

            CharacterDetails.HairA_X.value = HairA_X_Sav01;
            CharacterDetails.HairA_Y.value = HairA_Y_Sav01;
            CharacterDetails.HairA_Z.value = HairA_Z_Sav01;
            CharacterDetails.HairA_W.value = HairA_W_Sav01;
            CharacterDetails.HairFrontLeft_X.value = HairFrontLeft_X_Sav01;
            CharacterDetails.HairFrontLeft_Y.value = HairFrontLeft_Y_Sav01;
            CharacterDetails.HairFrontLeft_Z.value = HairFrontLeft_Z_Sav01;
            CharacterDetails.HairFrontLeft_W.value = HairFrontLeft_W_Sav01;
            CharacterDetails.HairFrontRight_X.value = HairFrontRight_X_Sav01;
            CharacterDetails.HairFrontRight_Y.value = HairFrontRight_Y_Sav01;
            CharacterDetails.HairFrontRight_Z.value = HairFrontRight_Z_Sav01;
            CharacterDetails.HairFrontRight_W.value = HairFrontRight_W_Sav01;
            CharacterDetails.HairB_X.value = HairB_X_Sav01;
            CharacterDetails.HairB_Y.value = HairB_Y_Sav01;
            CharacterDetails.HairB_Z.value = HairB_Z_Sav01;
            CharacterDetails.HairB_W.value = HairB_W_Sav01;
            CharacterDetails.ExHairA_X.value = ExHairA_X_Sav01;
            CharacterDetails.ExHairA_Y.value = ExHairA_Y_Sav01;
            CharacterDetails.ExHairA_Z.value = ExHairA_Z_Sav01;
            CharacterDetails.ExHairA_W.value = ExHairA_W_Sav01;
            CharacterDetails.ExHairB_X.value = ExHairB_X_Sav01;
            CharacterDetails.ExHairB_Y.value = ExHairB_Y_Sav01;
            CharacterDetails.ExHairB_Z.value = ExHairB_Z_Sav01;
            CharacterDetails.ExHairB_W.value = ExHairB_W_Sav01;
            CharacterDetails.ExHairC_X.value = ExHairC_X_Sav01;
            CharacterDetails.ExHairC_Y.value = ExHairC_Y_Sav01;
            CharacterDetails.ExHairC_Z.value = ExHairC_Z_Sav01;
            CharacterDetails.ExHairC_W.value = ExHairC_W_Sav01;
            CharacterDetails.ExHairD_X.value = ExHairD_X_Sav01;
            CharacterDetails.ExHairD_Y.value = ExHairD_Y_Sav01;
            CharacterDetails.ExHairD_Z.value = ExHairD_Z_Sav01;
            CharacterDetails.ExHairD_W.value = ExHairD_W_Sav01;
            CharacterDetails.ExHairE_X.value = ExHairE_X_Sav01;
            CharacterDetails.ExHairE_Y.value = ExHairE_Y_Sav01;
            CharacterDetails.ExHairE_Z.value = ExHairE_Z_Sav01;
            CharacterDetails.ExHairE_W.value = ExHairE_W_Sav01;
            CharacterDetails.ExHairF_X.value = ExHairF_X_Sav01;
            CharacterDetails.ExHairF_Y.value = ExHairF_Y_Sav01;
            CharacterDetails.ExHairF_Z.value = ExHairF_Z_Sav01;
            CharacterDetails.ExHairF_W.value = ExHairF_W_Sav01;
            CharacterDetails.ExHairG_X.value = ExHairG_X_Sav01;
            CharacterDetails.ExHairG_Y.value = ExHairG_Y_Sav01;
            CharacterDetails.ExHairG_Z.value = ExHairG_Z_Sav01;
            CharacterDetails.ExHairG_W.value = ExHairG_W_Sav01;
            CharacterDetails.ExHairH_X.value = ExHairH_X_Sav01;
            CharacterDetails.ExHairH_Y.value = ExHairH_Y_Sav01;
            CharacterDetails.ExHairH_Z.value = ExHairH_Z_Sav01;
            CharacterDetails.ExHairH_W.value = ExHairH_W_Sav01;
            CharacterDetails.ExHairI_X.value = ExHairI_X_Sav01;
            CharacterDetails.ExHairI_Y.value = ExHairI_Y_Sav01;
            CharacterDetails.ExHairI_Z.value = ExHairI_Z_Sav01;
            CharacterDetails.ExHairI_W.value = ExHairI_W_Sav01;
            CharacterDetails.ExHairJ_X.value = ExHairJ_X_Sav01;
            CharacterDetails.ExHairJ_Y.value = ExHairJ_Y_Sav01;
            CharacterDetails.ExHairJ_Z.value = ExHairJ_Z_Sav01;
            CharacterDetails.ExHairJ_W.value = ExHairJ_W_Sav01;
            CharacterDetails.ExHairK_X.value = ExHairK_X_Sav01;
            CharacterDetails.ExHairK_Y.value = ExHairK_Y_Sav01;
            CharacterDetails.ExHairK_Z.value = ExHairK_Z_Sav01;
            CharacterDetails.ExHairK_W.value = ExHairK_W_Sav01;
            CharacterDetails.ExHairL_X.value = ExHairL_X_Sav01;
            CharacterDetails.ExHairL_Y.value = ExHairL_Y_Sav01;
            CharacterDetails.ExHairL_Z.value = ExHairL_Z_Sav01;
            CharacterDetails.ExHairL_W.value = ExHairL_W_Sav01;
        }
        private void LoadstateHair02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteHair = true;

            CharacterDetails.HairA_X.value = HairA_X_Sav02;
            CharacterDetails.HairA_Y.value = HairA_Y_Sav02;
            CharacterDetails.HairA_Z.value = HairA_Z_Sav02;
            CharacterDetails.HairA_W.value = HairA_W_Sav02;
            CharacterDetails.HairFrontLeft_X.value = HairFrontLeft_X_Sav02;
            CharacterDetails.HairFrontLeft_Y.value = HairFrontLeft_Y_Sav02;
            CharacterDetails.HairFrontLeft_Z.value = HairFrontLeft_Z_Sav02;
            CharacterDetails.HairFrontLeft_W.value = HairFrontLeft_W_Sav02;
            CharacterDetails.HairFrontRight_X.value = HairFrontRight_X_Sav02;
            CharacterDetails.HairFrontRight_Y.value = HairFrontRight_Y_Sav02;
            CharacterDetails.HairFrontRight_Z.value = HairFrontRight_Z_Sav02;
            CharacterDetails.HairFrontRight_W.value = HairFrontRight_W_Sav02;
            CharacterDetails.HairB_X.value = HairB_X_Sav02;
            CharacterDetails.HairB_Y.value = HairB_Y_Sav02;
            CharacterDetails.HairB_Z.value = HairB_Z_Sav02;
            CharacterDetails.HairB_W.value = HairB_W_Sav02;
            CharacterDetails.ExHairA_X.value = ExHairA_X_Sav02;
            CharacterDetails.ExHairA_Y.value = ExHairA_Y_Sav02;
            CharacterDetails.ExHairA_Z.value = ExHairA_Z_Sav02;
            CharacterDetails.ExHairA_W.value = ExHairA_W_Sav02;
            CharacterDetails.ExHairB_X.value = ExHairB_X_Sav02;
            CharacterDetails.ExHairB_Y.value = ExHairB_Y_Sav02;
            CharacterDetails.ExHairB_Z.value = ExHairB_Z_Sav02;
            CharacterDetails.ExHairB_W.value = ExHairB_W_Sav02;
            CharacterDetails.ExHairC_X.value = ExHairC_X_Sav02;
            CharacterDetails.ExHairC_Y.value = ExHairC_Y_Sav02;
            CharacterDetails.ExHairC_Z.value = ExHairC_Z_Sav02;
            CharacterDetails.ExHairC_W.value = ExHairC_W_Sav02;
            CharacterDetails.ExHairD_X.value = ExHairD_X_Sav02;
            CharacterDetails.ExHairD_Y.value = ExHairD_Y_Sav02;
            CharacterDetails.ExHairD_Z.value = ExHairD_Z_Sav02;
            CharacterDetails.ExHairD_W.value = ExHairD_W_Sav02;
            CharacterDetails.ExHairE_X.value = ExHairE_X_Sav02;
            CharacterDetails.ExHairE_Y.value = ExHairE_Y_Sav02;
            CharacterDetails.ExHairE_Z.value = ExHairE_Z_Sav02;
            CharacterDetails.ExHairE_W.value = ExHairE_W_Sav02;
            CharacterDetails.ExHairF_X.value = ExHairF_X_Sav02;
            CharacterDetails.ExHairF_Y.value = ExHairF_Y_Sav02;
            CharacterDetails.ExHairF_Z.value = ExHairF_Z_Sav02;
            CharacterDetails.ExHairF_W.value = ExHairF_W_Sav02;
            CharacterDetails.ExHairG_X.value = ExHairG_X_Sav02;
            CharacterDetails.ExHairG_Y.value = ExHairG_Y_Sav02;
            CharacterDetails.ExHairG_Z.value = ExHairG_Z_Sav02;
            CharacterDetails.ExHairG_W.value = ExHairG_W_Sav02;
            CharacterDetails.ExHairH_X.value = ExHairH_X_Sav02;
            CharacterDetails.ExHairH_Y.value = ExHairH_Y_Sav02;
            CharacterDetails.ExHairH_Z.value = ExHairH_Z_Sav02;
            CharacterDetails.ExHairH_W.value = ExHairH_W_Sav02;
            CharacterDetails.ExHairI_X.value = ExHairI_X_Sav02;
            CharacterDetails.ExHairI_Y.value = ExHairI_Y_Sav02;
            CharacterDetails.ExHairI_Z.value = ExHairI_Z_Sav02;
            CharacterDetails.ExHairI_W.value = ExHairI_W_Sav02;
            CharacterDetails.ExHairJ_X.value = ExHairJ_X_Sav02;
            CharacterDetails.ExHairJ_Y.value = ExHairJ_Y_Sav02;
            CharacterDetails.ExHairJ_Z.value = ExHairJ_Z_Sav02;
            CharacterDetails.ExHairJ_W.value = ExHairJ_W_Sav02;
            CharacterDetails.ExHairK_X.value = ExHairK_X_Sav02;
            CharacterDetails.ExHairK_Y.value = ExHairK_Y_Sav02;
            CharacterDetails.ExHairK_Z.value = ExHairK_Z_Sav02;
            CharacterDetails.ExHairK_W.value = ExHairK_W_Sav02;
            CharacterDetails.ExHairL_X.value = ExHairL_X_Sav02;
            CharacterDetails.ExHairL_Y.value = ExHairL_Y_Sav02;
            CharacterDetails.ExHairL_Z.value = ExHairL_Z_Sav02;
            CharacterDetails.ExHairL_W.value = ExHairL_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate Earrings
        private void SavestateEarrings01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveEarrings01 = true;
            EarringsSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateEarrings01.IsEnabled = true;
        }
        private void SavestateEarrings02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveEarrings02 = true;
            EarringsSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateEarrings02.IsEnabled = true;
        }
        private void LoadstateEarrings01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteEarrings = true;

            CharacterDetails.EarringALeft_X.value = EarringALeft_X_Sav01;
            CharacterDetails.EarringALeft_Y.value = EarringALeft_Y_Sav01;
            CharacterDetails.EarringALeft_Z.value = EarringALeft_Z_Sav01;
            CharacterDetails.EarringALeft_W.value = EarringALeft_W_Sav01;
            CharacterDetails.EarringARight_X.value = EarringARight_X_Sav01;
            CharacterDetails.EarringARight_Y.value = EarringARight_Y_Sav01;
            CharacterDetails.EarringARight_Z.value = EarringARight_Z_Sav01;
            CharacterDetails.EarringARight_W.value = EarringARight_W_Sav01;
            CharacterDetails.EarringBLeft_X.value = EarringBLeft_X_Sav01;
            CharacterDetails.EarringBLeft_Y.value = EarringBLeft_Y_Sav01;
            CharacterDetails.EarringBLeft_Z.value = EarringBLeft_Z_Sav01;
            CharacterDetails.EarringBLeft_W.value = EarringBLeft_W_Sav01;
            CharacterDetails.EarringBRight_X.value = EarringBRight_X_Sav01;
            CharacterDetails.EarringBRight_Y.value = EarringBRight_Y_Sav01;
            CharacterDetails.EarringBRight_Z.value = EarringBRight_Z_Sav01;
            CharacterDetails.EarringBRight_W.value = EarringBRight_W_Sav01;

        }
        private void LoadstateEarrings02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteEarrings = true;

            CharacterDetails.EarringALeft_X.value = EarringALeft_X_Sav02;
            CharacterDetails.EarringALeft_Y.value = EarringALeft_Y_Sav02;
            CharacterDetails.EarringALeft_Z.value = EarringALeft_Z_Sav02;
            CharacterDetails.EarringALeft_W.value = EarringALeft_W_Sav02;
            CharacterDetails.EarringARight_X.value = EarringARight_X_Sav02;
            CharacterDetails.EarringARight_Y.value = EarringARight_Y_Sav02;
            CharacterDetails.EarringARight_Z.value = EarringARight_Z_Sav02;
            CharacterDetails.EarringARight_W.value = EarringARight_W_Sav02;
            CharacterDetails.EarringBLeft_X.value = EarringBLeft_X_Sav02;
            CharacterDetails.EarringBLeft_Y.value = EarringBLeft_Y_Sav02;
            CharacterDetails.EarringBLeft_Z.value = EarringBLeft_Z_Sav02;
            CharacterDetails.EarringBLeft_W.value = EarringBLeft_W_Sav02;
            CharacterDetails.EarringBRight_X.value = EarringBRight_X_Sav02;
            CharacterDetails.EarringBRight_Y.value = EarringBRight_Y_Sav02;
            CharacterDetails.EarringBRight_Z.value = EarringBRight_Z_Sav02;
            CharacterDetails.EarringBRight_W.value = EarringBRight_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate Body
        private void SavestateBody01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveBody01 = true;
            BodySaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateBody01.IsEnabled = true;
        }
        private void SavestateBody02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveBody02 = true;
            BodySaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateBody02.IsEnabled = true;
        }
        private void LoadstateBody01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteBody = true;

            CharacterDetails.SpineA_X.value = SpineA_X_Sav01;
            CharacterDetails.SpineA_Y.value = SpineA_Y_Sav01;
            CharacterDetails.SpineA_Z.value = SpineA_Z_Sav01;
            CharacterDetails.SpineA_W.value = SpineA_W_Sav01;
            CharacterDetails.SpineB_X.value = SpineB_X_Sav01;
            CharacterDetails.SpineB_Y.value = SpineB_Y_Sav01;
            CharacterDetails.SpineB_Z.value = SpineB_Z_Sav01;
            CharacterDetails.SpineB_W.value = SpineB_W_Sav01;
            CharacterDetails.BreastLeft_X.value = BreastLeft_X_Sav01;
            CharacterDetails.BreastLeft_Y.value = BreastLeft_Y_Sav01;
            CharacterDetails.BreastLeft_Z.value = BreastLeft_Z_Sav01;
            CharacterDetails.BreastLeft_W.value = BreastLeft_W_Sav01;
            CharacterDetails.BreastRight_X.value = BreastRight_X_Sav01;
            CharacterDetails.BreastRight_Y.value = BreastRight_Y_Sav01;
            CharacterDetails.BreastRight_Z.value = BreastRight_Z_Sav01;
            CharacterDetails.BreastRight_W.value = BreastRight_W_Sav01;
            CharacterDetails.SpineC_X.value = SpineC_X_Sav01;
            CharacterDetails.SpineC_Y.value = SpineC_Y_Sav01;
            CharacterDetails.SpineC_Z.value = SpineC_Z_Sav01;
            CharacterDetails.SpineC_W.value = SpineC_W_Sav01;
            CharacterDetails.ScabbardLeft_X.value = ScabbardLeft_X_Sav01;
            CharacterDetails.ScabbardLeft_Y.value = ScabbardLeft_Y_Sav01;
            CharacterDetails.ScabbardLeft_Z.value = ScabbardLeft_Z_Sav01;
            CharacterDetails.ScabbardLeft_W.value = ScabbardLeft_W_Sav01;
            CharacterDetails.ScabbardRight_X.value = ScabbardRight_X_Sav01;
            CharacterDetails.ScabbardRight_Y.value = ScabbardRight_Y_Sav01;
            CharacterDetails.ScabbardRight_Z.value = ScabbardRight_Z_Sav01;
            CharacterDetails.ScabbardRight_W.value = ScabbardRight_W_Sav01;
            CharacterDetails.Neck_X.value = Neck_X_Sav01;
            CharacterDetails.Neck_Y.value = Neck_Y_Sav01;
            CharacterDetails.Neck_Z.value = Neck_Z_Sav01;
            CharacterDetails.Neck_W.value = Neck_W_Sav01;
        }
        private void LoadstateBody02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteBody = true;

            CharacterDetails.SpineA_X.value = SpineA_X_Sav02;
            CharacterDetails.SpineA_Y.value = SpineA_Y_Sav02;
            CharacterDetails.SpineA_Z.value = SpineA_Z_Sav02;
            CharacterDetails.SpineA_W.value = SpineA_W_Sav02;
            CharacterDetails.SpineB_X.value = SpineB_X_Sav02;
            CharacterDetails.SpineB_Y.value = SpineB_Y_Sav02;
            CharacterDetails.SpineB_Z.value = SpineB_Z_Sav02;
            CharacterDetails.SpineB_W.value = SpineB_W_Sav02;
            CharacterDetails.BreastLeft_X.value = BreastLeft_X_Sav02;
            CharacterDetails.BreastLeft_Y.value = BreastLeft_Y_Sav02;
            CharacterDetails.BreastLeft_Z.value = BreastLeft_Z_Sav02;
            CharacterDetails.BreastLeft_W.value = BreastLeft_W_Sav02;
            CharacterDetails.BreastRight_X.value = BreastRight_X_Sav02;
            CharacterDetails.BreastRight_Y.value = BreastRight_Y_Sav02;
            CharacterDetails.BreastRight_Z.value = BreastRight_Z_Sav02;
            CharacterDetails.BreastRight_W.value = BreastRight_W_Sav02;
            CharacterDetails.SpineC_X.value = SpineC_X_Sav02;
            CharacterDetails.SpineC_Y.value = SpineC_Y_Sav02;
            CharacterDetails.SpineC_Z.value = SpineC_Z_Sav02;
            CharacterDetails.SpineC_W.value = SpineC_W_Sav02;
            CharacterDetails.ScabbardLeft_X.value = ScabbardLeft_X_Sav02;
            CharacterDetails.ScabbardLeft_Y.value = ScabbardLeft_Y_Sav02;
            CharacterDetails.ScabbardLeft_Z.value = ScabbardLeft_Z_Sav02;
            CharacterDetails.ScabbardLeft_W.value = ScabbardLeft_W_Sav02;
            CharacterDetails.ScabbardRight_X.value = ScabbardRight_X_Sav02;
            CharacterDetails.ScabbardRight_Y.value = ScabbardRight_Y_Sav02;
            CharacterDetails.ScabbardRight_Z.value = ScabbardRight_Z_Sav02;
            CharacterDetails.ScabbardRight_W.value = ScabbardRight_W_Sav02;
            CharacterDetails.Neck_X.value = Neck_X_Sav02;
            CharacterDetails.Neck_Y.value = Neck_Y_Sav02;
            CharacterDetails.Neck_Z.value = Neck_Z_Sav02;
            CharacterDetails.Neck_W.value = Neck_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate LeftArm
        private void SavestateLeftArm01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveLeftArm01 = true;
            LeftArmSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateLeftArm01.IsEnabled = true;
        }
        private void SavestateLeftArm02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveLeftArm02 = true;
            LeftArmSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateLeftArm02.IsEnabled = true;
        }
        private void LoadstateLeftArm01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteLeftArm = true;

            CharacterDetails.ClavicleLeft_X.value = ClavicleLeft_X_Sav01;
            CharacterDetails.ClavicleLeft_Y.value = ClavicleLeft_Y_Sav01;
            CharacterDetails.ClavicleLeft_Z.value = ClavicleLeft_Z_Sav01;
            CharacterDetails.ClavicleLeft_W.value = ClavicleLeft_W_Sav01;
            CharacterDetails.ArmLeft_X.value = ArmLeft_X_Sav01;
            CharacterDetails.ArmLeft_Y.value = ArmLeft_Y_Sav01;
            CharacterDetails.ArmLeft_Z.value = ArmLeft_Z_Sav01;
            CharacterDetails.ArmLeft_W.value = ArmLeft_W_Sav01;
            CharacterDetails.ArmRight_X.value = ArmRight_X_Sav01;
            CharacterDetails.ArmRight_Y.value = ArmRight_Y_Sav01;
            CharacterDetails.ArmRight_Z.value = ArmRight_Z_Sav01;
            CharacterDetails.ArmRight_W.value = ArmRight_W_Sav01;
            CharacterDetails.PauldronLeft_X.value = PauldronLeft_X_Sav01;
            CharacterDetails.PauldronLeft_Y.value = PauldronLeft_Y_Sav01;
            CharacterDetails.PauldronLeft_Z.value = PauldronLeft_Z_Sav01;
            CharacterDetails.PauldronLeft_W.value = PauldronLeft_W_Sav01;
            CharacterDetails.ForearmLeft_X.value = ForearmLeft_X_Sav01;
            CharacterDetails.ForearmLeft_Y.value = ForearmLeft_Y_Sav01;
            CharacterDetails.ForearmLeft_Z.value = ForearmLeft_Z_Sav01;
            CharacterDetails.ForearmLeft_W.value = ForearmLeft_W_Sav01;
            CharacterDetails.ShoulderLeft_X.value = ShoulderLeft_X_Sav01;
            CharacterDetails.ShoulderLeft_Y.value = ShoulderLeft_Y_Sav01;
            CharacterDetails.ShoulderLeft_Z.value = ShoulderLeft_Z_Sav01;
            CharacterDetails.ShoulderLeft_W.value = ShoulderLeft_W_Sav01;
            CharacterDetails.ShieldLeft_X.value = ShieldLeft_X_Sav01;
            CharacterDetails.ShieldLeft_Y.value = ShieldLeft_Y_Sav01;
            CharacterDetails.ShieldLeft_Z.value = ShieldLeft_Z_Sav01;
            CharacterDetails.ShieldLeft_W.value = ShieldLeft_W_Sav01;
            CharacterDetails.ElbowLeft_X.value = ElbowLeft_X_Sav01;
            CharacterDetails.ElbowLeft_Y.value = ElbowLeft_Y_Sav01;
            CharacterDetails.ElbowLeft_Z.value = ElbowLeft_Z_Sav01;
            CharacterDetails.ElbowLeft_W.value = ElbowLeft_W_Sav01;
            CharacterDetails.CouterLeft_X.value = CouterLeft_X_Sav01;
            CharacterDetails.CouterLeft_Y.value = CouterLeft_Y_Sav01;
            CharacterDetails.CouterLeft_Z.value = CouterLeft_Z_Sav01;
            CharacterDetails.CouterLeft_W.value = CouterLeft_W_Sav01;
            CharacterDetails.WristLeft_X.value = WristLeft_X_Sav01;
            CharacterDetails.WristLeft_Y.value = WristLeft_Y_Sav01;
            CharacterDetails.WristLeft_Z.value = WristLeft_Z_Sav01;
            CharacterDetails.WristLeft_W.value = WristLeft_W_Sav01;
        }
        private void LoadstateLeftArm02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteLeftArm = true;

            CharacterDetails.ClavicleLeft_X.value = ClavicleLeft_X_Sav02;
            CharacterDetails.ClavicleLeft_Y.value = ClavicleLeft_Y_Sav02;
            CharacterDetails.ClavicleLeft_Z.value = ClavicleLeft_Z_Sav02;
            CharacterDetails.ClavicleLeft_W.value = ClavicleLeft_W_Sav02;
            CharacterDetails.ArmLeft_X.value = ArmLeft_X_Sav02;
            CharacterDetails.ArmLeft_Y.value = ArmLeft_Y_Sav02;
            CharacterDetails.ArmLeft_Z.value = ArmLeft_Z_Sav02;
            CharacterDetails.ArmLeft_W.value = ArmLeft_W_Sav02;
            CharacterDetails.ArmRight_X.value = ArmRight_X_Sav02;
            CharacterDetails.ArmRight_Y.value = ArmRight_Y_Sav02;
            CharacterDetails.ArmRight_Z.value = ArmRight_Z_Sav02;
            CharacterDetails.ArmRight_W.value = ArmRight_W_Sav02;
            CharacterDetails.PauldronLeft_X.value = PauldronLeft_X_Sav02;
            CharacterDetails.PauldronLeft_Y.value = PauldronLeft_Y_Sav02;
            CharacterDetails.PauldronLeft_Z.value = PauldronLeft_Z_Sav02;
            CharacterDetails.PauldronLeft_W.value = PauldronLeft_W_Sav02;
            CharacterDetails.ForearmLeft_X.value = ForearmLeft_X_Sav02;
            CharacterDetails.ForearmLeft_Y.value = ForearmLeft_Y_Sav02;
            CharacterDetails.ForearmLeft_Z.value = ForearmLeft_Z_Sav02;
            CharacterDetails.ForearmLeft_W.value = ForearmLeft_W_Sav02;
            CharacterDetails.ShoulderLeft_X.value = ShoulderLeft_X_Sav02;
            CharacterDetails.ShoulderLeft_Y.value = ShoulderLeft_Y_Sav02;
            CharacterDetails.ShoulderLeft_Z.value = ShoulderLeft_Z_Sav02;
            CharacterDetails.ShoulderLeft_W.value = ShoulderLeft_W_Sav02;
            CharacterDetails.ShieldLeft_X.value = ShieldLeft_X_Sav02;
            CharacterDetails.ShieldLeft_Y.value = ShieldLeft_Y_Sav02;
            CharacterDetails.ShieldLeft_Z.value = ShieldLeft_Z_Sav02;
            CharacterDetails.ShieldLeft_W.value = ShieldLeft_W_Sav02;
            CharacterDetails.ElbowLeft_X.value = ElbowLeft_X_Sav02;
            CharacterDetails.ElbowLeft_Y.value = ElbowLeft_Y_Sav02;
            CharacterDetails.ElbowLeft_Z.value = ElbowLeft_Z_Sav02;
            CharacterDetails.ElbowLeft_W.value = ElbowLeft_W_Sav02;
            CharacterDetails.CouterLeft_X.value = CouterLeft_X_Sav02;
            CharacterDetails.CouterLeft_Y.value = CouterLeft_Y_Sav02;
            CharacterDetails.CouterLeft_Z.value = CouterLeft_Z_Sav02;
            CharacterDetails.CouterLeft_W.value = CouterLeft_W_Sav02;
            CharacterDetails.WristLeft_X.value = WristLeft_X_Sav02;
            CharacterDetails.WristLeft_Y.value = WristLeft_Y_Sav02;
            CharacterDetails.WristLeft_Z.value = WristLeft_Z_Sav02;
            CharacterDetails.WristLeft_W.value = WristLeft_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate RightArm
        private void SavestateRightArm01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveRightArm01 = true;
            RightArmSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateRightArm01.IsEnabled = true;
        }
        private void SavestateRightArm02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveRightArm02 = true;
            RightArmSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateRightArm02.IsEnabled = true;
        }
        private void LoadstateRightArm01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteRightArm = true;

            CharacterDetails.ClavicleRight_X.value = ClavicleRight_X_Sav01;
            CharacterDetails.ClavicleRight_Y.value = ClavicleRight_Y_Sav01;
            CharacterDetails.ClavicleRight_Z.value = ClavicleRight_Z_Sav01;
            CharacterDetails.ClavicleRight_W.value = ClavicleRight_W_Sav01;
            CharacterDetails.ArmRight_X.value = ArmRight_X_Sav01;
            CharacterDetails.ArmRight_Y.value = ArmRight_Y_Sav01;
            CharacterDetails.ArmRight_Z.value = ArmRight_Z_Sav01;
            CharacterDetails.ArmRight_W.value = ArmRight_W_Sav01;
            CharacterDetails.ArmRight_X.value = ArmRight_X_Sav01;
            CharacterDetails.ArmRight_Y.value = ArmRight_Y_Sav01;
            CharacterDetails.ArmRight_Z.value = ArmRight_Z_Sav01;
            CharacterDetails.ArmRight_W.value = ArmRight_W_Sav01;
            CharacterDetails.PauldronRight_X.value = PauldronRight_X_Sav01;
            CharacterDetails.PauldronRight_Y.value = PauldronRight_Y_Sav01;
            CharacterDetails.PauldronRight_Z.value = PauldronRight_Z_Sav01;
            CharacterDetails.PauldronRight_W.value = PauldronRight_W_Sav01;
            CharacterDetails.ForearmRight_X.value = ForearmRight_X_Sav01;
            CharacterDetails.ForearmRight_Y.value = ForearmRight_Y_Sav01;
            CharacterDetails.ForearmRight_Z.value = ForearmRight_Z_Sav01;
            CharacterDetails.ForearmRight_W.value = ForearmRight_W_Sav01;
            CharacterDetails.ShoulderRight_X.value = ShoulderRight_X_Sav01;
            CharacterDetails.ShoulderRight_Y.value = ShoulderRight_Y_Sav01;
            CharacterDetails.ShoulderRight_Z.value = ShoulderRight_Z_Sav01;
            CharacterDetails.ShoulderRight_W.value = ShoulderRight_W_Sav01;
            CharacterDetails.ShieldRight_X.value = ShieldRight_X_Sav01;
            CharacterDetails.ShieldRight_Y.value = ShieldRight_Y_Sav01;
            CharacterDetails.ShieldRight_Z.value = ShieldRight_Z_Sav01;
            CharacterDetails.ShieldRight_W.value = ShieldRight_W_Sav01;
            CharacterDetails.ElbowRight_X.value = ElbowRight_X_Sav01;
            CharacterDetails.ElbowRight_Y.value = ElbowRight_Y_Sav01;
            CharacterDetails.ElbowRight_Z.value = ElbowRight_Z_Sav01;
            CharacterDetails.ElbowRight_W.value = ElbowRight_W_Sav01;
            CharacterDetails.CouterRight_X.value = CouterRight_X_Sav01;
            CharacterDetails.CouterRight_Y.value = CouterRight_Y_Sav01;
            CharacterDetails.CouterRight_Z.value = CouterRight_Z_Sav01;
            CharacterDetails.CouterRight_W.value = CouterRight_W_Sav01;
            CharacterDetails.WristRight_X.value = WristRight_X_Sav01;
            CharacterDetails.WristRight_Y.value = WristRight_Y_Sav01;
            CharacterDetails.WristRight_Z.value = WristRight_Z_Sav01;
            CharacterDetails.WristRight_W.value = WristRight_W_Sav01;
        }
        private void LoadstateRightArm02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteRightArm = true;

            CharacterDetails.ClavicleRight_X.value = ClavicleRight_X_Sav02;
            CharacterDetails.ClavicleRight_Y.value = ClavicleRight_Y_Sav02;
            CharacterDetails.ClavicleRight_Z.value = ClavicleRight_Z_Sav02;
            CharacterDetails.ClavicleRight_W.value = ClavicleRight_W_Sav02;
            CharacterDetails.ArmRight_X.value = ArmRight_X_Sav02;
            CharacterDetails.ArmRight_Y.value = ArmRight_Y_Sav02;
            CharacterDetails.ArmRight_Z.value = ArmRight_Z_Sav02;
            CharacterDetails.ArmRight_W.value = ArmRight_W_Sav02;
            CharacterDetails.ArmRight_X.value = ArmRight_X_Sav02;
            CharacterDetails.ArmRight_Y.value = ArmRight_Y_Sav02;
            CharacterDetails.ArmRight_Z.value = ArmRight_Z_Sav02;
            CharacterDetails.ArmRight_W.value = ArmRight_W_Sav02;
            CharacterDetails.PauldronRight_X.value = PauldronRight_X_Sav02;
            CharacterDetails.PauldronRight_Y.value = PauldronRight_Y_Sav02;
            CharacterDetails.PauldronRight_Z.value = PauldronRight_Z_Sav02;
            CharacterDetails.PauldronRight_W.value = PauldronRight_W_Sav02;
            CharacterDetails.ForearmRight_X.value = ForearmRight_X_Sav02;
            CharacterDetails.ForearmRight_Y.value = ForearmRight_Y_Sav02;
            CharacterDetails.ForearmRight_Z.value = ForearmRight_Z_Sav02;
            CharacterDetails.ForearmRight_W.value = ForearmRight_W_Sav02;
            CharacterDetails.ShoulderRight_X.value = ShoulderRight_X_Sav02;
            CharacterDetails.ShoulderRight_Y.value = ShoulderRight_Y_Sav02;
            CharacterDetails.ShoulderRight_Z.value = ShoulderRight_Z_Sav02;
            CharacterDetails.ShoulderRight_W.value = ShoulderRight_W_Sav02;
            CharacterDetails.ShieldRight_X.value = ShieldRight_X_Sav02;
            CharacterDetails.ShieldRight_Y.value = ShieldRight_Y_Sav02;
            CharacterDetails.ShieldRight_Z.value = ShieldRight_Z_Sav02;
            CharacterDetails.ShieldRight_W.value = ShieldRight_W_Sav02;
            CharacterDetails.ElbowRight_X.value = ElbowRight_X_Sav02;
            CharacterDetails.ElbowRight_Y.value = ElbowRight_Y_Sav02;
            CharacterDetails.ElbowRight_Z.value = ElbowRight_Z_Sav02;
            CharacterDetails.ElbowRight_W.value = ElbowRight_W_Sav02;
            CharacterDetails.CouterRight_X.value = CouterRight_X_Sav02;
            CharacterDetails.CouterRight_Y.value = CouterRight_Y_Sav02;
            CharacterDetails.CouterRight_Z.value = CouterRight_Z_Sav02;
            CharacterDetails.CouterRight_W.value = CouterRight_W_Sav02;
            CharacterDetails.WristRight_X.value = WristRight_X_Sav02;
            CharacterDetails.WristRight_Y.value = WristRight_Y_Sav02;
            CharacterDetails.WristRight_Z.value = WristRight_Z_Sav02;
            CharacterDetails.WristRight_W.value = WristRight_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate Clothes
        private void SavestateClothes01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveClothes01 = true;
            ClothesSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateClothes01.IsEnabled = true;
        }
        private void SavestateClothes02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveClothes02 = true;
            ClothesSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateClothes02.IsEnabled = true;
        }
        private void LoadstateClothes01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteClothes = true;

            CharacterDetails.ClothBackALeft_X.value = ClothBackALeft_X_Sav01;
            CharacterDetails.ClothBackALeft_Y.value = ClothBackALeft_Y_Sav01;
            CharacterDetails.ClothBackALeft_Z.value = ClothBackALeft_Z_Sav01;
            CharacterDetails.ClothBackALeft_W.value = ClothBackALeft_W_Sav01;
            CharacterDetails.ClothBackARight_X.value = ClothBackARight_X_Sav01;
            CharacterDetails.ClothBackARight_Y.value = ClothBackARight_Y_Sav01;
            CharacterDetails.ClothBackARight_Z.value = ClothBackARight_Z_Sav01;
            CharacterDetails.ClothBackARight_W.value = ClothBackARight_W_Sav01;
            CharacterDetails.ClothFrontALeft_X.value = ClothFrontALeft_X_Sav01;
            CharacterDetails.ClothFrontALeft_Y.value = ClothFrontALeft_Y_Sav01;
            CharacterDetails.ClothFrontALeft_Z.value = ClothFrontALeft_Z_Sav01;
            CharacterDetails.ClothFrontALeft_W.value = ClothFrontALeft_W_Sav01;
            CharacterDetails.ClothFrontARight_X.value = ClothFrontARight_X_Sav01;
            CharacterDetails.ClothFrontARight_Y.value = ClothFrontARight_Y_Sav01;
            CharacterDetails.ClothFrontARight_Z.value = ClothFrontARight_Z_Sav01;
            CharacterDetails.ClothFrontARight_W.value = ClothFrontARight_W_Sav01;
            CharacterDetails.ClothSideALeft_X.value = ClothSideALeft_X_Sav01;
            CharacterDetails.ClothSideALeft_Y.value = ClothSideALeft_Y_Sav01;
            CharacterDetails.ClothSideALeft_Z.value = ClothSideALeft_Z_Sav01;
            CharacterDetails.ClothSideALeft_W.value = ClothSideALeft_W_Sav01;
            CharacterDetails.ClothSideARight_X.value = ClothSideARight_X_Sav01;
            CharacterDetails.ClothSideARight_Y.value = ClothSideARight_Y_Sav01;
            CharacterDetails.ClothSideARight_Z.value = ClothSideARight_Z_Sav01;
            CharacterDetails.ClothSideARight_W.value = ClothSideARight_W_Sav01;
            CharacterDetails.ClothBackBLeft_X.value = ClothBackBLeft_X_Sav01;
            CharacterDetails.ClothBackBLeft_Y.value = ClothBackBLeft_Y_Sav01;
            CharacterDetails.ClothBackBLeft_Z.value = ClothBackBLeft_Z_Sav01;
            CharacterDetails.ClothBackBLeft_W.value = ClothBackBLeft_W_Sav01;
            CharacterDetails.ClothBackBRight_X.value = ClothBackBRight_X_Sav01;
            CharacterDetails.ClothBackBRight_Y.value = ClothBackBRight_Y_Sav01;
            CharacterDetails.ClothBackBRight_Z.value = ClothBackBRight_Z_Sav01;
            CharacterDetails.ClothBackBRight_W.value = ClothBackBRight_W_Sav01;
            CharacterDetails.ClothFrontBLeft_X.value = ClothFrontBLeft_X_Sav01;
            CharacterDetails.ClothFrontBLeft_Y.value = ClothFrontBLeft_Y_Sav01;
            CharacterDetails.ClothFrontBLeft_Z.value = ClothFrontBLeft_Z_Sav01;
            CharacterDetails.ClothFrontBLeft_W.value = ClothFrontBLeft_W_Sav01;
            CharacterDetails.ClothFrontBRight_X.value = ClothFrontBRight_X_Sav01;
            CharacterDetails.ClothFrontBRight_Y.value = ClothFrontBRight_Y_Sav01;
            CharacterDetails.ClothFrontBRight_Z.value = ClothFrontBRight_Z_Sav01;
            CharacterDetails.ClothFrontBRight_W.value = ClothFrontBRight_W_Sav01;
            CharacterDetails.ClothSideBLeft_X.value = ClothSideBLeft_X_Sav01;
            CharacterDetails.ClothSideBLeft_Y.value = ClothSideBLeft_Y_Sav01;
            CharacterDetails.ClothSideBLeft_Z.value = ClothSideBLeft_Z_Sav01;
            CharacterDetails.ClothSideBLeft_W.value = ClothSideBLeft_W_Sav01;
            CharacterDetails.ClothSideBRight_X.value = ClothSideBRight_X_Sav01;
            CharacterDetails.ClothSideBRight_Y.value = ClothSideBRight_Y_Sav01;
            CharacterDetails.ClothSideBRight_Z.value = ClothSideBRight_Z_Sav01;
            CharacterDetails.ClothSideBRight_W.value = ClothSideBRight_W_Sav01;
            CharacterDetails.ClothBackCLeft_X.value = ClothBackCLeft_X_Sav01;
            CharacterDetails.ClothBackCLeft_Y.value = ClothBackCLeft_Y_Sav01;
            CharacterDetails.ClothBackCLeft_Z.value = ClothBackCLeft_Z_Sav01;
            CharacterDetails.ClothBackCLeft_W.value = ClothBackCLeft_W_Sav01;
            CharacterDetails.ClothBackCRight_X.value = ClothBackCRight_X_Sav01;
            CharacterDetails.ClothBackCRight_Y.value = ClothBackCRight_Y_Sav01;
            CharacterDetails.ClothBackCRight_Z.value = ClothBackCRight_Z_Sav01;
            CharacterDetails.ClothBackCRight_W.value = ClothBackCRight_W_Sav01;
            CharacterDetails.ClothFrontCLeft_X.value = ClothFrontCLeft_X_Sav01;
            CharacterDetails.ClothFrontCLeft_Y.value = ClothFrontCLeft_Y_Sav01;
            CharacterDetails.ClothFrontCLeft_Z.value = ClothFrontCLeft_Z_Sav01;
            CharacterDetails.ClothFrontCLeft_W.value = ClothFrontCLeft_W_Sav01;
            CharacterDetails.ClothFrontCRight_X.value = ClothFrontCRight_X_Sav01;
            CharacterDetails.ClothFrontCRight_Y.value = ClothFrontCRight_Y_Sav01;
            CharacterDetails.ClothFrontCRight_Z.value = ClothFrontCRight_Z_Sav01;
            CharacterDetails.ClothFrontCRight_W.value = ClothFrontCRight_W_Sav01;
            CharacterDetails.ClothSideCLeft_X.value = ClothSideCLeft_X_Sav01;
            CharacterDetails.ClothSideCLeft_Y.value = ClothSideCLeft_Y_Sav01;
            CharacterDetails.ClothSideCLeft_Z.value = ClothSideCLeft_Z_Sav01;
            CharacterDetails.ClothSideCLeft_W.value = ClothSideCLeft_W_Sav01;
            CharacterDetails.ClothSideCRight_X.value = ClothSideCRight_X_Sav01;
            CharacterDetails.ClothSideCRight_Y.value = ClothSideCRight_Y_Sav01;
            CharacterDetails.ClothSideCRight_Z.value = ClothSideCRight_Z_Sav01;
            CharacterDetails.ClothSideCRight_W.value = ClothSideCRight_W_Sav01;
        }
        private void LoadstateClothes02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteClothes = true;

            CharacterDetails.ClothBackALeft_X.value = ClothBackALeft_X_Sav02;
            CharacterDetails.ClothBackALeft_Y.value = ClothBackALeft_Y_Sav02;
            CharacterDetails.ClothBackALeft_Z.value = ClothBackALeft_Z_Sav02;
            CharacterDetails.ClothBackALeft_W.value = ClothBackALeft_W_Sav02;
            CharacterDetails.ClothBackARight_X.value = ClothBackARight_X_Sav02;
            CharacterDetails.ClothBackARight_Y.value = ClothBackARight_Y_Sav02;
            CharacterDetails.ClothBackARight_Z.value = ClothBackARight_Z_Sav02;
            CharacterDetails.ClothBackARight_W.value = ClothBackARight_W_Sav02;
            CharacterDetails.ClothFrontALeft_X.value = ClothFrontALeft_X_Sav02;
            CharacterDetails.ClothFrontALeft_Y.value = ClothFrontALeft_Y_Sav02;
            CharacterDetails.ClothFrontALeft_Z.value = ClothFrontALeft_Z_Sav02;
            CharacterDetails.ClothFrontALeft_W.value = ClothFrontALeft_W_Sav02;
            CharacterDetails.ClothFrontARight_X.value = ClothFrontARight_X_Sav02;
            CharacterDetails.ClothFrontARight_Y.value = ClothFrontARight_Y_Sav02;
            CharacterDetails.ClothFrontARight_Z.value = ClothFrontARight_Z_Sav02;
            CharacterDetails.ClothFrontARight_W.value = ClothFrontARight_W_Sav02;
            CharacterDetails.ClothSideALeft_X.value = ClothSideALeft_X_Sav02;
            CharacterDetails.ClothSideALeft_Y.value = ClothSideALeft_Y_Sav02;
            CharacterDetails.ClothSideALeft_Z.value = ClothSideALeft_Z_Sav02;
            CharacterDetails.ClothSideALeft_W.value = ClothSideALeft_W_Sav02;
            CharacterDetails.ClothSideARight_X.value = ClothSideARight_X_Sav02;
            CharacterDetails.ClothSideARight_Y.value = ClothSideARight_Y_Sav02;
            CharacterDetails.ClothSideARight_Z.value = ClothSideARight_Z_Sav02;
            CharacterDetails.ClothSideARight_W.value = ClothSideARight_W_Sav02;
            CharacterDetails.ClothBackBLeft_X.value = ClothBackBLeft_X_Sav02;
            CharacterDetails.ClothBackBLeft_Y.value = ClothBackBLeft_Y_Sav02;
            CharacterDetails.ClothBackBLeft_Z.value = ClothBackBLeft_Z_Sav02;
            CharacterDetails.ClothBackBLeft_W.value = ClothBackBLeft_W_Sav02;
            CharacterDetails.ClothBackBRight_X.value = ClothBackBRight_X_Sav02;
            CharacterDetails.ClothBackBRight_Y.value = ClothBackBRight_Y_Sav02;
            CharacterDetails.ClothBackBRight_Z.value = ClothBackBRight_Z_Sav02;
            CharacterDetails.ClothBackBRight_W.value = ClothBackBRight_W_Sav02;
            CharacterDetails.ClothFrontBLeft_X.value = ClothFrontBLeft_X_Sav02;
            CharacterDetails.ClothFrontBLeft_Y.value = ClothFrontBLeft_Y_Sav02;
            CharacterDetails.ClothFrontBLeft_Z.value = ClothFrontBLeft_Z_Sav02;
            CharacterDetails.ClothFrontBLeft_W.value = ClothFrontBLeft_W_Sav02;
            CharacterDetails.ClothFrontBRight_X.value = ClothFrontBRight_X_Sav02;
            CharacterDetails.ClothFrontBRight_Y.value = ClothFrontBRight_Y_Sav02;
            CharacterDetails.ClothFrontBRight_Z.value = ClothFrontBRight_Z_Sav02;
            CharacterDetails.ClothFrontBRight_W.value = ClothFrontBRight_W_Sav02;
            CharacterDetails.ClothSideBLeft_X.value = ClothSideBLeft_X_Sav02;
            CharacterDetails.ClothSideBLeft_Y.value = ClothSideBLeft_Y_Sav02;
            CharacterDetails.ClothSideBLeft_Z.value = ClothSideBLeft_Z_Sav02;
            CharacterDetails.ClothSideBLeft_W.value = ClothSideBLeft_W_Sav02;
            CharacterDetails.ClothSideBRight_X.value = ClothSideBRight_X_Sav02;
            CharacterDetails.ClothSideBRight_Y.value = ClothSideBRight_Y_Sav02;
            CharacterDetails.ClothSideBRight_Z.value = ClothSideBRight_Z_Sav02;
            CharacterDetails.ClothSideBRight_W.value = ClothSideBRight_W_Sav02;
            CharacterDetails.ClothBackCLeft_X.value = ClothBackCLeft_X_Sav02;
            CharacterDetails.ClothBackCLeft_Y.value = ClothBackCLeft_Y_Sav02;
            CharacterDetails.ClothBackCLeft_Z.value = ClothBackCLeft_Z_Sav02;
            CharacterDetails.ClothBackCLeft_W.value = ClothBackCLeft_W_Sav02;
            CharacterDetails.ClothBackCRight_X.value = ClothBackCRight_X_Sav02;
            CharacterDetails.ClothBackCRight_Y.value = ClothBackCRight_Y_Sav02;
            CharacterDetails.ClothBackCRight_Z.value = ClothBackCRight_Z_Sav02;
            CharacterDetails.ClothBackCRight_W.value = ClothBackCRight_W_Sav02;
            CharacterDetails.ClothFrontCLeft_X.value = ClothFrontCLeft_X_Sav02;
            CharacterDetails.ClothFrontCLeft_Y.value = ClothFrontCLeft_Y_Sav02;
            CharacterDetails.ClothFrontCLeft_Z.value = ClothFrontCLeft_Z_Sav02;
            CharacterDetails.ClothFrontCLeft_W.value = ClothFrontCLeft_W_Sav02;
            CharacterDetails.ClothFrontCRight_X.value = ClothFrontCRight_X_Sav02;
            CharacterDetails.ClothFrontCRight_Y.value = ClothFrontCRight_Y_Sav02;
            CharacterDetails.ClothFrontCRight_Z.value = ClothFrontCRight_Z_Sav02;
            CharacterDetails.ClothFrontCRight_W.value = ClothFrontCRight_W_Sav02;
            CharacterDetails.ClothSideCLeft_X.value = ClothSideCLeft_X_Sav02;
            CharacterDetails.ClothSideCLeft_Y.value = ClothSideCLeft_Y_Sav02;
            CharacterDetails.ClothSideCLeft_Z.value = ClothSideCLeft_Z_Sav02;
            CharacterDetails.ClothSideCLeft_W.value = ClothSideCLeft_W_Sav02;
            CharacterDetails.ClothSideCRight_X.value = ClothSideCRight_X_Sav02;
            CharacterDetails.ClothSideCRight_Y.value = ClothSideCRight_Y_Sav02;
            CharacterDetails.ClothSideCRight_Z.value = ClothSideCRight_Z_Sav02;
            CharacterDetails.ClothSideCRight_W.value = ClothSideCRight_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate Weapons
        private void SavestateWeapons01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveWeapons01 = true;
            WeaponsSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateWeapons01.IsEnabled = true;
        }
        private void SavestateWeapons02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveWeapons02 = true;
            WeaponsSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateWeapons02.IsEnabled = true;
        }
        private void LoadstateWeapons01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteWeapons = true;

            CharacterDetails.WeaponLeft_X.value = WeaponLeft_X_Sav01;
            CharacterDetails.WeaponLeft_Y.value = WeaponLeft_Y_Sav01;
            CharacterDetails.WeaponLeft_Z.value = WeaponLeft_Z_Sav01;
            CharacterDetails.WeaponLeft_W.value = WeaponLeft_W_Sav01;
            CharacterDetails.WeaponRight_X.value = WeaponRight_X_Sav01;
            CharacterDetails.WeaponRight_Y.value = WeaponRight_Y_Sav01;
            CharacterDetails.WeaponRight_Z.value = WeaponRight_Z_Sav01;
            CharacterDetails.WeaponRight_W.value = WeaponRight_W_Sav01;
        }
        private void LoadstateWeapons02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteWeapons = true;

            CharacterDetails.WeaponLeft_X.value = WeaponLeft_X_Sav02;
            CharacterDetails.WeaponLeft_Y.value = WeaponLeft_Y_Sav02;
            CharacterDetails.WeaponLeft_Z.value = WeaponLeft_Z_Sav02;
            CharacterDetails.WeaponLeft_W.value = WeaponLeft_W_Sav02;
            CharacterDetails.WeaponRight_X.value = WeaponRight_X_Sav02;
            CharacterDetails.WeaponRight_Y.value = WeaponRight_Y_Sav02;
            CharacterDetails.WeaponRight_Z.value = WeaponRight_Z_Sav02;
            CharacterDetails.WeaponRight_W.value = WeaponRight_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate LeftHand
        private void SavestateLeftHand01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveLeftHand01 = true;
            LeftHandSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateLeftHand01.IsEnabled = true;
        }
        private void SavestateLeftHand02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveLeftHand02 = true;
            LeftHandSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateLeftHand02.IsEnabled = true;
        }
        private void LoadstateLeftHand01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteLeftHand = true;

            CharacterDetails.HandLeft_X.value = HandLeft_X_Sav01;
            CharacterDetails.HandLeft_Y.value = HandLeft_Y_Sav01;
            CharacterDetails.HandLeft_Z.value = HandLeft_Z_Sav01;
            CharacterDetails.HandLeft_W.value = HandLeft_W_Sav01;
            CharacterDetails.IndexALeft_X.value = IndexALeft_X_Sav01;
            CharacterDetails.IndexALeft_Y.value = IndexALeft_Y_Sav01;
            CharacterDetails.IndexALeft_Z.value = IndexALeft_Z_Sav01;
            CharacterDetails.IndexALeft_W.value = IndexALeft_W_Sav01;
            CharacterDetails.PinkyALeft_X.value = PinkyALeft_X_Sav01;
            CharacterDetails.PinkyALeft_Y.value = PinkyALeft_Y_Sav01;
            CharacterDetails.PinkyALeft_Z.value = PinkyALeft_Z_Sav01;
            CharacterDetails.PinkyALeft_W.value = PinkyALeft_W_Sav01;
            CharacterDetails.RingALeft_X.value = RingALeft_X_Sav01;
            CharacterDetails.RingALeft_Y.value = RingALeft_Y_Sav01;
            CharacterDetails.RingALeft_Z.value = RingALeft_Z_Sav01;
            CharacterDetails.RingALeft_W.value = RingALeft_W_Sav01;
            CharacterDetails.MiddleALeft_X.value = MiddleALeft_X_Sav01;
            CharacterDetails.MiddleALeft_Y.value = MiddleALeft_Y_Sav01;
            CharacterDetails.MiddleALeft_Z.value = MiddleALeft_Z_Sav01;
            CharacterDetails.MiddleALeft_W.value = MiddleALeft_W_Sav01;
            CharacterDetails.ThumbALeft_X.value = ThumbALeft_X_Sav01;
            CharacterDetails.ThumbALeft_Y.value = ThumbALeft_Y_Sav01;
            CharacterDetails.ThumbALeft_Z.value = ThumbALeft_Z_Sav01;
            CharacterDetails.ThumbALeft_W.value = ThumbALeft_W_Sav01;
            CharacterDetails.IndexBLeft_X.value = IndexBLeft_X_Sav01;
            CharacterDetails.IndexBLeft_Y.value = IndexBLeft_Y_Sav01;
            CharacterDetails.IndexBLeft_Z.value = IndexBLeft_Z_Sav01;
            CharacterDetails.IndexBLeft_W.value = IndexBLeft_W_Sav01;
            CharacterDetails.PinkyBLeft_X.value = PinkyBLeft_X_Sav01;
            CharacterDetails.PinkyBLeft_Y.value = PinkyBLeft_Y_Sav01;
            CharacterDetails.PinkyBLeft_Z.value = PinkyBLeft_Z_Sav01;
            CharacterDetails.PinkyBLeft_W.value = PinkyBLeft_W_Sav01;
            CharacterDetails.RingBLeft_X.value = RingBLeft_X_Sav01;
            CharacterDetails.RingBLeft_Y.value = RingBLeft_Y_Sav01;
            CharacterDetails.RingBLeft_Z.value = RingBLeft_Z_Sav01;
            CharacterDetails.RingBLeft_W.value = RingBLeft_W_Sav01;
            CharacterDetails.MiddleBLeft_X.value = MiddleBLeft_X_Sav01;
            CharacterDetails.MiddleBLeft_Y.value = MiddleBLeft_Y_Sav01;
            CharacterDetails.MiddleBLeft_Z.value = MiddleBLeft_Z_Sav01;
            CharacterDetails.MiddleBLeft_W.value = MiddleBLeft_W_Sav01;
            CharacterDetails.ThumbBLeft_X.value = ThumbBLeft_X_Sav01;
            CharacterDetails.ThumbBLeft_Y.value = ThumbBLeft_Y_Sav01;
            CharacterDetails.ThumbBLeft_Z.value = ThumbBLeft_Z_Sav01;
            CharacterDetails.ThumbBLeft_W.value = ThumbBLeft_W_Sav01;
        }
        private void LoadstateLeftHand02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteLeftHand = true;

            CharacterDetails.HandLeft_X.value = HandLeft_X_Sav02;
            CharacterDetails.HandLeft_Y.value = HandLeft_Y_Sav02;
            CharacterDetails.HandLeft_Z.value = HandLeft_Z_Sav02;
            CharacterDetails.HandLeft_W.value = HandLeft_W_Sav02;
            CharacterDetails.IndexALeft_X.value = IndexALeft_X_Sav02;
            CharacterDetails.IndexALeft_Y.value = IndexALeft_Y_Sav02;
            CharacterDetails.IndexALeft_Z.value = IndexALeft_Z_Sav02;
            CharacterDetails.IndexALeft_W.value = IndexALeft_W_Sav02;
            CharacterDetails.PinkyALeft_X.value = PinkyALeft_X_Sav02;
            CharacterDetails.PinkyALeft_Y.value = PinkyALeft_Y_Sav02;
            CharacterDetails.PinkyALeft_Z.value = PinkyALeft_Z_Sav02;
            CharacterDetails.PinkyALeft_W.value = PinkyALeft_W_Sav02;
            CharacterDetails.RingALeft_X.value = RingALeft_X_Sav02;
            CharacterDetails.RingALeft_Y.value = RingALeft_Y_Sav02;
            CharacterDetails.RingALeft_Z.value = RingALeft_Z_Sav02;
            CharacterDetails.RingALeft_W.value = RingALeft_W_Sav02;
            CharacterDetails.MiddleALeft_X.value = MiddleALeft_X_Sav02;
            CharacterDetails.MiddleALeft_Y.value = MiddleALeft_Y_Sav02;
            CharacterDetails.MiddleALeft_Z.value = MiddleALeft_Z_Sav02;
            CharacterDetails.MiddleALeft_W.value = MiddleALeft_W_Sav02;
            CharacterDetails.ThumbALeft_X.value = ThumbALeft_X_Sav02;
            CharacterDetails.ThumbALeft_Y.value = ThumbALeft_Y_Sav02;
            CharacterDetails.ThumbALeft_Z.value = ThumbALeft_Z_Sav02;
            CharacterDetails.ThumbALeft_W.value = ThumbALeft_W_Sav02;
            CharacterDetails.IndexBLeft_X.value = IndexBLeft_X_Sav02;
            CharacterDetails.IndexBLeft_Y.value = IndexBLeft_Y_Sav02;
            CharacterDetails.IndexBLeft_Z.value = IndexBLeft_Z_Sav02;
            CharacterDetails.IndexBLeft_W.value = IndexBLeft_W_Sav02;
            CharacterDetails.PinkyBLeft_X.value = PinkyBLeft_X_Sav02;
            CharacterDetails.PinkyBLeft_Y.value = PinkyBLeft_Y_Sav02;
            CharacterDetails.PinkyBLeft_Z.value = PinkyBLeft_Z_Sav02;
            CharacterDetails.PinkyBLeft_W.value = PinkyBLeft_W_Sav02;
            CharacterDetails.RingBLeft_X.value = RingBLeft_X_Sav02;
            CharacterDetails.RingBLeft_Y.value = RingBLeft_Y_Sav02;
            CharacterDetails.RingBLeft_Z.value = RingBLeft_Z_Sav02;
            CharacterDetails.RingBLeft_W.value = RingBLeft_W_Sav02;
            CharacterDetails.MiddleBLeft_X.value = MiddleBLeft_X_Sav02;
            CharacterDetails.MiddleBLeft_Y.value = MiddleBLeft_Y_Sav02;
            CharacterDetails.MiddleBLeft_Z.value = MiddleBLeft_Z_Sav02;
            CharacterDetails.MiddleBLeft_W.value = MiddleBLeft_W_Sav02;
            CharacterDetails.ThumbBLeft_X.value = ThumbBLeft_X_Sav02;
            CharacterDetails.ThumbBLeft_Y.value = ThumbBLeft_Y_Sav02;
            CharacterDetails.ThumbBLeft_Z.value = ThumbBLeft_Z_Sav02;
            CharacterDetails.ThumbBLeft_W.value = ThumbBLeft_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate RightHand
        private void SavestateRightHand01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveRightHand01 = true;
            RightHandSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateRightHand01.IsEnabled = true;
        }
        private void SavestateRightHand02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveRightHand02 = true;
            RightHandSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateRightHand02.IsEnabled = true;
        }
        private void LoadstateRightHand01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteRightHand = true;

            CharacterDetails.HandRight_X.value = HandRight_X_Sav01;
            CharacterDetails.HandRight_Y.value = HandRight_Y_Sav01;
            CharacterDetails.HandRight_Z.value = HandRight_Z_Sav01;
            CharacterDetails.HandRight_W.value = HandRight_W_Sav01;
            CharacterDetails.IndexARight_X.value = IndexARight_X_Sav01;
            CharacterDetails.IndexARight_Y.value = IndexARight_Y_Sav01;
            CharacterDetails.IndexARight_Z.value = IndexARight_Z_Sav01;
            CharacterDetails.IndexARight_W.value = IndexARight_W_Sav01;
            CharacterDetails.PinkyARight_X.value = PinkyARight_X_Sav01;
            CharacterDetails.PinkyARight_Y.value = PinkyARight_Y_Sav01;
            CharacterDetails.PinkyARight_Z.value = PinkyARight_Z_Sav01;
            CharacterDetails.PinkyARight_W.value = PinkyARight_W_Sav01;
            CharacterDetails.RingARight_X.value = RingARight_X_Sav01;
            CharacterDetails.RingARight_Y.value = RingARight_Y_Sav01;
            CharacterDetails.RingARight_Z.value = RingARight_Z_Sav01;
            CharacterDetails.RingARight_W.value = RingARight_W_Sav01;
            CharacterDetails.MiddleARight_X.value = MiddleARight_X_Sav01;
            CharacterDetails.MiddleARight_Y.value = MiddleARight_Y_Sav01;
            CharacterDetails.MiddleARight_Z.value = MiddleARight_Z_Sav01;
            CharacterDetails.MiddleARight_W.value = MiddleARight_W_Sav01;
            CharacterDetails.ThumbARight_X.value = ThumbARight_X_Sav01;
            CharacterDetails.ThumbARight_Y.value = ThumbARight_Y_Sav01;
            CharacterDetails.ThumbARight_Z.value = ThumbARight_Z_Sav01;
            CharacterDetails.ThumbARight_W.value = ThumbARight_W_Sav01;
            CharacterDetails.IndexBRight_X.value = IndexBRight_X_Sav01;
            CharacterDetails.IndexBRight_Y.value = IndexBRight_Y_Sav01;
            CharacterDetails.IndexBRight_Z.value = IndexBRight_Z_Sav01;
            CharacterDetails.IndexBRight_W.value = IndexBRight_W_Sav01;
            CharacterDetails.PinkyBRight_X.value = PinkyBRight_X_Sav01;
            CharacterDetails.PinkyBRight_Y.value = PinkyBRight_Y_Sav01;
            CharacterDetails.PinkyBRight_Z.value = PinkyBRight_Z_Sav01;
            CharacterDetails.PinkyBRight_W.value = PinkyBRight_W_Sav01;
            CharacterDetails.RingBRight_X.value = RingBRight_X_Sav01;
            CharacterDetails.RingBRight_Y.value = RingBRight_Y_Sav01;
            CharacterDetails.RingBRight_Z.value = RingBRight_Z_Sav01;
            CharacterDetails.RingBRight_W.value = RingBRight_W_Sav01;
            CharacterDetails.MiddleBRight_X.value = MiddleBRight_X_Sav01;
            CharacterDetails.MiddleBRight_Y.value = MiddleBRight_Y_Sav01;
            CharacterDetails.MiddleBRight_Z.value = MiddleBRight_Z_Sav01;
            CharacterDetails.MiddleBRight_W.value = MiddleBRight_W_Sav01;
            CharacterDetails.ThumbBRight_X.value = ThumbBRight_X_Sav01;
            CharacterDetails.ThumbBRight_Y.value = ThumbBRight_Y_Sav01;
            CharacterDetails.ThumbBRight_Z.value = ThumbBRight_Z_Sav01;
            CharacterDetails.ThumbBRight_W.value = ThumbBRight_W_Sav01;
        }
        private void LoadstateRightHand02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteRightHand = true;

            CharacterDetails.HandRight_X.value = HandRight_X_Sav02;
            CharacterDetails.HandRight_Y.value = HandRight_Y_Sav02;
            CharacterDetails.HandRight_Z.value = HandRight_Z_Sav02;
            CharacterDetails.HandRight_W.value = HandRight_W_Sav02;
            CharacterDetails.IndexARight_X.value = IndexARight_X_Sav02;
            CharacterDetails.IndexARight_Y.value = IndexARight_Y_Sav02;
            CharacterDetails.IndexARight_Z.value = IndexARight_Z_Sav02;
            CharacterDetails.IndexARight_W.value = IndexARight_W_Sav02;
            CharacterDetails.PinkyARight_X.value = PinkyARight_X_Sav02;
            CharacterDetails.PinkyARight_Y.value = PinkyARight_Y_Sav02;
            CharacterDetails.PinkyARight_Z.value = PinkyARight_Z_Sav02;
            CharacterDetails.PinkyARight_W.value = PinkyARight_W_Sav02;
            CharacterDetails.RingARight_X.value = RingARight_X_Sav02;
            CharacterDetails.RingARight_Y.value = RingARight_Y_Sav02;
            CharacterDetails.RingARight_Z.value = RingARight_Z_Sav02;
            CharacterDetails.RingARight_W.value = RingARight_W_Sav02;
            CharacterDetails.MiddleARight_X.value = MiddleARight_X_Sav02;
            CharacterDetails.MiddleARight_Y.value = MiddleARight_Y_Sav02;
            CharacterDetails.MiddleARight_Z.value = MiddleARight_Z_Sav02;
            CharacterDetails.MiddleARight_W.value = MiddleARight_W_Sav02;
            CharacterDetails.ThumbARight_X.value = ThumbARight_X_Sav02;
            CharacterDetails.ThumbARight_Y.value = ThumbARight_Y_Sav02;
            CharacterDetails.ThumbARight_Z.value = ThumbARight_Z_Sav02;
            CharacterDetails.ThumbARight_W.value = ThumbARight_W_Sav02;
            CharacterDetails.IndexBRight_X.value = IndexBRight_X_Sav02;
            CharacterDetails.IndexBRight_Y.value = IndexBRight_Y_Sav02;
            CharacterDetails.IndexBRight_Z.value = IndexBRight_Z_Sav02;
            CharacterDetails.IndexBRight_W.value = IndexBRight_W_Sav02;
            CharacterDetails.PinkyBRight_X.value = PinkyBRight_X_Sav02;
            CharacterDetails.PinkyBRight_Y.value = PinkyBRight_Y_Sav02;
            CharacterDetails.PinkyBRight_Z.value = PinkyBRight_Z_Sav02;
            CharacterDetails.PinkyBRight_W.value = PinkyBRight_W_Sav02;
            CharacterDetails.RingBRight_X.value = RingBRight_X_Sav02;
            CharacterDetails.RingBRight_Y.value = RingBRight_Y_Sav02;
            CharacterDetails.RingBRight_Z.value = RingBRight_Z_Sav02;
            CharacterDetails.RingBRight_W.value = RingBRight_W_Sav02;
            CharacterDetails.MiddleBRight_X.value = MiddleBRight_X_Sav02;
            CharacterDetails.MiddleBRight_Y.value = MiddleBRight_Y_Sav02;
            CharacterDetails.MiddleBRight_Z.value = MiddleBRight_Z_Sav02;
            CharacterDetails.MiddleBRight_W.value = MiddleBRight_W_Sav02;
            CharacterDetails.ThumbBRight_X.value = ThumbBRight_X_Sav02;
            CharacterDetails.ThumbBRight_Y.value = ThumbBRight_Y_Sav02;
            CharacterDetails.ThumbBRight_Z.value = ThumbBRight_Z_Sav02;
            CharacterDetails.ThumbBRight_W.value = ThumbBRight_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate Waist
        private void SavestateWaist01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveWaist01 = true;
            WaistSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateWaist01.IsEnabled = true;
        }
        private void SavestateWaist02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveWaist02 = true;
            WaistSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateWaist02.IsEnabled = true;
        }
        private void LoadstateWaist01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteWaist = true;

            CharacterDetails.Waist_X.value = Waist_X_Sav01;
            CharacterDetails.Waist_Y.value = Waist_Y_Sav01;
            CharacterDetails.Waist_Z.value = Waist_Z_Sav01;
            CharacterDetails.Waist_W.value = Waist_W_Sav01;
            CharacterDetails.HolsterLeft_X.value = HolsterLeft_X_Sav01;
            CharacterDetails.HolsterLeft_Y.value = HolsterLeft_Y_Sav01;
            CharacterDetails.HolsterLeft_Z.value = HolsterLeft_Z_Sav01;
            CharacterDetails.HolsterLeft_W.value = HolsterLeft_W_Sav01;
            CharacterDetails.HolsterRight_X.value = HolsterRight_X_Sav01;
            CharacterDetails.HolsterRight_Y.value = HolsterRight_Y_Sav01;
            CharacterDetails.HolsterRight_Z.value = HolsterRight_Z_Sav01;
            CharacterDetails.HolsterRight_W.value = HolsterRight_W_Sav01;
            CharacterDetails.SheatheLeft_X.value = SheatheLeft_X_Sav01;
            CharacterDetails.SheatheLeft_Y.value = SheatheLeft_Y_Sav01;
            CharacterDetails.SheatheLeft_Z.value = SheatheLeft_Z_Sav01;
            CharacterDetails.SheatheLeft_W.value = SheatheLeft_W_Sav01;
            CharacterDetails.SheatheRight_X.value = SheatheRight_X_Sav01;
            CharacterDetails.SheatheRight_Y.value = SheatheRight_Y_Sav01;
            CharacterDetails.SheatheRight_Z.value = SheatheRight_Z_Sav01;
            CharacterDetails.SheatheRight_W.value = SheatheRight_W_Sav01;
            CharacterDetails.TailA_X.value = TailA_X_Sav01;
            CharacterDetails.TailA_Y.value = TailA_Y_Sav01;
            CharacterDetails.TailA_Z.value = TailA_Z_Sav01;
            CharacterDetails.TailA_W.value = TailA_W_Sav01;
            CharacterDetails.TailB_X.value = TailB_X_Sav01;
            CharacterDetails.TailB_Y.value = TailB_Y_Sav01;
            CharacterDetails.TailB_Z.value = TailB_Z_Sav01;
            CharacterDetails.TailB_W.value = TailB_W_Sav01;
            CharacterDetails.TailC_X.value = TailC_X_Sav01;
            CharacterDetails.TailC_Y.value = TailC_Y_Sav01;
            CharacterDetails.TailC_Z.value = TailC_Z_Sav01;
            CharacterDetails.TailC_W.value = TailC_W_Sav01;
            CharacterDetails.TailD_X.value = TailD_X_Sav01;
            CharacterDetails.TailD_Y.value = TailD_Y_Sav01;
            CharacterDetails.TailD_Z.value = TailD_Z_Sav01;
            CharacterDetails.TailD_W.value = TailD_W_Sav01;
            CharacterDetails.TailE_X.value = TailE_X_Sav01;
            CharacterDetails.TailE_Y.value = TailE_Y_Sav01;
            CharacterDetails.TailE_Z.value = TailE_Z_Sav01;
            CharacterDetails.TailE_W.value = TailE_W_Sav01;
        }
        private void LoadstateWaist02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteWaist = true;

            CharacterDetails.Waist_X.value = Waist_X_Sav02;
            CharacterDetails.Waist_Y.value = Waist_Y_Sav02;
            CharacterDetails.Waist_Z.value = Waist_Z_Sav02;
            CharacterDetails.Waist_W.value = Waist_W_Sav02;
            CharacterDetails.HolsterLeft_X.value = HolsterLeft_X_Sav02;
            CharacterDetails.HolsterLeft_Y.value = HolsterLeft_Y_Sav02;
            CharacterDetails.HolsterLeft_Z.value = HolsterLeft_Z_Sav02;
            CharacterDetails.HolsterLeft_W.value = HolsterLeft_W_Sav02;
            CharacterDetails.HolsterRight_X.value = HolsterRight_X_Sav02;
            CharacterDetails.HolsterRight_Y.value = HolsterRight_Y_Sav02;
            CharacterDetails.HolsterRight_Z.value = HolsterRight_Z_Sav02;
            CharacterDetails.HolsterRight_W.value = HolsterRight_W_Sav02;
            CharacterDetails.SheatheLeft_X.value = SheatheLeft_X_Sav02;
            CharacterDetails.SheatheLeft_Y.value = SheatheLeft_Y_Sav02;
            CharacterDetails.SheatheLeft_Z.value = SheatheLeft_Z_Sav02;
            CharacterDetails.SheatheLeft_W.value = SheatheLeft_W_Sav02;
            CharacterDetails.SheatheRight_X.value = SheatheRight_X_Sav02;
            CharacterDetails.SheatheRight_Y.value = SheatheRight_Y_Sav02;
            CharacterDetails.SheatheRight_Z.value = SheatheRight_Z_Sav02;
            CharacterDetails.SheatheRight_W.value = SheatheRight_W_Sav02;
            CharacterDetails.TailA_X.value = TailA_X_Sav02;
            CharacterDetails.TailA_Y.value = TailA_Y_Sav02;
            CharacterDetails.TailA_Z.value = TailA_Z_Sav02;
            CharacterDetails.TailA_W.value = TailA_W_Sav02;
            CharacterDetails.TailB_X.value = TailB_X_Sav02;
            CharacterDetails.TailB_Y.value = TailB_Y_Sav02;
            CharacterDetails.TailB_Z.value = TailB_Z_Sav02;
            CharacterDetails.TailB_W.value = TailB_W_Sav02;
            CharacterDetails.TailC_X.value = TailC_X_Sav02;
            CharacterDetails.TailC_Y.value = TailC_Y_Sav02;
            CharacterDetails.TailC_Z.value = TailC_Z_Sav02;
            CharacterDetails.TailC_W.value = TailC_W_Sav02;
            CharacterDetails.TailD_X.value = TailD_X_Sav02;
            CharacterDetails.TailD_Y.value = TailD_Y_Sav02;
            CharacterDetails.TailD_Z.value = TailD_Z_Sav02;
            CharacterDetails.TailD_W.value = TailD_W_Sav02;
            CharacterDetails.TailE_X.value = TailE_X_Sav02;
            CharacterDetails.TailE_Y.value = TailE_Y_Sav02;
            CharacterDetails.TailE_Z.value = TailE_Z_Sav02;
            CharacterDetails.TailE_W.value = TailE_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate LeftLeg
        private void SavestateLeftLeg01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveLeftLeg01 = true;
            LeftLegSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateLeftLeg01.IsEnabled = true;
        }
        private void SavestateLeftLeg02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveLeftLeg02 = true;
            LeftLegSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateLeftLeg02.IsEnabled = true;
        }
        private void LoadstateLeftLeg01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteLeftLeg = true;

            CharacterDetails.LegLeft_X.value = LegLeft_X_Sav01;
            CharacterDetails.LegLeft_Y.value = LegLeft_Y_Sav01;
            CharacterDetails.LegLeft_Z.value = LegLeft_Z_Sav01;
            CharacterDetails.LegLeft_W.value = LegLeft_W_Sav01;
            CharacterDetails.KneeLeft_X.value = KneeLeft_X_Sav01;
            CharacterDetails.KneeLeft_Y.value = KneeLeft_Y_Sav01;
            CharacterDetails.KneeLeft_Z.value = KneeLeft_Z_Sav01;
            CharacterDetails.KneeLeft_W.value = KneeLeft_W_Sav01;
            CharacterDetails.CalfLeft_X.value = CalfLeft_X_Sav01;
            CharacterDetails.CalfLeft_Y.value = CalfLeft_Y_Sav01;
            CharacterDetails.CalfLeft_Z.value = CalfLeft_Z_Sav01;
            CharacterDetails.CalfLeft_W.value = CalfLeft_W_Sav01;
            CharacterDetails.PoleynLeft_X.value = PoleynLeft_X_Sav01;
            CharacterDetails.PoleynLeft_Y.value = PoleynLeft_Y_Sav01;
            CharacterDetails.PoleynLeft_Z.value = PoleynLeft_Z_Sav01;
            CharacterDetails.PoleynLeft_W.value = PoleynLeft_W_Sav01;
            CharacterDetails.FootLeft_X.value = FootLeft_X_Sav01;
            CharacterDetails.FootLeft_Y.value = FootLeft_Y_Sav01;
            CharacterDetails.FootLeft_Z.value = FootLeft_Z_Sav01;
            CharacterDetails.FootLeft_W.value = FootLeft_W_Sav01;
            CharacterDetails.ToesLeft_X.value = ToesLeft_X_Sav01;
            CharacterDetails.ToesLeft_Y.value = ToesLeft_Y_Sav01;
            CharacterDetails.ToesLeft_Z.value = ToesLeft_Z_Sav01;
            CharacterDetails.ToesLeft_W.value = ToesLeft_W_Sav01;
        }
        private void LoadstateLeftLeg02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteLeftLeg = true;

            CharacterDetails.LegLeft_X.value = LegLeft_X_Sav02;
            CharacterDetails.LegLeft_Y.value = LegLeft_Y_Sav02;
            CharacterDetails.LegLeft_Z.value = LegLeft_Z_Sav02;
            CharacterDetails.LegLeft_W.value = LegLeft_W_Sav02;
            CharacterDetails.KneeLeft_X.value = KneeLeft_X_Sav02;
            CharacterDetails.KneeLeft_Y.value = KneeLeft_Y_Sav02;
            CharacterDetails.KneeLeft_Z.value = KneeLeft_Z_Sav02;
            CharacterDetails.KneeLeft_W.value = KneeLeft_W_Sav02;
            CharacterDetails.CalfLeft_X.value = CalfLeft_X_Sav02;
            CharacterDetails.CalfLeft_Y.value = CalfLeft_Y_Sav02;
            CharacterDetails.CalfLeft_Z.value = CalfLeft_Z_Sav02;
            CharacterDetails.CalfLeft_W.value = CalfLeft_W_Sav02;
            CharacterDetails.PoleynLeft_X.value = PoleynLeft_X_Sav02;
            CharacterDetails.PoleynLeft_Y.value = PoleynLeft_Y_Sav02;
            CharacterDetails.PoleynLeft_Z.value = PoleynLeft_Z_Sav02;
            CharacterDetails.PoleynLeft_W.value = PoleynLeft_W_Sav02;
            CharacterDetails.FootLeft_X.value = FootLeft_X_Sav02;
            CharacterDetails.FootLeft_Y.value = FootLeft_Y_Sav02;
            CharacterDetails.FootLeft_Z.value = FootLeft_Z_Sav02;
            CharacterDetails.FootLeft_W.value = FootLeft_W_Sav02;
            CharacterDetails.ToesLeft_X.value = ToesLeft_X_Sav02;
            CharacterDetails.ToesLeft_Y.value = ToesLeft_Y_Sav02;
            CharacterDetails.ToesLeft_Z.value = ToesLeft_Z_Sav02;
            CharacterDetails.ToesLeft_W.value = ToesLeft_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate RightLeg
        private void SavestateRightLeg01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveRightLeg01 = true;
            RightLegSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateRightLeg01.IsEnabled = true;
        }
        private void SavestateRightLeg02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveRightLeg02 = true;
            RightLegSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateRightLeg02.IsEnabled = true;
        }
        private void LoadstateRightLeg01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteRightLeg = true;

            CharacterDetails.LegRight_X.value = LegRight_X_Sav01;
            CharacterDetails.LegRight_Y.value = LegRight_Y_Sav01;
            CharacterDetails.LegRight_Z.value = LegRight_Z_Sav01;
            CharacterDetails.LegRight_W.value = LegRight_W_Sav01;
            CharacterDetails.KneeRight_X.value = KneeRight_X_Sav01;
            CharacterDetails.KneeRight_Y.value = KneeRight_Y_Sav01;
            CharacterDetails.KneeRight_Z.value = KneeRight_Z_Sav01;
            CharacterDetails.KneeRight_W.value = KneeRight_W_Sav01;
            CharacterDetails.CalfRight_X.value = CalfRight_X_Sav01;
            CharacterDetails.CalfRight_Y.value = CalfRight_Y_Sav01;
            CharacterDetails.CalfRight_Z.value = CalfRight_Z_Sav01;
            CharacterDetails.CalfRight_W.value = CalfRight_W_Sav01;
            CharacterDetails.PoleynRight_X.value = PoleynRight_X_Sav01;
            CharacterDetails.PoleynRight_Y.value = PoleynRight_Y_Sav01;
            CharacterDetails.PoleynRight_Z.value = PoleynRight_Z_Sav01;
            CharacterDetails.PoleynRight_W.value = PoleynRight_W_Sav01;
            CharacterDetails.FootRight_X.value = FootRight_X_Sav01;
            CharacterDetails.FootRight_Y.value = FootRight_Y_Sav01;
            CharacterDetails.FootRight_Z.value = FootRight_Z_Sav01;
            CharacterDetails.FootRight_W.value = FootRight_W_Sav01;
            CharacterDetails.ToesRight_X.value = ToesRight_X_Sav01;
            CharacterDetails.ToesRight_Y.value = ToesRight_Y_Sav01;
            CharacterDetails.ToesRight_Z.value = ToesRight_Z_Sav01;
            CharacterDetails.ToesRight_W.value = ToesRight_W_Sav01;
        }
        private void LoadstateRightLeg02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteRightLeg = true;

            CharacterDetails.LegRight_X.value = LegRight_X_Sav02;
            CharacterDetails.LegRight_Y.value = LegRight_Y_Sav02;
            CharacterDetails.LegRight_Z.value = LegRight_Z_Sav02;
            CharacterDetails.LegRight_W.value = LegRight_W_Sav02;
            CharacterDetails.KneeRight_X.value = KneeRight_X_Sav02;
            CharacterDetails.KneeRight_Y.value = KneeRight_Y_Sav02;
            CharacterDetails.KneeRight_Z.value = KneeRight_Z_Sav02;
            CharacterDetails.KneeRight_W.value = KneeRight_W_Sav02;
            CharacterDetails.CalfRight_X.value = CalfRight_X_Sav02;
            CharacterDetails.CalfRight_Y.value = CalfRight_Y_Sav02;
            CharacterDetails.CalfRight_Z.value = CalfRight_Z_Sav02;
            CharacterDetails.CalfRight_W.value = CalfRight_W_Sav02;
            CharacterDetails.PoleynRight_X.value = PoleynRight_X_Sav02;
            CharacterDetails.PoleynRight_Y.value = PoleynRight_Y_Sav02;
            CharacterDetails.PoleynRight_Z.value = PoleynRight_Z_Sav02;
            CharacterDetails.PoleynRight_W.value = PoleynRight_W_Sav02;
            CharacterDetails.FootRight_X.value = FootRight_X_Sav02;
            CharacterDetails.FootRight_Y.value = FootRight_Y_Sav02;
            CharacterDetails.FootRight_Z.value = FootRight_Z_Sav02;
            CharacterDetails.FootRight_W.value = FootRight_W_Sav02;
            CharacterDetails.ToesRight_X.value = ToesRight_X_Sav02;
            CharacterDetails.ToesRight_Y.value = ToesRight_Y_Sav02;
            CharacterDetails.ToesRight_Z.value = ToesRight_Z_Sav02;
            CharacterDetails.ToesRight_W.value = ToesRight_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate Helm
        private void SavestateHelm01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveHelm01 = true;
            HelmSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateHelm01.IsEnabled = true;
        }
        private void SavestateHelm02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveHelm02 = true;
            HelmSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateHelm02.IsEnabled = true;
        }
        private void LoadstateHelm01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteHelm = true;

            CharacterDetails.ExMetA_X.value = ExMetA_X_Sav01;
            CharacterDetails.ExMetA_Y.value = ExMetA_Y_Sav01;
            CharacterDetails.ExMetA_Z.value = ExMetA_Z_Sav01;
            CharacterDetails.ExMetA_W.value = ExMetA_W_Sav01;
            CharacterDetails.ExMetB_X.value = ExMetB_X_Sav01;
            CharacterDetails.ExMetB_Y.value = ExMetB_Y_Sav01;
            CharacterDetails.ExMetB_Z.value = ExMetB_Z_Sav01;
            CharacterDetails.ExMetB_W.value = ExMetB_W_Sav01;
            CharacterDetails.ExMetC_X.value = ExMetC_X_Sav01;
            CharacterDetails.ExMetC_Y.value = ExMetC_Y_Sav01;
            CharacterDetails.ExMetC_Z.value = ExMetC_Z_Sav01;
            CharacterDetails.ExMetC_W.value = ExMetC_W_Sav01;
            CharacterDetails.ExMetD_X.value = ExMetD_X_Sav01;
            CharacterDetails.ExMetD_Y.value = ExMetD_Y_Sav01;
            CharacterDetails.ExMetD_Z.value = ExMetD_Z_Sav01;
            CharacterDetails.ExMetD_W.value = ExMetD_W_Sav01;
            CharacterDetails.ExMetE_X.value = ExMetE_X_Sav01;
            CharacterDetails.ExMetE_Y.value = ExMetE_Y_Sav01;
            CharacterDetails.ExMetE_Z.value = ExMetE_Z_Sav01;
            CharacterDetails.ExMetE_W.value = ExMetE_W_Sav01;
            CharacterDetails.ExMetF_X.value = ExMetF_X_Sav01;
            CharacterDetails.ExMetF_Y.value = ExMetF_Y_Sav01;
            CharacterDetails.ExMetF_Z.value = ExMetF_Z_Sav01;
            CharacterDetails.ExMetF_W.value = ExMetF_W_Sav01;
            CharacterDetails.ExMetG_X.value = ExMetG_X_Sav01;
            CharacterDetails.ExMetG_Y.value = ExMetG_Y_Sav01;
            CharacterDetails.ExMetG_Z.value = ExMetG_Z_Sav01;
            CharacterDetails.ExMetG_W.value = ExMetG_W_Sav01;
            CharacterDetails.ExMetH_X.value = ExMetH_X_Sav01;
            CharacterDetails.ExMetH_Y.value = ExMetH_Y_Sav01;
            CharacterDetails.ExMetH_Z.value = ExMetH_Z_Sav01;
            CharacterDetails.ExMetH_W.value = ExMetH_W_Sav01;
            CharacterDetails.ExMetI_X.value = ExMetI_X_Sav01;
            CharacterDetails.ExMetI_Y.value = ExMetI_Y_Sav01;
            CharacterDetails.ExMetI_Z.value = ExMetI_Z_Sav01;
            CharacterDetails.ExMetI_W.value = ExMetI_W_Sav01;
            CharacterDetails.ExMetJ_X.value = ExMetJ_X_Sav01;
            CharacterDetails.ExMetJ_Y.value = ExMetJ_Y_Sav01;
            CharacterDetails.ExMetJ_Z.value = ExMetJ_Z_Sav01;
            CharacterDetails.ExMetJ_W.value = ExMetJ_W_Sav01;
            CharacterDetails.ExMetK_X.value = ExMetK_X_Sav01;
            CharacterDetails.ExMetK_Y.value = ExMetK_Y_Sav01;
            CharacterDetails.ExMetK_Z.value = ExMetK_Z_Sav01;
            CharacterDetails.ExMetK_W.value = ExMetK_W_Sav01;
            CharacterDetails.ExMetL_X.value = ExMetL_X_Sav01;
            CharacterDetails.ExMetL_Y.value = ExMetL_Y_Sav01;
            CharacterDetails.ExMetL_Z.value = ExMetL_Z_Sav01;
            CharacterDetails.ExMetL_W.value = ExMetL_W_Sav01;
            CharacterDetails.ExMetM_X.value = ExMetM_X_Sav01;
            CharacterDetails.ExMetM_Y.value = ExMetM_Y_Sav01;
            CharacterDetails.ExMetM_Z.value = ExMetM_Z_Sav01;
            CharacterDetails.ExMetM_W.value = ExMetM_W_Sav01;
            CharacterDetails.ExMetN_X.value = ExMetN_X_Sav01;
            CharacterDetails.ExMetN_Y.value = ExMetN_Y_Sav01;
            CharacterDetails.ExMetN_Z.value = ExMetN_Z_Sav01;
            CharacterDetails.ExMetN_W.value = ExMetN_W_Sav01;
            CharacterDetails.ExMetO_X.value = ExMetO_X_Sav01;
            CharacterDetails.ExMetO_Y.value = ExMetO_Y_Sav01;
            CharacterDetails.ExMetO_Z.value = ExMetO_Z_Sav01;
            CharacterDetails.ExMetO_W.value = ExMetO_W_Sav01;
            CharacterDetails.ExMetP_X.value = ExMetP_X_Sav01;
            CharacterDetails.ExMetP_Y.value = ExMetP_Y_Sav01;
            CharacterDetails.ExMetP_Z.value = ExMetP_Z_Sav01;
            CharacterDetails.ExMetP_W.value = ExMetP_W_Sav01;
            CharacterDetails.ExMetQ_X.value = ExMetQ_X_Sav01;
            CharacterDetails.ExMetQ_Y.value = ExMetQ_Y_Sav01;
            CharacterDetails.ExMetQ_Z.value = ExMetQ_Z_Sav01;
            CharacterDetails.ExMetQ_W.value = ExMetQ_W_Sav01;
            CharacterDetails.ExMetR_X.value = ExMetR_X_Sav01;
            CharacterDetails.ExMetR_Y.value = ExMetR_Y_Sav01;
            CharacterDetails.ExMetR_Z.value = ExMetR_Z_Sav01;
            CharacterDetails.ExMetR_W.value = ExMetR_W_Sav01;
        }
        private void LoadstateHelm02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteHelm = true;

            CharacterDetails.ExMetA_X.value = ExMetA_X_Sav02;
            CharacterDetails.ExMetA_Y.value = ExMetA_Y_Sav02;
            CharacterDetails.ExMetA_Z.value = ExMetA_Z_Sav02;
            CharacterDetails.ExMetA_W.value = ExMetA_W_Sav02;
            CharacterDetails.ExMetB_X.value = ExMetB_X_Sav02;
            CharacterDetails.ExMetB_Y.value = ExMetB_Y_Sav02;
            CharacterDetails.ExMetB_Z.value = ExMetB_Z_Sav02;
            CharacterDetails.ExMetB_W.value = ExMetB_W_Sav02;
            CharacterDetails.ExMetC_X.value = ExMetC_X_Sav02;
            CharacterDetails.ExMetC_Y.value = ExMetC_Y_Sav02;
            CharacterDetails.ExMetC_Z.value = ExMetC_Z_Sav02;
            CharacterDetails.ExMetC_W.value = ExMetC_W_Sav02;
            CharacterDetails.ExMetD_X.value = ExMetD_X_Sav02;
            CharacterDetails.ExMetD_Y.value = ExMetD_Y_Sav02;
            CharacterDetails.ExMetD_Z.value = ExMetD_Z_Sav02;
            CharacterDetails.ExMetD_W.value = ExMetD_W_Sav02;
            CharacterDetails.ExMetE_X.value = ExMetE_X_Sav02;
            CharacterDetails.ExMetE_Y.value = ExMetE_Y_Sav02;
            CharacterDetails.ExMetE_Z.value = ExMetE_Z_Sav02;
            CharacterDetails.ExMetE_W.value = ExMetE_W_Sav02;
            CharacterDetails.ExMetF_X.value = ExMetF_X_Sav02;
            CharacterDetails.ExMetF_Y.value = ExMetF_Y_Sav02;
            CharacterDetails.ExMetF_Z.value = ExMetF_Z_Sav02;
            CharacterDetails.ExMetF_W.value = ExMetF_W_Sav02;
            CharacterDetails.ExMetG_X.value = ExMetG_X_Sav02;
            CharacterDetails.ExMetG_Y.value = ExMetG_Y_Sav02;
            CharacterDetails.ExMetG_Z.value = ExMetG_Z_Sav02;
            CharacterDetails.ExMetG_W.value = ExMetG_W_Sav02;
            CharacterDetails.ExMetH_X.value = ExMetH_X_Sav02;
            CharacterDetails.ExMetH_Y.value = ExMetH_Y_Sav02;
            CharacterDetails.ExMetH_Z.value = ExMetH_Z_Sav02;
            CharacterDetails.ExMetH_W.value = ExMetH_W_Sav02;
            CharacterDetails.ExMetI_X.value = ExMetI_X_Sav02;
            CharacterDetails.ExMetI_Y.value = ExMetI_Y_Sav02;
            CharacterDetails.ExMetI_Z.value = ExMetI_Z_Sav02;
            CharacterDetails.ExMetI_W.value = ExMetI_W_Sav02;
            CharacterDetails.ExMetJ_X.value = ExMetJ_X_Sav02;
            CharacterDetails.ExMetJ_Y.value = ExMetJ_Y_Sav02;
            CharacterDetails.ExMetJ_Z.value = ExMetJ_Z_Sav02;
            CharacterDetails.ExMetJ_W.value = ExMetJ_W_Sav02;
            CharacterDetails.ExMetK_X.value = ExMetK_X_Sav02;
            CharacterDetails.ExMetK_Y.value = ExMetK_Y_Sav02;
            CharacterDetails.ExMetK_Z.value = ExMetK_Z_Sav02;
            CharacterDetails.ExMetK_W.value = ExMetK_W_Sav02;
            CharacterDetails.ExMetL_X.value = ExMetL_X_Sav02;
            CharacterDetails.ExMetL_Y.value = ExMetL_Y_Sav02;
            CharacterDetails.ExMetL_Z.value = ExMetL_Z_Sav02;
            CharacterDetails.ExMetL_W.value = ExMetL_W_Sav02;
            CharacterDetails.ExMetM_X.value = ExMetM_X_Sav02;
            CharacterDetails.ExMetM_Y.value = ExMetM_Y_Sav02;
            CharacterDetails.ExMetM_Z.value = ExMetM_Z_Sav02;
            CharacterDetails.ExMetM_W.value = ExMetM_W_Sav02;
            CharacterDetails.ExMetN_X.value = ExMetN_X_Sav02;
            CharacterDetails.ExMetN_Y.value = ExMetN_Y_Sav02;
            CharacterDetails.ExMetN_Z.value = ExMetN_Z_Sav02;
            CharacterDetails.ExMetN_W.value = ExMetN_W_Sav02;
            CharacterDetails.ExMetO_X.value = ExMetO_X_Sav02;
            CharacterDetails.ExMetO_Y.value = ExMetO_Y_Sav02;
            CharacterDetails.ExMetO_Z.value = ExMetO_Z_Sav02;
            CharacterDetails.ExMetO_W.value = ExMetO_W_Sav02;
            CharacterDetails.ExMetP_X.value = ExMetP_X_Sav02;
            CharacterDetails.ExMetP_Y.value = ExMetP_Y_Sav02;
            CharacterDetails.ExMetP_Z.value = ExMetP_Z_Sav02;
            CharacterDetails.ExMetP_W.value = ExMetP_W_Sav02;
            CharacterDetails.ExMetQ_X.value = ExMetQ_X_Sav02;
            CharacterDetails.ExMetQ_Y.value = ExMetQ_Y_Sav02;
            CharacterDetails.ExMetQ_Z.value = ExMetQ_Z_Sav02;
            CharacterDetails.ExMetQ_W.value = ExMetQ_W_Sav02;
            CharacterDetails.ExMetR_X.value = ExMetR_X_Sav02;
            CharacterDetails.ExMetR_Y.value = ExMetR_Y_Sav02;
            CharacterDetails.ExMetR_Z.value = ExMetR_Z_Sav02;
            CharacterDetails.ExMetR_W.value = ExMetR_W_Sav02;
        }
        #endregion
        #region Savestate\Loadstate Top
        private void SavestateTop01_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveTop01 = true;
            TopSaved01 = true;

            if (CharacterDetails.BoneEditMode) LoadstateTop01.IsEnabled = true;
        }
        private void SavestateTop02_Click(object sender, RoutedEventArgs e)
        {
            CharacterDetails.SaveTop02 = true;
            TopSaved02 = true;

            if (CharacterDetails.BoneEditMode) LoadstateTop02.IsEnabled = true;
        }
        private void LoadstateTop01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteTop = true;

            CharacterDetails.ExTopA_X.value = ExTopA_X_Sav01;
            CharacterDetails.ExTopA_Y.value = ExTopA_Y_Sav01;
            CharacterDetails.ExTopA_Z.value = ExTopA_Z_Sav01;
            CharacterDetails.ExTopA_W.value = ExTopA_W_Sav01;
            CharacterDetails.ExTopB_X.value = ExTopB_X_Sav01;
            CharacterDetails.ExTopB_Y.value = ExTopB_Y_Sav01;
            CharacterDetails.ExTopB_Z.value = ExTopB_Z_Sav01;
            CharacterDetails.ExTopB_W.value = ExTopB_W_Sav01;
            CharacterDetails.ExTopC_X.value = ExTopC_X_Sav01;
            CharacterDetails.ExTopC_Y.value = ExTopC_Y_Sav01;
            CharacterDetails.ExTopC_Z.value = ExTopC_Z_Sav01;
            CharacterDetails.ExTopC_W.value = ExTopC_W_Sav01;
            CharacterDetails.ExTopD_X.value = ExTopD_X_Sav01;
            CharacterDetails.ExTopD_Y.value = ExTopD_Y_Sav01;
            CharacterDetails.ExTopD_Z.value = ExTopD_Z_Sav01;
            CharacterDetails.ExTopD_W.value = ExTopD_W_Sav01;
            CharacterDetails.ExTopE_X.value = ExTopE_X_Sav01;
            CharacterDetails.ExTopE_Y.value = ExTopE_Y_Sav01;
            CharacterDetails.ExTopE_Z.value = ExTopE_Z_Sav01;
            CharacterDetails.ExTopE_W.value = ExTopE_W_Sav01;
            CharacterDetails.ExTopF_X.value = ExTopF_X_Sav01;
            CharacterDetails.ExTopF_Y.value = ExTopF_Y_Sav01;
            CharacterDetails.ExTopF_Z.value = ExTopF_Z_Sav01;
            CharacterDetails.ExTopF_W.value = ExTopF_W_Sav01;
            CharacterDetails.ExTopG_X.value = ExTopG_X_Sav01;
            CharacterDetails.ExTopG_Y.value = ExTopG_Y_Sav01;
            CharacterDetails.ExTopG_Z.value = ExTopG_Z_Sav01;
            CharacterDetails.ExTopG_W.value = ExTopG_W_Sav01;
            CharacterDetails.ExTopH_X.value = ExTopH_X_Sav01;
            CharacterDetails.ExTopH_Y.value = ExTopH_Y_Sav01;
            CharacterDetails.ExTopH_Z.value = ExTopH_Z_Sav01;
            CharacterDetails.ExTopH_W.value = ExTopH_W_Sav01;
            CharacterDetails.ExTopI_X.value = ExTopI_X_Sav01;
            CharacterDetails.ExTopI_Y.value = ExTopI_Y_Sav01;
            CharacterDetails.ExTopI_Z.value = ExTopI_Z_Sav01;
            CharacterDetails.ExTopI_W.value = ExTopI_W_Sav01;
        }
        private void LoadstateTop02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            CharacterDetails.WriteTop = true;

            CharacterDetails.ExTopA_X.value = ExTopA_X_Sav02;
            CharacterDetails.ExTopA_Y.value = ExTopA_Y_Sav02;
            CharacterDetails.ExTopA_Z.value = ExTopA_Z_Sav02;
            CharacterDetails.ExTopA_W.value = ExTopA_W_Sav02;
            CharacterDetails.ExTopB_X.value = ExTopB_X_Sav02;
            CharacterDetails.ExTopB_Y.value = ExTopB_Y_Sav02;
            CharacterDetails.ExTopB_Z.value = ExTopB_Z_Sav02;
            CharacterDetails.ExTopB_W.value = ExTopB_W_Sav02;
            CharacterDetails.ExTopC_X.value = ExTopC_X_Sav02;
            CharacterDetails.ExTopC_Y.value = ExTopC_Y_Sav02;
            CharacterDetails.ExTopC_Z.value = ExTopC_Z_Sav02;
            CharacterDetails.ExTopC_W.value = ExTopC_W_Sav02;
            CharacterDetails.ExTopD_X.value = ExTopD_X_Sav02;
            CharacterDetails.ExTopD_Y.value = ExTopD_Y_Sav02;
            CharacterDetails.ExTopD_Z.value = ExTopD_Z_Sav02;
            CharacterDetails.ExTopD_W.value = ExTopD_W_Sav02;
            CharacterDetails.ExTopE_X.value = ExTopE_X_Sav02;
            CharacterDetails.ExTopE_Y.value = ExTopE_Y_Sav02;
            CharacterDetails.ExTopE_Z.value = ExTopE_Z_Sav02;
            CharacterDetails.ExTopE_W.value = ExTopE_W_Sav02;
            CharacterDetails.ExTopF_X.value = ExTopF_X_Sav02;
            CharacterDetails.ExTopF_Y.value = ExTopF_Y_Sav02;
            CharacterDetails.ExTopF_Z.value = ExTopF_Z_Sav02;
            CharacterDetails.ExTopF_W.value = ExTopF_W_Sav02;
            CharacterDetails.ExTopG_X.value = ExTopG_X_Sav02;
            CharacterDetails.ExTopG_Y.value = ExTopG_Y_Sav02;
            CharacterDetails.ExTopG_Z.value = ExTopG_Z_Sav02;
            CharacterDetails.ExTopG_W.value = ExTopG_W_Sav02;
            CharacterDetails.ExTopH_X.value = ExTopH_X_Sav02;
            CharacterDetails.ExTopH_Y.value = ExTopH_Y_Sav02;
            CharacterDetails.ExTopH_Z.value = ExTopH_Z_Sav02;
            CharacterDetails.ExTopH_W.value = ExTopH_W_Sav02;
            CharacterDetails.ExTopI_X.value = ExTopI_X_Sav02;
            CharacterDetails.ExTopI_Y.value = ExTopI_Y_Sav02;
            CharacterDetails.ExTopI_Z.value = ExTopI_Z_Sav02;
            CharacterDetails.ExTopI_W.value = ExTopI_W_Sav02;
        }
        #endregion

        #region Advanced Loading Options
        private void LoadHead_Checked(object sender, RoutedEventArgs e)
        {
            HeadAdvLoad = true;
        }
        private void LoadHead_Unchecked(object sender, RoutedEventArgs e)
        {
            HeadAdvLoad = false;
        }

        private void LoadHair_Checked(object sender, RoutedEventArgs e)
        {
            HairAdvLoad = true;
        }
        private void LoadHair_Unchecked(object sender, RoutedEventArgs e)
        {
            HairAdvLoad = false;
        }

        private void LoadEarrings_Checked(object sender, RoutedEventArgs e)
        {
            EarringsAdvLoad = true;
        }
        private void LoadEarrings_Unchecked(object sender, RoutedEventArgs e)
        {
            EarringsAdvLoad = false;
        }

        private void LoadBody_Checked(object sender, RoutedEventArgs e)
        {
            BodyAdvLoad = true;
        }
        private void LoadBody_Unchecked(object sender, RoutedEventArgs e)
        {
            BodyAdvLoad = false;
        }

        private void LoadLeftArm_Checked(object sender, RoutedEventArgs e)
        {
            LeftArmAdvLoad = true;
        }
        private void LoadLeftArm_Unchecked(object sender, RoutedEventArgs e)
        {
            LeftArmAdvLoad = false;
        }

        private void LoadRightArm_Checked(object sender, RoutedEventArgs e)
        {
            RightArmAdvLoad = true;
        }
        private void LoadRightArm_Unchecked(object sender, RoutedEventArgs e)
        {
            RightArmAdvLoad = false;
        }

        private void LoadClothes_Checked(object sender, RoutedEventArgs e)
        {
            ClothesAdvLoad = true;
        }
        private void LoadClothes_Unchecked(object sender, RoutedEventArgs e)
        {
            ClothesAdvLoad = false;
        }

        private void LoadHelm_Checked(object sender, RoutedEventArgs e)
        {
            HelmAdvLoad = true;
        }
        private void LoadHelm_Unchecked(object sender, RoutedEventArgs e)
        {
            HelmAdvLoad = false;
        }

        private void LoadTop_Checked(object sender, RoutedEventArgs e)
        {
            TopAdvLoad = true;
        }
        private void LoadTop_Unchecked(object sender, RoutedEventArgs e)
        {
            TopAdvLoad = false;
        }

        private void LoadWeapons_Checked(object sender, RoutedEventArgs e)
        {
            WeaponsAdvLoad = true;
        }
        private void LoadWeapons_Unchecked(object sender, RoutedEventArgs e)
        {
            WeaponsAdvLoad = false;
        }

        private void LoadLeftHand_Checked(object sender, RoutedEventArgs e)
        {
            LeftHandAdvLoad = true;
        }
        private void LoadLeftHand_Unchecked(object sender, RoutedEventArgs e)
        {
            LeftHandAdvLoad = false;
        }

        private void LoadRightHand_Checked(object sender, RoutedEventArgs e)
        {
            RightHandAdvLoad = true;
        }
        private void LoadRightHand_Unchecked(object sender, RoutedEventArgs e)
        {
            RightHandAdvLoad = false;
        }

        private void LoadWaist_Checked(object sender, RoutedEventArgs e)
        {
            WaistAdvLoad = true;
        }
        private void LoadWaist_Unchecked(object sender, RoutedEventArgs e)
        {
            WaistAdvLoad = false;
        }

        private void LoadLeftLeg_Checked(object sender, RoutedEventArgs e)
        {
            LeftLegAdvLoad = true;
        }
        private void LoadLeftLeg_Unchecked(object sender, RoutedEventArgs e)
        {
            LeftLegAdvLoad = false;
        }

        private void LoadRightLeg_Checked(object sender, RoutedEventArgs e)
        {
            RightLegAdvLoad = true;
        }
        private void LoadRightLeg_Unchecked(object sender, RoutedEventArgs e)
        {
            RightLegAdvLoad = false;
        }
        #endregion

        private void SwapToggles(ToggleButton newActive)
        {
            Root.IsChecked = (newActive == Root) ? true : false;
            Abdomen.IsChecked = (newActive == Abdomen) ? true : false;
            Throw.IsChecked = (newActive == Throw) ? true : false;
            Waist.IsChecked = (newActive == Waist) ? true : false;
            SpineA.IsChecked = (newActive == SpineA) ? true : false;
            LegLeft.IsChecked = (newActive == LegLeft) ? true : false;
            LegRight.IsChecked = (newActive == LegRight) ? true : false;
            HolsterLeft.IsChecked = (newActive == HolsterLeft) ? true : false;
            HolsterRight.IsChecked = (newActive == HolsterRight) ? true : false;
            SheatheLeft.IsChecked = (newActive == SheatheLeft) ? true : false;
            SheatheRight.IsChecked = (newActive == SheatheRight) ? true : false;
            SpineB.IsChecked = (newActive == SpineB) ? true : false;
            ClothBackALeft.IsChecked = (newActive == ClothBackALeft) ? true : false;
            ClothBackARight.IsChecked = (newActive == ClothBackARight) ? true : false;
            ClothFrontALeft.IsChecked = (newActive == ClothFrontALeft) ? true : false;
            ClothFrontARight.IsChecked = (newActive == ClothFrontARight) ? true : false;
            ClothSideALeft.IsChecked = (newActive == ClothSideALeft) ? true : false;
            ClothSideARight.IsChecked = (newActive == ClothSideARight) ? true : false;
            KneeLeft.IsChecked = (newActive == KneeLeft) ? true : false;
            KneeRight.IsChecked = (newActive == KneeRight) ? true : false;
            BreastLeft.IsChecked = (newActive == BreastLeft) ? true : false;
            BreastRight.IsChecked = (newActive == BreastRight) ? true : false;
            SpineC.IsChecked = (newActive == SpineC) ? true : false;
            ClothBackBLeft.IsChecked = (newActive == ClothBackBLeft) ? true : false;
            ClothBackBRight.IsChecked = (newActive == ClothBackBRight) ? true : false;
            ClothFrontBLeft.IsChecked = (newActive == ClothFrontBLeft) ? true : false;
            ClothFrontBRight.IsChecked = (newActive == ClothFrontBRight) ? true : false;
            ClothSideBLeft.IsChecked = (newActive == ClothSideBLeft) ? true : false;
            ClothSideBRight.IsChecked = (newActive == ClothSideBRight) ? true : false;
            CalfLeft.IsChecked = (newActive == CalfLeft) ? true : false;
            CalfRight.IsChecked = (newActive == CalfRight) ? true : false;
            ScabbardLeft.IsChecked = (newActive == ScabbardLeft) ? true : false;
            ScabbardRight.IsChecked = (newActive == ScabbardRight) ? true : false;
            Neck.IsChecked = (newActive == Neck) ? true : false;
            ClavicleLeft.IsChecked = (newActive == ClavicleLeft) ? true : false;
            ClavicleRight.IsChecked = (newActive == ClavicleRight) ? true : false;
            ClothBackCLeft.IsChecked = (newActive == ClothBackCLeft) ? true : false;
            ClothBackCRight.IsChecked = (newActive == ClothBackCRight) ? true : false;
            ClothFrontCLeft.IsChecked = (newActive == ClothFrontCLeft) ? true : false;
            ClothFrontCRight.IsChecked = (newActive == ClothFrontCRight) ? true : false;
            ClothSideCLeft.IsChecked = (newActive == ClothSideCLeft) ? true : false;
            ClothSideCRight.IsChecked = (newActive == ClothSideCRight) ? true : false;
            PoleynLeft.IsChecked = (newActive == PoleynLeft) ? true : false;
            PoleynRight.IsChecked = (newActive == PoleynRight) ? true : false;
            FootLeft.IsChecked = (newActive == FootLeft) ? true : false;
            FootRight.IsChecked = (newActive == FootRight) ? true : false;
            Head.IsChecked = (newActive == Head) ? true : false;
            ArmLeft.IsChecked = (newActive == ArmLeft) ? true : false;
            ArmRight.IsChecked = (newActive == ArmRight) ? true : false;
            PauldronLeft.IsChecked = (newActive == PauldronLeft) ? true : false;
            PauldronRight.IsChecked = (newActive == PauldronRight) ? true : false;
            Unknown00.IsChecked = (newActive == Unknown00) ? true : false;
            ToesLeft.IsChecked = (newActive == ToesLeft) ? true : false;
            ToesRight.IsChecked = (newActive == ToesRight) ? true : false;
            HairA.IsChecked = (newActive == HairA) ? true : false;
            HairFrontLeft.IsChecked = (newActive == HairFrontLeft) ? true : false;
            HairFrontRight.IsChecked = (newActive == HairFrontRight) ? true : false;
            EarLeft.IsChecked = (newActive == EarLeft) ? true : false;
            EarRight.IsChecked = (newActive == EarRight) ? true : false;
            ForearmLeft.IsChecked = (newActive == ForearmLeft) ? true : false;
            ForearmRight.IsChecked = (newActive == ForearmRight) ? true : false;
            ShoulderLeft.IsChecked = (newActive == ShoulderLeft) ? true : false;
            ShoulderRight.IsChecked = (newActive == ShoulderRight) ? true : false;
            HairB.IsChecked = (newActive == HairB) ? true : false;
            HandLeft.IsChecked = (newActive == HandLeft) ? true : false;
            HandRight.IsChecked = (newActive == HandRight) ? true : false;
            ShieldLeft.IsChecked = (newActive == ShieldLeft) ? true : false;
            ShieldRight.IsChecked = (newActive == ShieldRight) ? true : false;
            EarringALeft.IsChecked = (newActive == EarringALeft) ? true : false;
            EarringARight.IsChecked = (newActive == EarringARight) ? true : false;
            ElbowLeft.IsChecked = (newActive == ElbowLeft) ? true : false;
            ElbowRight.IsChecked = (newActive == ElbowRight) ? true : false;
            CouterLeft.IsChecked = (newActive == CouterLeft) ? true : false;
            CouterRight.IsChecked = (newActive == CouterRight) ? true : false;
            WristLeft.IsChecked = (newActive == WristLeft) ? true : false;
            WristRight.IsChecked = (newActive == WristRight) ? true : false;
            IndexALeft.IsChecked = (newActive == IndexALeft) ? true : false;
            IndexARight.IsChecked = (newActive == IndexARight) ? true : false;
            PinkyALeft.IsChecked = (newActive == PinkyALeft) ? true : false;
            PinkyARight.IsChecked = (newActive == PinkyARight) ? true : false;
            RingALeft.IsChecked = (newActive == RingALeft) ? true : false;
            RingARight.IsChecked = (newActive == RingARight) ? true : false;
            MiddleALeft.IsChecked = (newActive == MiddleALeft) ? true : false;
            MiddleARight.IsChecked = (newActive == MiddleARight) ? true : false;
            ThumbALeft.IsChecked = (newActive == ThumbALeft) ? true : false;
            ThumbARight.IsChecked = (newActive == ThumbARight) ? true : false;
            WeaponLeft.IsChecked = (newActive == WeaponLeft) ? true : false;
            WeaponRight.IsChecked = (newActive == WeaponRight) ? true : false;
            EarringBLeft.IsChecked = (newActive == EarringBLeft) ? true : false;
            EarringBRight.IsChecked = (newActive == EarringBRight) ? true : false;
            IndexBLeft.IsChecked = (newActive == IndexBLeft) ? true : false;
            IndexBRight.IsChecked = (newActive == IndexBRight) ? true : false;
            PinkyBLeft.IsChecked = (newActive == PinkyBLeft) ? true : false;
            PinkyBRight.IsChecked = (newActive == PinkyBRight) ? true : false;
            RingBLeft.IsChecked = (newActive == RingBLeft) ? true : false;
            RingBRight.IsChecked = (newActive == RingBRight) ? true : false;
            MiddleBLeft.IsChecked = (newActive == MiddleBLeft) ? true : false;
            MiddleBRight.IsChecked = (newActive == MiddleBRight) ? true : false;
            ThumbBLeft.IsChecked = (newActive == ThumbBLeft) ? true : false;
            ThumbBRight.IsChecked = (newActive == ThumbBRight) ? true : false;
            TailA.IsChecked = (newActive == TailA) ? true : false;
            TailB.IsChecked = (newActive == TailB) ? true : false;
            TailC.IsChecked = (newActive == TailC) ? true : false;
            TailD.IsChecked = (newActive == TailD) ? true : false;
            TailE.IsChecked = (newActive == TailE) ? true : false;
            RootHead.IsChecked = (newActive == RootHead) ? true : false;
            Jaw.IsChecked = (newActive == Jaw) ? true : false;
            EyelidLowerLeft.IsChecked = (newActive == EyelidLowerLeft) ? true : false;
            EyelidLowerRight.IsChecked = (newActive == EyelidLowerRight) ? true : false;
            EyeLeft.IsChecked = (newActive == EyeLeft) ? true : false;
            EyeRight.IsChecked = (newActive == EyeRight) ? true : false;
            Nose.IsChecked = (newActive == Nose) ? true : false;
            CheekLeft.IsChecked = (newActive == CheekLeft) ? true : false;
            CheekRight.IsChecked = (newActive == CheekRight) ? true : false;
            LipsLeft.IsChecked = (newActive == LipsLeft) ? true : false;
            LipsRight.IsChecked = (newActive == LipsRight) ? true : false;
            EyebrowLeft.IsChecked = (newActive == EyebrowLeft) ? true : false;
            EyebrowRight.IsChecked = (newActive == EyebrowRight) ? true : false;
            Bridge.IsChecked = (newActive == Bridge) ? true : false;
            BrowLeft.IsChecked = (newActive == BrowLeft) ? true : false;
            BrowRight.IsChecked = (newActive == BrowRight) ? true : false;
            LipUpperA.IsChecked = (newActive == LipUpperA) ? true : false;
            EyelidUpperLeft.IsChecked = (newActive == EyelidUpperLeft) ? true : false;
            EyelidUpperRight.IsChecked = (newActive == EyelidUpperRight) ? true : false;
            LipLowerA.IsChecked = (newActive == LipLowerA) ? true : false;
            LipUpperB.IsChecked = (newActive == LipUpperB) ? true : false;
            LipLowerB.IsChecked = (newActive == LipLowerB) ? true : false;
            HrothWhiskersLeft.IsChecked = (newActive == HrothWhiskersLeft) ? true : false;
            HrothWhiskersRight.IsChecked = (newActive == HrothWhiskersRight) ? true : false;
            VieraEarALeft.IsChecked = (newActive == VieraEarALeft) ? true : false;
            VieraEarARight.IsChecked = (newActive == VieraEarARight) ? true : false;
            VieraEarBLeft.IsChecked = (newActive == VieraEarBLeft) ? true : false;
            VieraEarBRight.IsChecked = (newActive == VieraEarBRight) ? true : false;
            ExHairA.IsChecked = (newActive == ExHairA) ? true : false;
            ExHairB.IsChecked = (newActive == ExHairB) ? true : false;
            ExHairC.IsChecked = (newActive == ExHairC) ? true : false;
            ExHairD.IsChecked = (newActive == ExHairD) ? true : false;
            ExHairE.IsChecked = (newActive == ExHairE) ? true : false;
            ExHairF.IsChecked = (newActive == ExHairF) ? true : false;
            ExHairG.IsChecked = (newActive == ExHairG) ? true : false;
            ExHairH.IsChecked = (newActive == ExHairH) ? true : false;
            ExHairI.IsChecked = (newActive == ExHairI) ? true : false;
            ExHairJ.IsChecked = (newActive == ExHairJ) ? true : false;
            ExHairK.IsChecked = (newActive == ExHairK) ? true : false;
            ExHairL.IsChecked = (newActive == ExHairL) ? true : false;
            ExMetA.IsChecked = (newActive == ExMetA) ? true : false;
            ExMetB.IsChecked = (newActive == ExMetB) ? true : false;
            ExMetC.IsChecked = (newActive == ExMetC) ? true : false;
            ExMetD.IsChecked = (newActive == ExMetD) ? true : false;
            ExMetE.IsChecked = (newActive == ExMetE) ? true : false;
            ExMetF.IsChecked = (newActive == ExMetF) ? true : false;
            ExMetG.IsChecked = (newActive == ExMetG) ? true : false;
            ExMetH.IsChecked = (newActive == ExMetH) ? true : false;
            ExMetI.IsChecked = (newActive == ExMetI) ? true : false;
            ExMetJ.IsChecked = (newActive == ExMetJ) ? true : false;
            ExMetK.IsChecked = (newActive == ExMetK) ? true : false;
            ExMetL.IsChecked = (newActive == ExMetL) ? true : false;
            ExMetM.IsChecked = (newActive == ExMetM) ? true : false;
            ExMetN.IsChecked = (newActive == ExMetN) ? true : false;
            ExMetO.IsChecked = (newActive == ExMetO) ? true : false;
            ExMetP.IsChecked = (newActive == ExMetP) ? true : false;
            ExMetQ.IsChecked = (newActive == ExMetQ) ? true : false;
            ExMetR.IsChecked = (newActive == ExMetR) ? true : false;
            ExTopA.IsChecked = (newActive == ExTopA) ? true : false;
            ExTopB.IsChecked = (newActive == ExTopB) ? true : false;
            ExTopC.IsChecked = (newActive == ExTopC) ? true : false;
            ExTopD.IsChecked = (newActive == ExTopD) ? true : false;
            ExTopE.IsChecked = (newActive == ExTopE) ? true : false;
            ExTopF.IsChecked = (newActive == ExTopF) ? true : false;
            ExTopG.IsChecked = (newActive == ExTopG) ? true : false;
            ExTopH.IsChecked = (newActive == ExTopH) ? true : false;
            ExTopI.IsChecked = (newActive == ExTopI) ? true : false;
        }
        private void UncheckAll()
        {
            Root.IsChecked = false;
            Abdomen.IsChecked = false;
            Throw.IsChecked = false;
            Waist.IsChecked = false;
            SpineA.IsChecked = false;
            LegLeft.IsChecked = false;
            LegRight.IsChecked = false;
            HolsterLeft.IsChecked = false;
            HolsterRight.IsChecked = false;
            SheatheLeft.IsChecked = false;
            SheatheRight.IsChecked = false;
            SpineB.IsChecked = false;
            ClothBackALeft.IsChecked = false;
            ClothBackARight.IsChecked = false;
            ClothFrontALeft.IsChecked = false;
            ClothFrontARight.IsChecked = false;
            ClothSideALeft.IsChecked = false;
            ClothSideARight.IsChecked = false;
            KneeLeft.IsChecked = false;
            KneeRight.IsChecked = false;
            BreastLeft.IsChecked = false;
            BreastRight.IsChecked = false;
            SpineC.IsChecked = false;
            ClothBackBLeft.IsChecked = false;
            ClothBackBRight.IsChecked = false;
            ClothFrontBLeft.IsChecked = false;
            ClothFrontBRight.IsChecked = false;
            ClothSideBLeft.IsChecked = false;
            ClothSideBRight.IsChecked = false;
            CalfLeft.IsChecked = false;
            CalfRight.IsChecked = false;
            ScabbardLeft.IsChecked = false;
            ScabbardRight.IsChecked = false;
            Neck.IsChecked = false;
            ClavicleLeft.IsChecked = false;
            ClavicleRight.IsChecked = false;
            ClothBackCLeft.IsChecked = false;
            ClothBackCRight.IsChecked = false;
            ClothFrontCLeft.IsChecked = false;
            ClothFrontCRight.IsChecked = false;
            ClothSideCLeft.IsChecked = false;
            ClothSideCRight.IsChecked = false;
            PoleynLeft.IsChecked = false;
            PoleynRight.IsChecked = false;
            FootLeft.IsChecked = false;
            FootRight.IsChecked = false;
            Head.IsChecked = false;
            ArmLeft.IsChecked = false;
            ArmRight.IsChecked = false;
            PauldronLeft.IsChecked = false;
            PauldronRight.IsChecked = false;
            Unknown00.IsChecked = false;
            ToesLeft.IsChecked = false;
            ToesRight.IsChecked = false;
            HairA.IsChecked = false;
            HairFrontLeft.IsChecked = false;
            HairFrontRight.IsChecked = false;
            EarLeft.IsChecked = false;
            EarRight.IsChecked = false;
            ForearmLeft.IsChecked = false;
            ForearmRight.IsChecked = false;
            ShoulderLeft.IsChecked = false;
            ShoulderRight.IsChecked = false;
            HairB.IsChecked = false;
            HandLeft.IsChecked = false;
            HandRight.IsChecked = false;
            ShieldLeft.IsChecked = false;
            ShieldRight.IsChecked = false;
            EarringALeft.IsChecked = false;
            EarringARight.IsChecked = false;
            ElbowLeft.IsChecked = false;
            ElbowRight.IsChecked = false;
            CouterLeft.IsChecked = false;
            CouterRight.IsChecked = false;
            WristLeft.IsChecked = false;
            WristRight.IsChecked = false;
            IndexALeft.IsChecked = false;
            IndexARight.IsChecked = false;
            PinkyALeft.IsChecked = false;
            PinkyARight.IsChecked = false;
            RingALeft.IsChecked = false;
            RingARight.IsChecked = false;
            MiddleALeft.IsChecked = false;
            MiddleARight.IsChecked = false;
            ThumbALeft.IsChecked = false;
            ThumbARight.IsChecked = false;
            WeaponLeft.IsChecked = false;
            WeaponRight.IsChecked = false;
            EarringBLeft.IsChecked = false;
            EarringBRight.IsChecked = false;
            IndexBLeft.IsChecked = false;
            IndexBRight.IsChecked = false;
            PinkyBLeft.IsChecked = false;
            PinkyBRight.IsChecked = false;
            RingBLeft.IsChecked = false;
            RingBRight.IsChecked = false;
            MiddleBLeft.IsChecked = false;
            MiddleBRight.IsChecked = false;
            ThumbBLeft.IsChecked = false;
            ThumbBRight.IsChecked = false;
            TailA.IsChecked = false;
            TailB.IsChecked = false;
            TailC.IsChecked = false;
            TailD.IsChecked = false;
            TailE.IsChecked = false;
            RootHead.IsChecked = false;
            Jaw.IsChecked = false;
            EyelidLowerLeft.IsChecked = false;
            EyelidLowerRight.IsChecked = false;
            EyeLeft.IsChecked = false;
            EyeRight.IsChecked = false;
            Nose.IsChecked = false;
            CheekLeft.IsChecked = false;
            HrothWhiskersLeft.IsChecked = false;
            CheekRight.IsChecked = false;
            HrothWhiskersRight.IsChecked = false;
            LipsLeft.IsChecked = false;
            LipsRight.IsChecked = false;
            EyebrowLeft.IsChecked = false;
            EyebrowRight.IsChecked = false;
            Bridge.IsChecked = false;
            BrowLeft.IsChecked = false;
            BrowRight.IsChecked = false;
            LipUpperA.IsChecked = false;
            EyelidUpperLeft.IsChecked = false;
            EyelidUpperRight.IsChecked = false;
            LipLowerA.IsChecked = false;
            LipUpperB.IsChecked = false;
            LipLowerB.IsChecked = false;
            HrothWhiskersLeft.IsChecked = false;
            HrothWhiskersRight.IsChecked = false;
            VieraEarALeft.IsChecked = false;
            VieraEarARight.IsChecked = false;
            VieraEarBLeft.IsChecked = false;
            VieraEarBRight.IsChecked = false;
            ExHairA.IsChecked = false;
            ExHairB.IsChecked = false;
            ExHairC.IsChecked = false;
            ExHairD.IsChecked = false;
            ExHairE.IsChecked = false;
            ExHairF.IsChecked = false;
            ExHairG.IsChecked = false;
            ExHairH.IsChecked = false;
            ExHairI.IsChecked = false;
            ExHairJ.IsChecked = false;
            ExHairK.IsChecked = false;
            ExHairL.IsChecked = false;
            ExMetA.IsChecked = false;
            ExMetB.IsChecked = false;
            ExMetC.IsChecked = false;
            ExMetD.IsChecked = false;
            ExMetE.IsChecked = false;
            ExMetF.IsChecked = false;
            ExMetG.IsChecked = false;
            ExMetH.IsChecked = false;
            ExMetI.IsChecked = false;
            ExMetJ.IsChecked = false;
            ExMetK.IsChecked = false;
            ExMetL.IsChecked = false;
            ExMetM.IsChecked = false;
            ExMetN.IsChecked = false;
            ExMetO.IsChecked = false;
            ExMetP.IsChecked = false;
            ExMetQ.IsChecked = false;
            ExMetR.IsChecked = false;
            ExTopA.IsChecked = false;
            ExTopB.IsChecked = false;
            ExTopC.IsChecked = false;
            ExTopD.IsChecked = false;
            ExTopE.IsChecked = false;
            ExTopF.IsChecked = false;
            ExTopG.IsChecked = false;
            ExTopH.IsChecked = false;
            ExTopI.IsChecked = false;
        }
        private void EnableAll()
        {
            PhysicsButton.IsEnabled = true;
            TertiaryButton.IsEnabled = true;
            //Root.IsEnabled = true;
            //Abdomen.IsEnabled = true;
            //Throw.IsEnabled = true;
            Waist.IsEnabled = true;
            SpineA.IsEnabled = true;
            LegLeft.IsEnabled = true;
            LegRight.IsEnabled = true;
            HolsterLeft.IsEnabled = true;
            HolsterRight.IsEnabled = true;
            SheatheLeft.IsEnabled = true;
            SheatheRight.IsEnabled = true;
            SpineB.IsEnabled = true;
            ClothBackALeft.IsEnabled = true;
            ClothBackARight.IsEnabled = true;
            ClothFrontALeft.IsEnabled = true;
            ClothFrontARight.IsEnabled = true;
            ClothSideALeft.IsEnabled = true;
            ClothSideARight.IsEnabled = true;
            KneeLeft.IsEnabled = true;
            KneeRight.IsEnabled = true;
            BreastLeft.IsEnabled = true;
            BreastRight.IsEnabled = true;
            SpineC.IsEnabled = true;
            ClothBackBLeft.IsEnabled = true;
            ClothBackBRight.IsEnabled = true;
            ClothFrontBLeft.IsEnabled = true;
            ClothFrontBRight.IsEnabled = true;
            ClothSideBLeft.IsEnabled = true;
            ClothSideBRight.IsEnabled = true;
            CalfLeft.IsEnabled = true;
            CalfRight.IsEnabled = true;
            ScabbardLeft.IsEnabled = true;
            ScabbardRight.IsEnabled = true;
            Neck.IsEnabled = true;
            ClavicleLeft.IsEnabled = true;
            ClavicleRight.IsEnabled = true;
            ClothBackCLeft.IsEnabled = true;
            ClothBackCRight.IsEnabled = true;
            ClothFrontCLeft.IsEnabled = true;
            ClothFrontCRight.IsEnabled = true;
            ClothSideCLeft.IsEnabled = true;
            ClothSideCRight.IsEnabled = true;
            PoleynLeft.IsEnabled = true;
            PoleynRight.IsEnabled = true;
            FootLeft.IsEnabled = true;
            FootRight.IsEnabled = true;
            Head.IsEnabled = true;
            ArmLeft.IsEnabled = true;
            ArmRight.IsEnabled = true;
            PauldronLeft.IsEnabled = true;
            PauldronRight.IsEnabled = true;
            Unknown00.IsEnabled = true;
            ToesLeft.IsEnabled = true;
            ToesRight.IsEnabled = true;
            HairA.IsEnabled = true;
            HairFrontLeft.IsEnabled = true;
            HairFrontRight.IsEnabled = true;
            EarLeft.IsEnabled = true;
            EarRight.IsEnabled = true;
            ForearmLeft.IsEnabled = true;
            ForearmRight.IsEnabled = true;
            ShoulderLeft.IsEnabled = true;
            ShoulderRight.IsEnabled = true;
            HairB.IsEnabled = true;
            HandLeft.IsEnabled = true;
            HandRight.IsEnabled = true;
            ShieldLeft.IsEnabled = true;
            ShieldRight.IsEnabled = true;
            EarringALeft.IsEnabled = true;
            EarringARight.IsEnabled = true;
            ElbowLeft.IsEnabled = true;
            ElbowRight.IsEnabled = true;
            CouterLeft.IsEnabled = true;
            CouterRight.IsEnabled = true;
            WristLeft.IsEnabled = true;
            WristRight.IsEnabled = true;
            IndexALeft.IsEnabled = true;
            IndexARight.IsEnabled = true;
            PinkyALeft.IsEnabled = true;
            PinkyARight.IsEnabled = true;
            RingALeft.IsEnabled = true;
            RingARight.IsEnabled = true;
            MiddleALeft.IsEnabled = true;
            MiddleARight.IsEnabled = true;
            ThumbALeft.IsEnabled = true;
            ThumbARight.IsEnabled = true;
            WeaponLeft.IsEnabled = true;
            WeaponRight.IsEnabled = true;
            EarringBLeft.IsEnabled = true;
            EarringBRight.IsEnabled = true;
            IndexBLeft.IsEnabled = true;
            IndexBRight.IsEnabled = true;
            PinkyBLeft.IsEnabled = true;
            PinkyBRight.IsEnabled = true;
            RingBLeft.IsEnabled = true;
            RingBRight.IsEnabled = true;
            MiddleBLeft.IsEnabled = true;
            MiddleBRight.IsEnabled = true;
            ThumbBLeft.IsEnabled = true;
            ThumbBRight.IsEnabled = true;
            //TailA.IsEnabled = true;
            //TailB.IsEnabled = true;
            //TailC.IsEnabled = true;
            //TailD.IsEnabled = true;
            //TailE.IsEnabled = true;
            //RootHead.IsEnabled = true;
            Jaw.IsEnabled = true;
            EyelidLowerLeft.IsEnabled = true;
            EyelidLowerRight.IsEnabled = true;
            EyeLeft.IsEnabled = true;
            EyeRight.IsEnabled = true;
            Nose.IsEnabled = true;
            CheekLeft.IsEnabled = true;
            CheekRight.IsEnabled = true;
            LipsLeft.IsEnabled = true;
            LipsRight.IsEnabled = true;
            EyebrowLeft.IsEnabled = true;
            EyebrowRight.IsEnabled = true;
            Bridge.IsEnabled = true;
            BrowLeft.IsEnabled = true;
            BrowRight.IsEnabled = true;
            LipUpperA.IsEnabled = true;
            EyelidUpperLeft.IsEnabled = true;
            EyelidUpperRight.IsEnabled = true;
            LipLowerA.IsEnabled = true;
            LipUpperB.IsEnabled = true;
            LipLowerB.IsEnabled = true;
            //HrothWhiskersLeft.IsEnabled = true;
            //HrothWhiskersRight.IsEnabled = true;
            //VieraEarALeft.IsEnabled = true;
            //VieraEarARight.IsEnabled = true;
            //VieraEarBLeft.IsEnabled = true;
            //VieraEarBRight.IsEnabled = true;
            //ExHairA.IsEnabled = true;
            //ExHairB.IsEnabled = true;
            //ExHairC.IsEnabled = true;
            //ExHairD.IsEnabled = true;
            //ExHairE.IsEnabled = true;
            //ExHairF.IsEnabled = true;
            //ExHairG.IsEnabled = true;
            //ExHairH.IsEnabled = true;
            //ExHairI.IsEnabled = true;
            //ExHairJ.IsEnabled = true;
            //ExHairK.IsEnabled = true;
            //ExHairL.IsEnabled = true;
            //ExMetA.IsEnabled = true;
            //ExMetB.IsEnabled = true;
            //ExMetC.IsEnabled = true;
            //ExMetD.IsEnabled = true;
            //ExMetE.IsEnabled = true;
            //ExMetF.IsEnabled = true;
            //ExMetG.IsEnabled = true;
            //ExMetH.IsEnabled = true;
            //ExMetI.IsEnabled = true;
            //ExMetJ.IsEnabled = true;
            //ExMetK.IsEnabled = true;
            //ExMetL.IsEnabled = true;
            //ExMetM.IsEnabled = true;
            //ExMetN.IsEnabled = true;
            //ExMetO.IsEnabled = true;
            //ExMetP.IsEnabled = true;
            //ExMetQ.IsEnabled = true;
            //ExMetR.IsEnabled = true;
            //ExTopA.IsEnabled = true;
            //ExTopB.IsEnabled = true;
            //ExTopC.IsEnabled = true;
            //ExTopD.IsEnabled = true;
            //ExTopE.IsEnabled = true;
            //ExTopF.IsEnabled = true;
            //ExTopG.IsEnabled = true;
            //ExTopH.IsEnabled = true;
            //ExTopI.IsEnabled = true;

            //if (HeadSaved) LoadHeadButton.IsEnabled = true;
            //if (TorsoSaved) LoadTorsoButton.IsEnabled = true;
            //if (LeftArmSaved) LoadLArmButton.IsEnabled = true;
            //if (RightArmSaved) LoadRArmButton.IsEnabled = true;
            //if (LeftLegSaved) LoadLLegButton.IsEnabled = true;
            //if (RightLegSaved) LoadRLegButton.IsEnabled = true;
        }
        private void DisableAll()
        {
            PhysicsButton.IsEnabled = false;
            TertiaryButton.IsEnabled = false;
            Root.IsEnabled = false;
            Abdomen.IsEnabled = false;
            Throw.IsEnabled = false;
            Waist.IsEnabled = false;
            SpineA.IsEnabled = false;
            LegLeft.IsEnabled = false;
            LegRight.IsEnabled = false;
            HolsterLeft.IsEnabled = false;
            HolsterRight.IsEnabled = false;
            SheatheLeft.IsEnabled = false;
            SheatheRight.IsEnabled = false;
            SpineB.IsEnabled = false;
            ClothBackALeft.IsEnabled = false;
            ClothBackARight.IsEnabled = false;
            ClothFrontALeft.IsEnabled = false;
            ClothFrontARight.IsEnabled = false;
            ClothSideALeft.IsEnabled = false;
            ClothSideARight.IsEnabled = false;
            KneeLeft.IsEnabled = false;
            KneeRight.IsEnabled = false;
            BreastLeft.IsEnabled = false;
            BreastRight.IsEnabled = false;
            SpineC.IsEnabled = false;
            ClothBackBLeft.IsEnabled = false;
            ClothBackBRight.IsEnabled = false;
            ClothFrontBLeft.IsEnabled = false;
            ClothFrontBRight.IsEnabled = false;
            ClothSideBLeft.IsEnabled = false;
            ClothSideBRight.IsEnabled = false;
            CalfLeft.IsEnabled = false;
            CalfRight.IsEnabled = false;
            ScabbardLeft.IsEnabled = false;
            ScabbardRight.IsEnabled = false;
            Neck.IsEnabled = false;
            ClavicleLeft.IsEnabled = false;
            ClavicleRight.IsEnabled = false;
            ClothBackCLeft.IsEnabled = false;
            ClothBackCRight.IsEnabled = false;
            ClothFrontCLeft.IsEnabled = false;
            ClothFrontCRight.IsEnabled = false;
            ClothSideCLeft.IsEnabled = false;
            ClothSideCRight.IsEnabled = false;
            PoleynLeft.IsEnabled = false;
            PoleynRight.IsEnabled = false;
            FootLeft.IsEnabled = false;
            FootRight.IsEnabled = false;
            Head.IsEnabled = false;
            ArmLeft.IsEnabled = false;
            ArmRight.IsEnabled = false;
            PauldronLeft.IsEnabled = false;
            PauldronRight.IsEnabled = false;
            Unknown00.IsEnabled = false;
            ToesLeft.IsEnabled = false;
            ToesRight.IsEnabled = false;
            HairA.IsEnabled = false;
            HairFrontLeft.IsEnabled = false;
            HairFrontRight.IsEnabled = false;
            EarLeft.IsEnabled = false;
            EarRight.IsEnabled = false;
            ForearmLeft.IsEnabled = false;
            ForearmRight.IsEnabled = false;
            ShoulderLeft.IsEnabled = false;
            ShoulderRight.IsEnabled = false;
            HairB.IsEnabled = false;
            HandLeft.IsEnabled = false;
            HandRight.IsEnabled = false;
            ShieldLeft.IsEnabled = false;
            ShieldRight.IsEnabled = false;
            EarringALeft.IsEnabled = false;
            EarringARight.IsEnabled = false;
            ElbowLeft.IsEnabled = false;
            ElbowRight.IsEnabled = false;
            CouterLeft.IsEnabled = false;
            CouterRight.IsEnabled = false;
            WristLeft.IsEnabled = false;
            WristRight.IsEnabled = false;
            IndexALeft.IsEnabled = false;
            IndexARight.IsEnabled = false;
            PinkyALeft.IsEnabled = false;
            PinkyARight.IsEnabled = false;
            RingALeft.IsEnabled = false;
            RingARight.IsEnabled = false;
            MiddleALeft.IsEnabled = false;
            MiddleARight.IsEnabled = false;
            ThumbALeft.IsEnabled = false;
            ThumbARight.IsEnabled = false;
            WeaponLeft.IsEnabled = false;
            WeaponRight.IsEnabled = false;
            EarringBLeft.IsEnabled = false;
            EarringBRight.IsEnabled = false;
            IndexBLeft.IsEnabled = false;
            IndexBRight.IsEnabled = false;
            PinkyBLeft.IsEnabled = false;
            PinkyBRight.IsEnabled = false;
            RingBLeft.IsEnabled = false;
            RingBRight.IsEnabled = false;
            MiddleBLeft.IsEnabled = false;
            MiddleBRight.IsEnabled = false;
            ThumbBLeft.IsEnabled = false;
            ThumbBRight.IsEnabled = false;
            TailA.IsEnabled = false;
            TailB.IsEnabled = false;
            TailC.IsEnabled = false;
            TailD.IsEnabled = false;
            TailE.IsEnabled = false;
            RootHead.IsEnabled = false;
            Jaw.IsEnabled = false;
            EyelidLowerLeft.IsEnabled = false;
            EyelidLowerRight.IsEnabled = false;
            EyeLeft.IsEnabled = false;
            EyeRight.IsEnabled = false;
            Nose.IsEnabled = false;
            CheekLeft.IsEnabled = false;
            HrothWhiskersLeft.IsEnabled = false;
            CheekRight.IsEnabled = false;
            HrothWhiskersRight.IsEnabled = false;
            LipsLeft.IsEnabled = false;
            LipsRight.IsEnabled = false;
            EyebrowLeft.IsEnabled = false;
            EyebrowRight.IsEnabled = false;
            Bridge.IsEnabled = false;
            BrowLeft.IsEnabled = false;
            BrowRight.IsEnabled = false;
            LipUpperA.IsEnabled = false;
            EyelidUpperLeft.IsEnabled = false;
            EyelidUpperRight.IsEnabled = false;
            LipLowerA.IsEnabled = false;
            LipUpperB.IsEnabled = false;
            LipLowerB.IsEnabled = false;
            HrothWhiskersLeft.IsEnabled = false;
            HrothWhiskersRight.IsEnabled = false;
            VieraEarALeft.IsEnabled = false;
            VieraEarARight.IsEnabled = false;
            VieraEarBLeft.IsEnabled = false;
            VieraEarBRight.IsEnabled = false;
            ExHairA.IsEnabled = false;
            ExHairB.IsEnabled = false;
            ExHairC.IsEnabled = false;
            ExHairD.IsEnabled = false;
            ExHairE.IsEnabled = false;
            ExHairF.IsEnabled = false;
            ExHairG.IsEnabled = false;
            ExHairH.IsEnabled = false;
            ExHairI.IsEnabled = false;
            ExHairJ.IsEnabled = false;
            ExHairK.IsEnabled = false;
            ExHairL.IsEnabled = false;
            ExMetA.IsEnabled = false;
            ExMetB.IsEnabled = false;
            ExMetC.IsEnabled = false;
            ExMetD.IsEnabled = false;
            ExMetE.IsEnabled = false;
            ExMetF.IsEnabled = false;
            ExMetG.IsEnabled = false;
            ExMetH.IsEnabled = false;
            ExMetI.IsEnabled = false;
            ExMetJ.IsEnabled = false;
            ExMetK.IsEnabled = false;
            ExMetL.IsEnabled = false;
            ExMetM.IsEnabled = false;
            ExMetN.IsEnabled = false;
            ExMetO.IsEnabled = false;
            ExMetP.IsEnabled = false;
            ExMetQ.IsEnabled = false;
            ExMetR.IsEnabled = false;
            ExTopA.IsEnabled = false;
            ExTopB.IsEnabled = false;
            ExTopC.IsEnabled = false;
            ExTopD.IsEnabled = false;
            ExTopE.IsEnabled = false;
            ExTopF.IsEnabled = false;
            ExTopG.IsEnabled = false;
            ExTopH.IsEnabled = false;
            ExTopI.IsEnabled = false;

            //LoadHeadButton.IsEnabled = false;
            //LoadTorsoButton.IsEnabled = false;
            //LoadLArmButton.IsEnabled = false;
            //LoadRArmButton.IsEnabled = false;
            //LoadLLegButton.IsEnabled = false;
            //LoadRLegButton.IsEnabled = false;
        }
        private void EnableTertiary(object sender, RoutedEventArgs e)
        {
            DisableTertiary();

            if (CharacterDetails.Race.value == 4 || CharacterDetails.Race.value == 6 || CharacterDetails.Race.value == 7)
            {
                TailA.IsEnabled = true;
                TailB.IsEnabled = true;
                TailC.IsEnabled = true;
                TailD.IsEnabled = true;
                TailE.IsEnabled = true;
            }
            if (CharacterDetails.Race.value == 7)
            {
                HrothWhiskersLeft.IsEnabled = true;
                HrothWhiskersRight.IsEnabled = true;
            }
            if (CharacterDetails.Race.value == 8)
            {
                VieraEarALeft.IsEnabled = true;
                VieraEarARight.IsEnabled = true;
                VieraEarBLeft.IsEnabled = true;
                VieraEarBRight.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
            {
                ExHairA.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
            {
                ExHairB.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
            {
                ExHairC.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
            {
                ExHairD.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
            {
                ExHairE.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
            {
                ExHairF.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
            {
                ExHairG.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
            {
                ExHairH.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
            {
                ExHairI.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
            {
                ExHairJ.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
            {
                ExHairK.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
            {
                ExHairL.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
            {
                ExMetA.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
            {
                ExMetB.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
            {
                ExMetC.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
            {
                ExMetD.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
            {
                ExMetE.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
            {
                ExMetF.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
            {
                ExMetG.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
            {
                ExMetH.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
            {
                ExMetI.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
            {
                ExMetJ.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
            {
                ExMetK.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
            {
                ExMetL.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
            {
                ExMetM.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
            {
                ExMetN.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
            {
                ExMetO.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
            {
                ExMetP.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
            {
                ExMetQ.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
            {
                ExMetR.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
            {
                ExTopA.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
            {
                ExTopB.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
            {
                ExTopC.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
            {
                ExTopD.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
            {
                ExTopE.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
            {
                ExTopF.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
            {
                ExTopG.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
            {
                ExTopH.IsEnabled = true;
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
            {
                ExTopI.IsEnabled = true;
            }
        }
        private void DisableTertiary()
        {
            TailA.IsEnabled = false;
            TailB.IsEnabled = false;
            TailC.IsEnabled = false;
            TailD.IsEnabled = false;
            TailE.IsEnabled = false;
            HrothWhiskersLeft.IsEnabled = false;
            HrothWhiskersRight.IsEnabled = false;
            VieraEarALeft.IsEnabled = false;
            VieraEarARight.IsEnabled = false;
            VieraEarBLeft.IsEnabled = false;
            VieraEarBRight.IsEnabled = false;
            ExHairA.IsEnabled = false;
            ExHairB.IsEnabled = false;
            ExHairC.IsEnabled = false;
            ExHairD.IsEnabled = false;
            ExHairE.IsEnabled = false;
            ExHairF.IsEnabled = false;
            ExHairG.IsEnabled = false;
            ExHairH.IsEnabled = false;
            ExHairI.IsEnabled = false;
            ExHairJ.IsEnabled = false;
            ExHairK.IsEnabled = false;
            ExHairL.IsEnabled = false;
            ExMetA.IsEnabled = false;
            ExMetB.IsEnabled = false;
            ExMetC.IsEnabled = false;
            ExMetD.IsEnabled = false;
            ExMetE.IsEnabled = false;
            ExMetF.IsEnabled = false;
            ExMetG.IsEnabled = false;
            ExMetH.IsEnabled = false;
            ExMetI.IsEnabled = false;
            ExMetJ.IsEnabled = false;
            ExMetK.IsEnabled = false;
            ExMetL.IsEnabled = false;
            ExMetM.IsEnabled = false;
            ExMetN.IsEnabled = false;
            ExMetO.IsEnabled = false;
            ExMetP.IsEnabled = false;
            ExMetQ.IsEnabled = false;
            ExMetR.IsEnabled = false;
            ExTopA.IsEnabled = false;
            ExTopB.IsEnabled = false;
            ExTopC.IsEnabled = false;
            ExTopD.IsEnabled = false;
            ExTopE.IsEnabled = false;
            ExTopF.IsEnabled = false;
            ExTopG.IsEnabled = false;
            ExTopH.IsEnabled = false;
            ExTopI.IsEnabled = false;
        }

        public class BoneSaves
        {
            public string Description { get; set; }
            public string DateCreated { get; set; }

            public string Root { get; set; }
            public string Abdomen { get; set; }
            public string Throw { get; set; }
            public string Waist { get; set; }
            public string SpineA { get; set; }
            public string LegLeft { get; set; }
            public string LegRight { get; set; }
            public string HolsterLeft { get; set; }
            public string HolsterRight { get; set; }
            public string SheatheLeft { get; set; }
            public string SheatheRight { get; set; }
            public string SpineB { get; set; }
            public string ClothBackALeft { get; set; }
            public string ClothBackARight { get; set; }
            public string ClothFrontALeft { get; set; }
            public string ClothFrontARight { get; set; }
            public string ClothSideALeft { get; set; }
            public string ClothSideARight { get; set; }
            public string KneeLeft { get; set; }
            public string KneeRight { get; set; }
            public string BreastLeft { get; set; }
            public string BreastRight { get; set; }
            public string SpineC { get; set; }
            public string ClothBackBLeft { get; set; }
            public string ClothBackBRight { get; set; }
            public string ClothFrontBLeft { get; set; }
            public string ClothFrontBRight { get; set; }
            public string ClothSideBLeft { get; set; }
            public string ClothSideBRight { get; set; }
            public string CalfLeft { get; set; }
            public string CalfRight { get; set; }
            public string ScabbardLeft { get; set; }
            public string ScabbardRight { get; set; }
            public string Neck { get; set; }
            public string ClavicleLeft { get; set; }
            public string ClavicleRight { get; set; }
            public string ClothBackCLeft { get; set; }
            public string ClothBackCRight { get; set; }
            public string ClothFrontCLeft { get; set; }
            public string ClothFrontCRight { get; set; }
            public string ClothSideCLeft { get; set; }
            public string ClothSideCRight { get; set; }
            public string PoleynLeft { get; set; }
            public string PoleynRight { get; set; }
            public string FootLeft { get; set; }
            public string FootRight { get; set; }
            public string Head { get; set; }
            public string ArmLeft { get; set; }
            public string ArmRight { get; set; }
            public string PauldronLeft { get; set; }
            public string PauldronRight { get; set; }
            public string Unknown00 { get; set; }
            public string ToesLeft { get; set; }
            public string ToesRight { get; set; }
            public string HairA { get; set; }
            public string HairFrontLeft { get; set; }
            public string HairFrontRight { get; set; }
            public string EarLeft { get; set; }
            public string EarRight { get; set; }
            public string ForearmLeft { get; set; }
            public string ForearmRight { get; set; }
            public string ShoulderLeft { get; set; }
            public string ShoulderRight { get; set; }
            public string HairB { get; set; }
            public string HandLeft { get; set; }
            public string HandRight { get; set; }
            public string ShieldLeft { get; set; }
            public string ShieldRight { get; set; }
            public string EarringALeft { get; set; }
            public string EarringARight { get; set; }
            public string ElbowLeft { get; set; }
            public string ElbowRight { get; set; }
            public string CouterLeft { get; set; }
            public string CouterRight { get; set; }
            public string WristLeft { get; set; }
            public string WristRight { get; set; }
            public string IndexALeft { get; set; }
            public string IndexARight { get; set; }
            public string PinkyALeft { get; set; }
            public string PinkyARight { get; set; }
            public string RingALeft { get; set; }
            public string RingARight { get; set; }
            public string MiddleALeft { get; set; }
            public string MiddleARight { get; set; }
            public string ThumbALeft { get; set; }
            public string ThumbARight { get; set; }
            public string WeaponLeft { get; set; }
            public string WeaponRight { get; set; }
            public string EarringBLeft { get; set; }
            public string EarringBRight { get; set; }
            public string IndexBLeft { get; set; }
            public string IndexBRight { get; set; }
            public string PinkyBLeft { get; set; }
            public string PinkyBRight { get; set; }
            public string RingBLeft { get; set; }
            public string RingBRight { get; set; }
            public string MiddleBLeft { get; set; }
            public string MiddleBRight { get; set; }
            public string ThumbBLeft { get; set; }
            public string ThumbBRight { get; set; }
            public string TailA { get; set; }
            public string TailB { get; set; }
            public string TailC { get; set; }
            public string TailD { get; set; }
            public string TailE { get; set; }
            public string RootHead { get; set; }
            public string Jaw { get; set; }
            public string EyelidLowerLeft { get; set; }
            public string EyelidLowerRight { get; set; }
            public string EyeLeft { get; set; }
            public string EyeRight { get; set; }
            public string Nose { get; set; }
            public string CheekLeft { get; set; }
            public string HrothWhiskersLeft { get; set; }
            public string CheekRight { get; set; }
            public string HrothWhiskersRight { get; set; }
            public string LipsLeft { get; set; }
            public string HrothEyebrowLeft { get; set; }
            public string LipsRight { get; set; }
            public string HrothEyebrowRight { get; set; }
            public string EyebrowLeft { get; set; }
            public string HrothBridge { get; set; }
            public string EyebrowRight { get; set; }
            public string HrothBrowLeft { get; set; }
            public string Bridge { get; set; }
            public string HrothBrowRight { get; set; }
            public string BrowLeft { get; set; }
            public string HrothJawUpper { get; set; }
            public string BrowRight { get; set; }
            public string HrothLipUpper { get; set; }
            public string LipUpperA { get; set; }
            public string HrothEyelidUpperLeft { get; set; }
            public string EyelidUpperLeft { get; set; }
            public string HrothEyelidUpperRight { get; set; }
            public string EyelidUpperRight { get; set; }
            public string HrothLipsLeft { get; set; }
            public string LipLowerA { get; set; }
            public string HrothLipsRight { get; set; }
            public string VieraEar01ALeft { get; set; }
            public string LipUpperB { get; set; }
            public string HrothLipUpperLeft { get; set; }
            public string VieraEar01ARight { get; set; }
            public string LipLowerB { get; set; }
            public string HrothLipUpperRight { get; set; }
            public string VieraEar02ALeft { get; set; }
            public string HrothLipLower { get; set; }
            public string VieraEar02ARight { get; set; }
            public string VieraEar03ALeft { get; set; }
            public string VieraEar03ARight { get; set; }
            public string VieraEar04ALeft { get; set; }
            public string VieraEar04ARight { get; set; }
            public string VieraLipLowerA { get; set; }
            public string VieraLipUpperB { get; set; }
            public string VieraEar01BLeft { get; set; }
            public string VieraEar01BRight { get; set; }
            public string VieraEar02BLeft { get; set; }
            public string VieraEar02BRight { get; set; }
            public string VieraEar03BLeft { get; set; }
            public string VieraEar03BRight { get; set; }
            public string VieraEar04BLeft { get; set; }
            public string VieraEar04BRight { get; set; }
            public string VieraLipLowerB { get; set; }
            public string ExRootHair { get; set; }
            public string ExHairA { get; set; }
            public string ExHairB { get; set; }
            public string ExHairC { get; set; }
            public string ExHairD { get; set; }
            public string ExHairE { get; set; }
            public string ExHairF { get; set; }
            public string ExHairG { get; set; }
            public string ExHairH { get; set; }
            public string ExHairI { get; set; }
            public string ExHairJ { get; set; }
            public string ExHairK { get; set; }
            public string ExHairL { get; set; }
            public string ExRootMet { get; set; }
            public string ExMetA { get; set; }
            public string ExMetB { get; set; }
            public string ExMetC { get; set; }
            public string ExMetD { get; set; }
            public string ExMetE { get; set; }
            public string ExMetF { get; set; }
            public string ExMetG { get; set; }
            public string ExMetH { get; set; }
            public string ExMetI { get; set; }
            public string ExMetJ { get; set; }
            public string ExMetK { get; set; }
            public string ExMetL { get; set; }
            public string ExMetM { get; set; }
            public string ExMetN { get; set; }
            public string ExMetO { get; set; }
            public string ExMetP { get; set; }
            public string ExMetQ { get; set; }
            public string ExMetR { get; set; }
            public string ExRootTop { get; set; }
            public string ExTopA { get; set; }
            public string ExTopB { get; set; }
            public string ExTopC { get; set; }
            public string ExTopD { get; set; }
            public string ExTopE { get; set; }
            public string ExTopF { get; set; }
            public string ExTopG { get; set; }
            public string ExTopH { get; set; }
            public string ExTopI { get; set; }

        }
        private void SaveCMP_Click(object sender, RoutedEventArgs e)
        {
            MainWindow.CurrentlySaving = true;
            SaveFileDialog dig = new SaveFileDialog();
            dig.InitialDirectory = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDoc‌​uments), App.ToolBin, "Saves");
            dig.Filter = "Concept Matrix Pose File(*.cmp)|*.cmp";
            if (dig.ShowDialog() == true)
            {
                string extension = System.IO.Path.GetExtension(".cmp");
                string result = dig.SafeFileName.Substring(0, dig.SafeFileName.Length - extension.Length);
                BoneSaves BoneSaver = new BoneSaves();
                BoneSaver.Description = result;
                BoneSaver.DateCreated = DateTime.Now.ToLocalTime().ToString();

                #region Head
                BoneSaver.Head = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), 16));
                BoneSaver.EarLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), 16));
                BoneSaver.EarRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), 16));
                BoneSaver.RootHead = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RootHead_X), 16));
                BoneSaver.Jaw = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), 16));
                BoneSaver.EyelidLowerLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), 16));
                BoneSaver.EyelidLowerRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), 16));
                BoneSaver.EyeLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), 16));
                BoneSaver.EyeRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), 16));
                BoneSaver.Nose = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), 16));
                BoneSaver.CheekLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), 16));
                BoneSaver.HrothWhiskersLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), 16));
                BoneSaver.CheekRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), 16));
                BoneSaver.HrothWhiskersRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), 16));
                BoneSaver.LipsLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), 16));
                BoneSaver.HrothEyebrowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), 16));
                BoneSaver.LipsRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), 16));
                BoneSaver.HrothEyebrowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), 16));
                BoneSaver.EyebrowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), 16));
                BoneSaver.HrothBridge = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), 16));
                BoneSaver.EyebrowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), 16));
                BoneSaver.HrothBrowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), 16));
                BoneSaver.Bridge = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), 16));
                BoneSaver.HrothBrowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), 16));
                BoneSaver.BrowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), 16));
                BoneSaver.HrothJawUpper = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), 16));
                BoneSaver.BrowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), 16));
                BoneSaver.HrothLipUpper = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), 16));
                BoneSaver.LipUpperA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), 16));
                BoneSaver.HrothEyelidUpperLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), 16));
                BoneSaver.EyelidUpperLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), 16));
                BoneSaver.HrothEyelidUpperRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), 16));
                BoneSaver.EyelidUpperRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), 16));
                BoneSaver.HrothLipsLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), 16));
                BoneSaver.LipLowerA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), 16));
                BoneSaver.HrothLipsRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), 16));
                BoneSaver.VieraEar01ALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), 16));
                BoneSaver.LipUpperB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), 16));
                BoneSaver.HrothLipUpperLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), 16));
                BoneSaver.VieraEar01ARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), 16));
                BoneSaver.LipLowerB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), 16));
                BoneSaver.HrothLipUpperRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), 16));
                BoneSaver.VieraEar02ALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), 16));
                if (CharacterDetails.Race.value == 7 || CharacterDetails.Race.value == 8)
                {
                    BoneSaver.HrothLipLower = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), 16));
                    BoneSaver.VieraEar02ARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), 16));
                }
                if (CharacterDetails.Race.value == 8)
                {
                    BoneSaver.VieraEar03ALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), 16));
                    BoneSaver.VieraEar03ARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), 16));
                    BoneSaver.VieraEar04ALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), 16));
                    BoneSaver.VieraEar04ARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), 16));
                    BoneSaver.VieraLipLowerA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), 16));
                    BoneSaver.VieraLipUpperB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), 16));
                    BoneSaver.VieraEar01BLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), 16));
                    BoneSaver.VieraEar01BRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), 16));
                    BoneSaver.VieraEar02BLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), 16));
                    BoneSaver.VieraEar02BRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), 16));
                    BoneSaver.VieraEar03BLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), 16));
                    BoneSaver.VieraEar03BRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), 16));
                    BoneSaver.VieraEar04BLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), 16));
                    BoneSaver.VieraEar04BRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), 16));
                    BoneSaver.VieraLipLowerB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), 16));
                }
                #endregion
                #region Hair
                BoneSaver.HairA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), 16));
                BoneSaver.HairFrontLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), 16));
                BoneSaver.HairFrontRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), 16));
                BoneSaver.HairB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), 16));
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 1)
                {
                    BoneSaver.ExRootHair = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootHair_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
                {
                    BoneSaver.ExHairA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
                {
                    BoneSaver.ExHairB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
                {
                    BoneSaver.ExHairC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
                {
                    BoneSaver.ExHairD = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
                {
                    BoneSaver.ExHairE = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
                {
                    BoneSaver.ExHairF = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
                {
                    BoneSaver.ExHairG = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
                {
                    BoneSaver.ExHairH = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
                {
                    BoneSaver.ExHairI = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
                {
                    BoneSaver.ExHairJ = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
                {
                    BoneSaver.ExHairK = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
                {
                    BoneSaver.ExHairL = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), 16));
                }
                #endregion
                #region Earrings
                BoneSaver.EarringALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), 16));
                BoneSaver.EarringARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), 16));
                BoneSaver.EarringBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), 16));
                BoneSaver.EarringBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), 16));
                #endregion
                #region Body
                BoneSaver.SpineA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), 16));
                BoneSaver.SpineB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), 16));
                BoneSaver.BreastLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), 16));
                BoneSaver.BreastRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), 16));
                BoneSaver.SpineC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), 16));
                BoneSaver.ScabbardLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), 16));
                BoneSaver.ScabbardRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), 16));
                BoneSaver.Neck = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), 16));
                #endregion
                #region LeftArm
                BoneSaver.ClavicleLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), 16));
                BoneSaver.ArmLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), 16));
                BoneSaver.ArmRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
                BoneSaver.PauldronLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), 16));
                BoneSaver.ForearmLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), 16));
                BoneSaver.ShoulderLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), 16));
                BoneSaver.ShieldLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), 16));
                BoneSaver.ElbowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), 16));
                BoneSaver.CouterLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), 16));
                BoneSaver.WristLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), 16));
                #endregion
                #region RightArm
                BoneSaver.ClavicleRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), 16));
                BoneSaver.ArmRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
                BoneSaver.ArmRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
                BoneSaver.PauldronRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), 16));
                BoneSaver.ForearmRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), 16));
                BoneSaver.ShoulderRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), 16));
                BoneSaver.ShieldRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), 16));
                BoneSaver.ElbowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), 16));
                BoneSaver.CouterRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), 16));
                BoneSaver.WristRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), 16));
                #endregion
                #region Clothes
                BoneSaver.ClothBackALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), 16));
                BoneSaver.ClothBackARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), 16));
                BoneSaver.ClothFrontALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), 16));
                BoneSaver.ClothFrontARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), 16));
                BoneSaver.ClothSideALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), 16));
                BoneSaver.ClothSideARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), 16));
                BoneSaver.ClothBackBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), 16));
                BoneSaver.ClothBackBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), 16));
                BoneSaver.ClothFrontBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), 16));
                BoneSaver.ClothFrontBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), 16));
                BoneSaver.ClothSideBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), 16));
                BoneSaver.ClothSideBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), 16));
                BoneSaver.ClothBackCLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), 16));
                BoneSaver.ClothBackCRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), 16));
                BoneSaver.ClothFrontCLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), 16));
                BoneSaver.ClothFrontCRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), 16));
                BoneSaver.ClothSideCLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), 16));
                BoneSaver.ClothSideCRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), 16));
                #endregion
                #region Weapons
                BoneSaver.WeaponLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), 16));
                BoneSaver.WeaponRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), 16));
                #endregion
                #region LeftHand
                BoneSaver.HandLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), 16));
                BoneSaver.IndexALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), 16));
                BoneSaver.PinkyALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), 16));
                BoneSaver.RingALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), 16));
                BoneSaver.MiddleALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), 16));
                BoneSaver.ThumbALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), 16));
                BoneSaver.IndexBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), 16));
                BoneSaver.PinkyBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), 16));
                BoneSaver.RingBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), 16));
                BoneSaver.MiddleBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), 16));
                BoneSaver.ThumbBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), 16));
                #endregion
                #region RightHand
                BoneSaver.HandRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), 16));
                BoneSaver.IndexARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), 16));
                BoneSaver.PinkyARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), 16));
                BoneSaver.RingARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), 16));
                BoneSaver.MiddleARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), 16));
                BoneSaver.ThumbARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), 16));
                BoneSaver.IndexBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), 16));
                BoneSaver.PinkyBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), 16));
                BoneSaver.RingBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), 16));
                BoneSaver.MiddleBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), 16));
                BoneSaver.ThumbBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), 16));
                #endregion
                #region Waist
                BoneSaver.Waist = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), 16));
                BoneSaver.HolsterLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), 16));
                BoneSaver.HolsterRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), 16));
                BoneSaver.SheatheLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), 16));
                BoneSaver.SheatheRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), 16));
                if (CharacterDetails.Race.value == 4 || CharacterDetails.Race.value == 6 || CharacterDetails.Race.value == 7)
                {
                    BoneSaver.TailA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), 16));
                    BoneSaver.TailB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), 16));
                    BoneSaver.TailC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), 16));
                    BoneSaver.TailD = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), 16));
                    BoneSaver.TailE = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), 16));
                }
                #endregion
                #region LeftLeg
                BoneSaver.LegLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), 16));
                BoneSaver.KneeLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), 16));
                BoneSaver.CalfLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), 16));
                BoneSaver.PoleynLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), 16));
                BoneSaver.FootLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), 16));
                BoneSaver.ToesLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), 16));
                #endregion
                #region RightLeg
                BoneSaver.LegRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), 16));
                BoneSaver.KneeRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), 16));
                BoneSaver.CalfRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), 16));
                BoneSaver.PoleynRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), 16));
                BoneSaver.FootRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), 16));
                BoneSaver.ToesRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), 16));
                #endregion
                #region Helm
                if (m.readInt(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootMet_W)) > 0)
                {
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 1)
                    {
                        BoneSaver.ExRootMet = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootMet_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
                    {
                        BoneSaver.ExMetA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
                    {
                        BoneSaver.ExMetB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
                    {
                        BoneSaver.ExMetC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
                    {
                        BoneSaver.ExMetD = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
                    {
                        BoneSaver.ExMetE = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
                    {
                        BoneSaver.ExMetF = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
                    {
                        BoneSaver.ExMetG = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
                    {
                        BoneSaver.ExMetH = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
                    {
                        BoneSaver.ExMetI = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
                    {
                        BoneSaver.ExMetJ = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
                    {
                        BoneSaver.ExMetK = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
                    {
                        BoneSaver.ExMetL = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
                    {
                        BoneSaver.ExMetM = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
                    {
                        BoneSaver.ExMetN = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
                    {
                        BoneSaver.ExMetO = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
                    {
                        BoneSaver.ExMetP = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
                    {
                        BoneSaver.ExMetQ = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
                    {
                        BoneSaver.ExMetR = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), 16));
                    }
                }
                #endregion
                #region Top
                if (m.readInt(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootTop_W)) > 0)
                {
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 1)
                    {
                        BoneSaver.ExRootTop = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootTop_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
                    {
                        BoneSaver.ExTopA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
                    {
                        BoneSaver.ExTopB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
                    {
                        BoneSaver.ExTopC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
                    {
                        BoneSaver.ExTopD = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
                    {
                        BoneSaver.ExTopE = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
                    {
                        BoneSaver.ExTopF = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
                    {
                        BoneSaver.ExTopG = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
                    {
                        BoneSaver.ExTopH = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), 16));
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
                    {
                        BoneSaver.ExTopI = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), 16));
                    }
                }
                #endregion
                #region Other
                BoneSaver.Root = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Root_X), 16));
                BoneSaver.Abdomen = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Abdomen_X), 16));
                BoneSaver.Throw = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Throw_X), 16));
                BoneSaver.Unknown00 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Unknown00_X), 16));
                #endregion

                string details = JsonConvert.SerializeObject(BoneSaver, Formatting.Indented, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto });
                File.WriteAllText(dig.FileName, details);
                MainWindow.CurrentlySaving = false;
            }
            else MainWindow.CurrentlySaving = false;
        }
        private void LoadCMP_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog dig = new OpenFileDialog();
            dig.InitialDirectory = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDoc‌​uments), App.ToolBin, "Saves");
            dig.Filter = "Concept Matrix Pose File(*.cmp)|*.cmp";
            dig.DefaultExt = ".cmp";
            if (dig.ShowDialog() == true)
            {
                UncheckAll();
                EditModeButton.IsChecked = true;
                PhysicsButton.IsChecked = false;
                BoneSaves BoneLoader = JsonConvert.DeserializeObject<BoneSaves>(File.ReadAllText(dig.FileName));

                #region Head
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), MemoryManager.StringToByteArray(BoneLoader.Head.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), MemoryManager.StringToByteArray(BoneLoader.EarLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), MemoryManager.StringToByteArray(BoneLoader.EarRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), MemoryManager.StringToByteArray(BoneLoader.Jaw.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidLowerLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidLowerRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyeLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), MemoryManager.StringToByteArray(BoneLoader.EyeRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), MemoryManager.StringToByteArray(BoneLoader.Nose.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothWhiskersLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothWhiskersRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(BoneLoader.HrothBridge.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(BoneLoader.HrothJawUpper.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpper.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsLeft.Replace(" ", string.Empty)));
                if (BoneLoader.HrothLipLower != null || BoneLoader.VieraEar02ARight != null)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.LipLowerA.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperB.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.LipLowerB.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipLower.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ARight.Replace(" ", string.Empty)));
                }
                if (BoneLoader.VieraEar03ALeft != null)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03ALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03ARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04ALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04ARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerA.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01BLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01BRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02BLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02BRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03BLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03BRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04BLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04BRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerB.Replace(" ", string.Empty)));
                }
                #endregion
                #region Hair
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), MemoryManager.StringToByteArray(BoneLoader.HairA.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), MemoryManager.StringToByteArray(BoneLoader.HairFrontLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), MemoryManager.StringToByteArray(BoneLoader.HairFrontRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), MemoryManager.StringToByteArray(BoneLoader.HairB.Replace(" ", string.Empty)));
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
                {
                    if (BoneLoader.ExHairA != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), MemoryManager.StringToByteArray(BoneLoader.ExHairA.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
                {
                    if (BoneLoader.ExHairB != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), MemoryManager.StringToByteArray(BoneLoader.ExHairB.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
                {
                    if (BoneLoader.ExHairC != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), MemoryManager.StringToByteArray(BoneLoader.ExHairC.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
                {
                    if (BoneLoader.ExHairD != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), MemoryManager.StringToByteArray(BoneLoader.ExHairD.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
                {
                    if (BoneLoader.ExHairE != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), MemoryManager.StringToByteArray(BoneLoader.ExHairE.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
                {
                    if (BoneLoader.ExHairF != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), MemoryManager.StringToByteArray(BoneLoader.ExHairF.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
                {
                    if (BoneLoader.ExHairG != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), MemoryManager.StringToByteArray(BoneLoader.ExHairG.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
                {
                    if (BoneLoader.ExHairH != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), MemoryManager.StringToByteArray(BoneLoader.ExHairH.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
                {
                    if (BoneLoader.ExHairI != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), MemoryManager.StringToByteArray(BoneLoader.ExHairI.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
                {
                    if (BoneLoader.ExHairJ != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), MemoryManager.StringToByteArray(BoneLoader.ExHairJ.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
                {
                    if (BoneLoader.ExHairK != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), MemoryManager.StringToByteArray(BoneLoader.ExHairK.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
                {
                    if (BoneLoader.ExHairL != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), MemoryManager.StringToByteArray(BoneLoader.ExHairL.Replace(" ", string.Empty)));
                    }
                }
                #endregion
                #region Earrings
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), MemoryManager.StringToByteArray(BoneLoader.EarringALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), MemoryManager.StringToByteArray(BoneLoader.EarringARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), MemoryManager.StringToByteArray(BoneLoader.EarringBLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), MemoryManager.StringToByteArray(BoneLoader.EarringBRight.Replace(" ", string.Empty)));
                #endregion
                #region Body
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), MemoryManager.StringToByteArray(BoneLoader.SpineA.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), MemoryManager.StringToByteArray(BoneLoader.SpineB.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), MemoryManager.StringToByteArray(BoneLoader.BreastLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), MemoryManager.StringToByteArray(BoneLoader.BreastRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), MemoryManager.StringToByteArray(BoneLoader.SpineC.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), MemoryManager.StringToByteArray(BoneLoader.ScabbardLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), MemoryManager.StringToByteArray(BoneLoader.ScabbardRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), MemoryManager.StringToByteArray(BoneLoader.Neck.Replace(" ", string.Empty)));
                #endregion
                #region LeftArm
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClavicleLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), MemoryManager.StringToByteArray(BoneLoader.ArmLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(BoneLoader.ArmRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), MemoryManager.StringToByteArray(BoneLoader.PauldronLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), MemoryManager.StringToByteArray(BoneLoader.ForearmLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), MemoryManager.StringToByteArray(BoneLoader.ShoulderLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), MemoryManager.StringToByteArray(BoneLoader.ShieldLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), MemoryManager.StringToByteArray(BoneLoader.ElbowLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), MemoryManager.StringToByteArray(BoneLoader.CouterLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), MemoryManager.StringToByteArray(BoneLoader.WristLeft.Replace(" ", string.Empty)));
                #endregion
                #region RightArm
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), MemoryManager.StringToByteArray(BoneLoader.ClavicleRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(BoneLoader.ArmRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(BoneLoader.ArmRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), MemoryManager.StringToByteArray(BoneLoader.PauldronRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), MemoryManager.StringToByteArray(BoneLoader.ForearmRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), MemoryManager.StringToByteArray(BoneLoader.ShoulderRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), MemoryManager.StringToByteArray(BoneLoader.ShieldRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), MemoryManager.StringToByteArray(BoneLoader.ElbowRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), MemoryManager.StringToByteArray(BoneLoader.CouterRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), MemoryManager.StringToByteArray(BoneLoader.WristRight.Replace(" ", string.Empty)));
                #endregion
                #region Clothes
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackBLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackBRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontBLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontBRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideBLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideBRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackCLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackCRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontCLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontCRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideCLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideCRight.Replace(" ", string.Empty)));
                #endregion
                #region Weapons
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), MemoryManager.StringToByteArray(BoneLoader.WeaponLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), MemoryManager.StringToByteArray(BoneLoader.WeaponRight.Replace(" ", string.Empty)));
                #endregion
                #region LeftHand
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), MemoryManager.StringToByteArray(BoneLoader.HandLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), MemoryManager.StringToByteArray(BoneLoader.IndexALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), MemoryManager.StringToByteArray(BoneLoader.PinkyALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), MemoryManager.StringToByteArray(BoneLoader.RingALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), MemoryManager.StringToByteArray(BoneLoader.MiddleALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), MemoryManager.StringToByteArray(BoneLoader.ThumbALeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), MemoryManager.StringToByteArray(BoneLoader.IndexBLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), MemoryManager.StringToByteArray(BoneLoader.PinkyBLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), MemoryManager.StringToByteArray(BoneLoader.RingBLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), MemoryManager.StringToByteArray(BoneLoader.MiddleBLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ThumbBLeft.Replace(" ", string.Empty)));
                #endregion
                #region RightHand
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), MemoryManager.StringToByteArray(BoneLoader.HandRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), MemoryManager.StringToByteArray(BoneLoader.IndexARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), MemoryManager.StringToByteArray(BoneLoader.PinkyARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), MemoryManager.StringToByteArray(BoneLoader.RingARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), MemoryManager.StringToByteArray(BoneLoader.MiddleARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), MemoryManager.StringToByteArray(BoneLoader.ThumbARight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), MemoryManager.StringToByteArray(BoneLoader.IndexBRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), MemoryManager.StringToByteArray(BoneLoader.PinkyBRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), MemoryManager.StringToByteArray(BoneLoader.RingBRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), MemoryManager.StringToByteArray(BoneLoader.MiddleBRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), MemoryManager.StringToByteArray(BoneLoader.ThumbBRight.Replace(" ", string.Empty)));
                #endregion
                #region Waist
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), MemoryManager.StringToByteArray(BoneLoader.Waist.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), MemoryManager.StringToByteArray(BoneLoader.HolsterLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), MemoryManager.StringToByteArray(BoneLoader.HolsterRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), MemoryManager.StringToByteArray(BoneLoader.SheatheLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), MemoryManager.StringToByteArray(BoneLoader.SheatheRight.Replace(" ", string.Empty)));
                if (BoneLoader.TailA != null)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), MemoryManager.StringToByteArray(BoneLoader.TailA.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), MemoryManager.StringToByteArray(BoneLoader.TailB.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), MemoryManager.StringToByteArray(BoneLoader.TailC.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), MemoryManager.StringToByteArray(BoneLoader.TailD.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), MemoryManager.StringToByteArray(BoneLoader.TailE.Replace(" ", string.Empty)));
                }
                #endregion
                #region LeftLeg
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), MemoryManager.StringToByteArray(BoneLoader.LegLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), MemoryManager.StringToByteArray(BoneLoader.KneeLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), MemoryManager.StringToByteArray(BoneLoader.CalfLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), MemoryManager.StringToByteArray(BoneLoader.PoleynLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), MemoryManager.StringToByteArray(BoneLoader.FootLeft.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), MemoryManager.StringToByteArray(BoneLoader.ToesLeft.Replace(" ", string.Empty)));
                #endregion
                #region RightLeg
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), MemoryManager.StringToByteArray(BoneLoader.LegRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), MemoryManager.StringToByteArray(BoneLoader.KneeRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), MemoryManager.StringToByteArray(BoneLoader.CalfRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), MemoryManager.StringToByteArray(BoneLoader.PoleynRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), MemoryManager.StringToByteArray(BoneLoader.FootRight.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), MemoryManager.StringToByteArray(BoneLoader.ToesRight.Replace(" ", string.Empty)));
                #endregion
                #region Helm
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
                {
                    if (BoneLoader.ExMetA != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), MemoryManager.StringToByteArray(BoneLoader.ExMetA.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
                {
                    if (BoneLoader.ExMetB != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), MemoryManager.StringToByteArray(BoneLoader.ExMetB.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
                {
                    if (BoneLoader.ExMetC != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), MemoryManager.StringToByteArray(BoneLoader.ExMetC.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
                {
                    if (BoneLoader.ExMetD != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), MemoryManager.StringToByteArray(BoneLoader.ExMetD.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
                {
                    if (BoneLoader.ExMetE != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), MemoryManager.StringToByteArray(BoneLoader.ExMetE.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
                {
                    if (BoneLoader.ExMetF != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), MemoryManager.StringToByteArray(BoneLoader.ExMetF.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
                {
                    if (BoneLoader.ExMetG != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), MemoryManager.StringToByteArray(BoneLoader.ExMetG.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
                {
                    if (BoneLoader.ExMetH != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), MemoryManager.StringToByteArray(BoneLoader.ExMetH.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
                {
                    if (BoneLoader.ExMetI != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), MemoryManager.StringToByteArray(BoneLoader.ExMetI.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
                {
                    if (BoneLoader.ExMetJ != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), MemoryManager.StringToByteArray(BoneLoader.ExMetJ.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
                {
                    if (BoneLoader.ExMetK != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), MemoryManager.StringToByteArray(BoneLoader.ExMetK.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
                {
                    if (BoneLoader.ExMetL != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), MemoryManager.StringToByteArray(BoneLoader.ExMetL.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
                {
                    if (BoneLoader.ExMetM != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), MemoryManager.StringToByteArray(BoneLoader.ExMetM.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
                {
                    if (BoneLoader.ExMetN != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), MemoryManager.StringToByteArray(BoneLoader.ExMetN.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
                {
                    if (BoneLoader.ExMetO != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), MemoryManager.StringToByteArray(BoneLoader.ExMetO.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
                {
                    if (BoneLoader.ExMetP != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), MemoryManager.StringToByteArray(BoneLoader.ExMetP.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
                {
                    if (BoneLoader.ExMetQ != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), MemoryManager.StringToByteArray(BoneLoader.ExMetQ.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
                {
                    if (BoneLoader.ExMetR != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), MemoryManager.StringToByteArray(BoneLoader.ExMetR.Replace(" ", string.Empty)));
                    }
                }
                #endregion
                #region Top
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
                {
                    if (BoneLoader.ExTopA != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), MemoryManager.StringToByteArray(BoneLoader.ExTopA.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
                {
                    if (BoneLoader.ExTopB != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), MemoryManager.StringToByteArray(BoneLoader.ExTopB.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
                {
                    if (BoneLoader.ExTopC != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), MemoryManager.StringToByteArray(BoneLoader.ExTopC.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
                {
                    if (BoneLoader.ExTopD != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), MemoryManager.StringToByteArray(BoneLoader.ExTopD.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
                {
                    if (BoneLoader.ExTopE != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), MemoryManager.StringToByteArray(BoneLoader.ExTopE.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
                {
                    if (BoneLoader.ExTopF != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), MemoryManager.StringToByteArray(BoneLoader.ExTopF.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
                {
                    if (BoneLoader.ExTopG != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), MemoryManager.StringToByteArray(BoneLoader.ExTopG.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
                {
                    if (BoneLoader.ExTopH != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), MemoryManager.StringToByteArray(BoneLoader.ExTopH.Replace(" ", string.Empty)));
                    }
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
                {
                    if (BoneLoader.ExTopI != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), MemoryManager.StringToByteArray(BoneLoader.ExTopI.Replace(" ", string.Empty)));
                    }
                }
                #endregion
            }
            else return;
        }
        private void AdvLoadCMP_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog dig = new OpenFileDialog();
            dig.InitialDirectory = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDoc‌​uments), App.ToolBin, "Saves");
            dig.Filter = "Concept Matrix Pose File(*.cmp)|*.cmp";
            dig.DefaultExt = ".cmp";
            if (dig.ShowDialog() == true)
            {
                UncheckAll();
                EditModeButton.IsChecked = true;
                PhysicsButton.IsChecked = false;
                BoneSaves BoneLoader = JsonConvert.DeserializeObject<BoneSaves>(File.ReadAllText(dig.FileName));

                #region Head
                if (HeadAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), MemoryManager.StringToByteArray(BoneLoader.Head.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), MemoryManager.StringToByteArray(BoneLoader.EarLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), MemoryManager.StringToByteArray(BoneLoader.EarRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), MemoryManager.StringToByteArray(BoneLoader.Jaw.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidLowerLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidLowerRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyeLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), MemoryManager.StringToByteArray(BoneLoader.EyeRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), MemoryManager.StringToByteArray(BoneLoader.Nose.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothWhiskersLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothWhiskersRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(BoneLoader.HrothBridge.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(BoneLoader.HrothJawUpper.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpper.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsLeft.Replace(" ", string.Empty)));
                    if (BoneLoader.HrothLipLower != null || BoneLoader.VieraEar02ARight != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.LipLowerA.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperB.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.LipLowerB.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipLower.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ARight.Replace(" ", string.Empty)));
                    }
                    if (BoneLoader.VieraEar03ALeft != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03ALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03ARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04ALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04ARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerA.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01BLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01BRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02BLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02BRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03BLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03BRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04BLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04BRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerB.Replace(" ", string.Empty)));
                    }
                }
                #endregion
                #region Hair
                if (HairAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), MemoryManager.StringToByteArray(BoneLoader.HairA.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), MemoryManager.StringToByteArray(BoneLoader.HairFrontLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), MemoryManager.StringToByteArray(BoneLoader.HairFrontRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), MemoryManager.StringToByteArray(BoneLoader.HairB.Replace(" ", string.Empty)));
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
                    {
                        if (BoneLoader.ExHairA != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), MemoryManager.StringToByteArray(BoneLoader.ExHairA.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
                    {
                        if (BoneLoader.ExHairB != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), MemoryManager.StringToByteArray(BoneLoader.ExHairB.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
                    {
                        if (BoneLoader.ExHairC != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), MemoryManager.StringToByteArray(BoneLoader.ExHairC.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
                    {
                        if (BoneLoader.ExHairD != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), MemoryManager.StringToByteArray(BoneLoader.ExHairD.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
                    {
                        if (BoneLoader.ExHairE != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), MemoryManager.StringToByteArray(BoneLoader.ExHairE.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
                    {
                        if (BoneLoader.ExHairF != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), MemoryManager.StringToByteArray(BoneLoader.ExHairF.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
                    {
                        if (BoneLoader.ExHairG != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), MemoryManager.StringToByteArray(BoneLoader.ExHairG.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
                    {
                        if (BoneLoader.ExHairH != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), MemoryManager.StringToByteArray(BoneLoader.ExHairH.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
                    {
                        if (BoneLoader.ExHairI != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), MemoryManager.StringToByteArray(BoneLoader.ExHairI.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
                    {
                        if (BoneLoader.ExHairJ != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), MemoryManager.StringToByteArray(BoneLoader.ExHairJ.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
                    {
                        if (BoneLoader.ExHairK != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), MemoryManager.StringToByteArray(BoneLoader.ExHairK.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
                    {
                        if (BoneLoader.ExHairL != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), MemoryManager.StringToByteArray(BoneLoader.ExHairL.Replace(" ", string.Empty)));
                        }
                    }
                }
                #endregion
                #region Earrings
                if (EarringsAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), MemoryManager.StringToByteArray(BoneLoader.EarringALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), MemoryManager.StringToByteArray(BoneLoader.EarringARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), MemoryManager.StringToByteArray(BoneLoader.EarringBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), MemoryManager.StringToByteArray(BoneLoader.EarringBRight.Replace(" ", string.Empty)));
                }
                #endregion
                #region Body
                if (BodyAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), MemoryManager.StringToByteArray(BoneLoader.SpineA.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), MemoryManager.StringToByteArray(BoneLoader.SpineB.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), MemoryManager.StringToByteArray(BoneLoader.BreastLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), MemoryManager.StringToByteArray(BoneLoader.BreastRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), MemoryManager.StringToByteArray(BoneLoader.SpineC.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), MemoryManager.StringToByteArray(BoneLoader.ScabbardLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), MemoryManager.StringToByteArray(BoneLoader.ScabbardRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), MemoryManager.StringToByteArray(BoneLoader.Neck.Replace(" ", string.Empty)));
                }
                #endregion
                #region LeftArm
                if (LeftArmAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClavicleLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), MemoryManager.StringToByteArray(BoneLoader.ArmLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(BoneLoader.ArmRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), MemoryManager.StringToByteArray(BoneLoader.PauldronLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), MemoryManager.StringToByteArray(BoneLoader.ForearmLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), MemoryManager.StringToByteArray(BoneLoader.ShoulderLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), MemoryManager.StringToByteArray(BoneLoader.ShieldLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), MemoryManager.StringToByteArray(BoneLoader.ElbowLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), MemoryManager.StringToByteArray(BoneLoader.CouterLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), MemoryManager.StringToByteArray(BoneLoader.WristLeft.Replace(" ", string.Empty)));
                }
                #endregion
                #region RightArm
                if (RightArmAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), MemoryManager.StringToByteArray(BoneLoader.ClavicleRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(BoneLoader.ArmRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(BoneLoader.ArmRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), MemoryManager.StringToByteArray(BoneLoader.PauldronRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), MemoryManager.StringToByteArray(BoneLoader.ForearmRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), MemoryManager.StringToByteArray(BoneLoader.ShoulderRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), MemoryManager.StringToByteArray(BoneLoader.ShieldRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), MemoryManager.StringToByteArray(BoneLoader.ElbowRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), MemoryManager.StringToByteArray(BoneLoader.CouterRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), MemoryManager.StringToByteArray(BoneLoader.WristRight.Replace(" ", string.Empty)));
                }
                #endregion
                #region Clothes
                if (ClothesAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackCLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackCRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontCLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontCRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideCLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideCRight.Replace(" ", string.Empty)));
                }
                #endregion
                #region Weapons
                if (WeaponsAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), MemoryManager.StringToByteArray(BoneLoader.WeaponLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), MemoryManager.StringToByteArray(BoneLoader.WeaponRight.Replace(" ", string.Empty)));
                }
                #endregion
                #region LeftHand
                if (LeftHandAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), MemoryManager.StringToByteArray(BoneLoader.HandLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), MemoryManager.StringToByteArray(BoneLoader.IndexALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), MemoryManager.StringToByteArray(BoneLoader.PinkyALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), MemoryManager.StringToByteArray(BoneLoader.RingALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), MemoryManager.StringToByteArray(BoneLoader.MiddleALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), MemoryManager.StringToByteArray(BoneLoader.ThumbALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), MemoryManager.StringToByteArray(BoneLoader.IndexBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), MemoryManager.StringToByteArray(BoneLoader.PinkyBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), MemoryManager.StringToByteArray(BoneLoader.RingBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), MemoryManager.StringToByteArray(BoneLoader.MiddleBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ThumbBLeft.Replace(" ", string.Empty)));
                }
                #endregion
                #region RightHand
                if (RightHandAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), MemoryManager.StringToByteArray(BoneLoader.HandRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), MemoryManager.StringToByteArray(BoneLoader.IndexARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), MemoryManager.StringToByteArray(BoneLoader.PinkyARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), MemoryManager.StringToByteArray(BoneLoader.RingARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), MemoryManager.StringToByteArray(BoneLoader.MiddleARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), MemoryManager.StringToByteArray(BoneLoader.ThumbARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), MemoryManager.StringToByteArray(BoneLoader.IndexBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), MemoryManager.StringToByteArray(BoneLoader.PinkyBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), MemoryManager.StringToByteArray(BoneLoader.RingBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), MemoryManager.StringToByteArray(BoneLoader.MiddleBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), MemoryManager.StringToByteArray(BoneLoader.ThumbBRight.Replace(" ", string.Empty)));
                }
                #endregion
                #region Waist
                if (WaistAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), MemoryManager.StringToByteArray(BoneLoader.Waist.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), MemoryManager.StringToByteArray(BoneLoader.HolsterLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), MemoryManager.StringToByteArray(BoneLoader.HolsterRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), MemoryManager.StringToByteArray(BoneLoader.SheatheLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), MemoryManager.StringToByteArray(BoneLoader.SheatheRight.Replace(" ", string.Empty)));
                    if (BoneLoader.TailA != null)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), MemoryManager.StringToByteArray(BoneLoader.TailA.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), MemoryManager.StringToByteArray(BoneLoader.TailB.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), MemoryManager.StringToByteArray(BoneLoader.TailC.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), MemoryManager.StringToByteArray(BoneLoader.TailD.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), MemoryManager.StringToByteArray(BoneLoader.TailE.Replace(" ", string.Empty)));
                    }
                }
                #endregion
                #region LeftLeg
                if (LeftLegAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), MemoryManager.StringToByteArray(BoneLoader.LegLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), MemoryManager.StringToByteArray(BoneLoader.KneeLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), MemoryManager.StringToByteArray(BoneLoader.CalfLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), MemoryManager.StringToByteArray(BoneLoader.PoleynLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), MemoryManager.StringToByteArray(BoneLoader.FootLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), MemoryManager.StringToByteArray(BoneLoader.ToesLeft.Replace(" ", string.Empty)));
                }
                #endregion
                #region RightLeg
                if (RightLegAdvLoad == true)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), MemoryManager.StringToByteArray(BoneLoader.LegRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), MemoryManager.StringToByteArray(BoneLoader.KneeRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), MemoryManager.StringToByteArray(BoneLoader.CalfRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), MemoryManager.StringToByteArray(BoneLoader.PoleynRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), MemoryManager.StringToByteArray(BoneLoader.FootRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), MemoryManager.StringToByteArray(BoneLoader.ToesRight.Replace(" ", string.Empty)));
                }
                #endregion
                #region Helm
                if (HelmAdvLoad == true)
                {
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
                    {
                        if (BoneLoader.ExMetA != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), MemoryManager.StringToByteArray(BoneLoader.ExMetA.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
                    {
                        if (BoneLoader.ExMetB != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), MemoryManager.StringToByteArray(BoneLoader.ExMetB.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
                    {
                        if (BoneLoader.ExMetC != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), MemoryManager.StringToByteArray(BoneLoader.ExMetC.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
                    {
                        if (BoneLoader.ExMetD != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), MemoryManager.StringToByteArray(BoneLoader.ExMetD.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
                    {
                        if (BoneLoader.ExMetE != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), MemoryManager.StringToByteArray(BoneLoader.ExMetE.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
                    {
                        if (BoneLoader.ExMetF != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), MemoryManager.StringToByteArray(BoneLoader.ExMetF.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
                    {
                        if (BoneLoader.ExMetG != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), MemoryManager.StringToByteArray(BoneLoader.ExMetG.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
                    {
                        if (BoneLoader.ExMetH != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), MemoryManager.StringToByteArray(BoneLoader.ExMetH.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
                    {
                        if (BoneLoader.ExMetI != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), MemoryManager.StringToByteArray(BoneLoader.ExMetI.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
                    {
                        if (BoneLoader.ExMetJ != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), MemoryManager.StringToByteArray(BoneLoader.ExMetJ.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
                    {
                        if (BoneLoader.ExMetK != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), MemoryManager.StringToByteArray(BoneLoader.ExMetK.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
                    {
                        if (BoneLoader.ExMetL != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), MemoryManager.StringToByteArray(BoneLoader.ExMetL.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
                    {
                        if (BoneLoader.ExMetM != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), MemoryManager.StringToByteArray(BoneLoader.ExMetM.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
                    {
                        if (BoneLoader.ExMetN != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), MemoryManager.StringToByteArray(BoneLoader.ExMetN.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
                    {
                        if (BoneLoader.ExMetO != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), MemoryManager.StringToByteArray(BoneLoader.ExMetO.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
                    {
                        if (BoneLoader.ExMetP != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), MemoryManager.StringToByteArray(BoneLoader.ExMetP.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
                    {
                        if (BoneLoader.ExMetQ != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), MemoryManager.StringToByteArray(BoneLoader.ExMetQ.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
                    {
                        if (BoneLoader.ExMetR != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), MemoryManager.StringToByteArray(BoneLoader.ExMetR.Replace(" ", string.Empty)));
                        }
                    }
                }
                #endregion
                #region Top
                if (TopAdvLoad == true)
                {
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
                    {
                        if (BoneLoader.ExTopA != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), MemoryManager.StringToByteArray(BoneLoader.ExTopA.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
                    {
                        if (BoneLoader.ExTopB != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), MemoryManager.StringToByteArray(BoneLoader.ExTopB.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
                    {
                        if (BoneLoader.ExTopC != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), MemoryManager.StringToByteArray(BoneLoader.ExTopC.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
                    {
                        if (BoneLoader.ExTopD != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), MemoryManager.StringToByteArray(BoneLoader.ExTopD.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
                    {
                        if (BoneLoader.ExTopE != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), MemoryManager.StringToByteArray(BoneLoader.ExTopE.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
                    {
                        if (BoneLoader.ExTopF != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), MemoryManager.StringToByteArray(BoneLoader.ExTopF.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
                    {
                        if (BoneLoader.ExTopG != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), MemoryManager.StringToByteArray(BoneLoader.ExTopG.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
                    {
                        if (BoneLoader.ExTopH != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), MemoryManager.StringToByteArray(BoneLoader.ExTopH.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
                    {
                        if (BoneLoader.ExTopI != null)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), MemoryManager.StringToByteArray(BoneLoader.ExTopI.Replace(" ", string.Empty)));
                        }
                    }
                }
                #endregion
            }
            else return;
        }
        private void SelectAll_Click(object sender, RoutedEventArgs e)
        {
            LoadHead.IsChecked = true;
            LoadHair.IsChecked = true;
            LoadEarrings.IsChecked = true;
            LoadBody.IsChecked = true;
            LoadLeftArm.IsChecked = true;
            LoadRightArm.IsChecked = true;
            LoadClothes.IsChecked = true;
            LoadWeapons.IsChecked = true;
            LoadLeftHand.IsChecked = true;
            LoadRightHand.IsChecked = true;
            LoadWaist.IsChecked = true;
            LoadLeftLeg.IsChecked = true;
            LoadRightLeg.IsChecked = true;
            LoadHelm.IsChecked = true;
            LoadTop.IsChecked = true;
        }
        private void SelectNone_Click(object sender, RoutedEventArgs e)
        {
            LoadHead.IsChecked = false;
            LoadHair.IsChecked = false;
            LoadEarrings.IsChecked = false;
            LoadBody.IsChecked = false;
            LoadLeftArm.IsChecked = false;
            LoadRightArm.IsChecked = false;
            LoadClothes.IsChecked = false;
            LoadWeapons.IsChecked = false;
            LoadLeftHand.IsChecked = false;
            LoadRightHand.IsChecked = false;
            LoadWaist.IsChecked = false;
            LoadLeftLeg.IsChecked = false;
            LoadRightLeg.IsChecked = false;
            LoadHelm.IsChecked = false;
            LoadTop.IsChecked = false;
        }
    }
}